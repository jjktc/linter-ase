##===========================================================================
## Copyright Â© 2011-2018
## Cognition Corporation, Lexington, MA  USA
##===========================================================================

##===========================================================================
## GetIconToUse
##===========================================================================
void SSC_DBObj::GetIconToUse( $sHint )
{
	sGetIconToUse( $sHint );
}

##===========================================================================
## sGetIconToUse
##===========================================================================
variant SSC_DBObj::sGetIconToUse( $sHint )
{
	$sIcon = "";
	$sThemeFolder = ::sGetThemeFolder();
	if ($sHint == "18x18")
	{
		$sIcon = "Images/" + $sThemeFolder + "/page18x18.png";
	}
	else if ($sHint == "24x24")
	{
		$sIcon = "Images/" + $sThemeFolder + "/page24x24.png";
	}
	else
	{
		##When in doubt assume $sHint == "14x14"
		$sIcon = "Images/" + $sThemeFolder + "/page14x14.png";
	};

	return $sIcon;
}
##===========================================================================
## GetSection_Builtin
##===========================================================================
void SSC_DBObj::GetSection_Builtin($sRequest)
{
	switch($sRequest)
	{
		case "RequirementsSummaryReport":
			$sRef = Ref;
			variant $msmStatusMaps;
			variant $msmStatusLabels;
			variant $msmStatusTitle;
			## Collect all the requirements first
			if( *.classname == "SSC_Project" )
				$loReqs = loGetObjects( "Requirements", "Below" );
			else
				$loReqs = loGetObjects( "Requirements", "AllBelow" );

			## Note on performance here. This may run on large numbers of requirements 10,000+ so
			## use direct read access when possible to optimize access time
			SSC_SysReq::GetRequirementSummaryInfo($loReqs, $msmStatusMaps, $msmStatusLabels, $msmStatusTitle);

			SetDaoContext( "msmRequirementStatusReportMaps", $msmStatusMaps );

			#inline
			<div style='font:bold 8pt verdana;'>
				Total Requirements: <%Count( $loReqs ) %>
			</div>
			#endinline;

			$keys = GetKeys($msmStatusMaps);
			$keys/
			{
				$key = *;
				$sTitle = Pick($msmStatusTitle, $key);
				"<div style='margin-top:.1in;'>";
				"<div style='font-weight:bold;margin-bottom:.05in;'>" + $sTitle + "</div>";
				$msoReqs = Pick($msmStatusMaps, $key);
				$wsoLabels = Pick($msmStatusLabels, $key);

				$nLabels = Count( $wsoLabels );

				$lsLabels = CList();
				$lsValues = CList();
				$lsColors = CList();

				$nReqTotal = Count( $msoReqs );

				#inline
				<table style=''>
					<tr>
					<td style='width:3.5in;vertical-align:top;'>
						<table style=''>
				#endinline;
						$bColor = false;
						$wsoLabels/
						{
							$sLabel = *;
							$nCurrTotal = Count(pickrange($msoReqs, $sLabel));

							##Don't show zero values in the chart
							if( $nCurrTotal != 0 )
							{
								$lsLabels << $sLabel;
								$lsValues << CStr( $nCurrTotal );

								if( NOT $bColor )
								{
									$sTemp = Lower( $sLabel );
									if( ( $sTemp == "green" ) OR ( $sTemp == "gray" ) OR ( $sTemp == "yellow" ) OR ( $sTemp == "red" ) OR ( $sTemp == "blue" ) )
									{
										$bColor = true;
										$lsColors << $sLabel;
									};
								}
								else
									$lsColors << $sLabel;

							};
							#inline
							<tr>
								<td style='width:70%;height:.1in;'>
									<span class='fakelink'
										sUrl='GetSnippet.ase?oThis=<%$sRef%>&sShowingWhat=ReqsInReqSummaryReport&sLabel=<%URLEncode( $sLabel )%>&key=<%URLEncode( $key )%>'
										onclick='top.OpenGenericSlider( this )'>
										<%$sLabel%>:
									</span>
								</td>
								<td style='width:10%;height:.1in;'>
									<%$nCurrTotal%>
								</td>
								<td style='width:20%;height:.1in;'>
									(<% $nReqTotal > 0 ? Format( $nCurrTotal DIV $nReqTotal, "Percent" ) : "0%" %>)
								</td>
							</tr>
							#endinline;
						};
					#inline
						</table>
					</td>
					<td style='vertical-align:top;'>
					#endinline;

					$sSlices = Join( $lsValues, "|" );
					$sLabels = Join( $lsLabels, "|" );

					if( NOT IsEmpty( $lsColors ) )
						$sColors = Join( $lsColors, "|" );
					else
						$sColors = "";

					#inline
						<embed wmode="transparent" style="z-index:300000;width:500px; height:350px;margin-top:-55px;"
						    src="piegraph.asp?sSlices=<%$sSlices%>&sLabels=<%$sLabels%>&sColors=<%$sColors%>&sLabelFont=<%URLEncode( "arb,16,black" )%> "
							type="image/svg+xml" pluginspage="http://www.adobe.com/svg/viewer/install/" vAlign=top >
					</td>
					</tr>
				</table>
				#endinline;


				"</div>";
			};
			break;
		case "Comments":
			GetSnippet( "sComments" );
			break;
		case "DetailedDescription":

			GetSnippet( "DetailedDescriptionWithMargin" );
			break;

		case "Notifications":
			$bCanCreate = $this.bCheckAccess( "MODIFY" );
			if( $bCanCreate )
				GetFakeFlexTable_Setup( "Notifications", "" );

			"<div style='margin-left:.2in'>";
				GetFakeFlexTable( "Notifications" );
			"</div>";
			break;
		case "Documents":
		case "Sections":
			$sPlugins = "Menu;sMenu='TableMenu'";

			GetFlexTableSection( $sRequest, $sPlugins );

			break;

		case "Dashboard":
			## early out if no overrides of the snippet exist
			if ( Not oGetAseBMItem( "AseSnippet", $sRequest ) ) {
				GetDashboard();
			} else {
				GetSnippet( $sRequest );
			};
			break;

		case "NumberFormat":
			## show number format field
			GetTableForm( "NumberFormat", 130, "100%" );
			break;

		case "AuditLog":
			$sPlugins = "Menu;sMenu='TableMenu'";

			##GetFlexTableSection( $sRequest, $sPlugins, "Child", "None" );
			#inline
			<div style="padding:.1in;" >
				<%GetSnippet( "Modifications" )%>
			</div>
			#endinline;
			break;

		case "WorkflowLog":
			$sPlugins = "Menu;sMenu='TableMenu'";

			GetFlexTableSection( $sRequest, $sPlugins, "Child", "None", "Workflow" );
			SetRequest( "sFormat", null );
			break;

		case "Status":
			$sRef = $this.Ref;
			#inline
			<div id='<%$sRef%>' sShowingWhat='Status_section' sRef='<%$sRef%>' subscription='<%$sRef%>~onStatusUpdate~^<%$sRef%>~onRefresh~'>
				<%GetSnippet( "Status_section" )%>
			</div>
			#endinline;
			"<div style='display:inline'>";

			$sAuthor = sGetData( "sAuthor" );
			$sRef = Ref;

			$bCanModify = bIsEditable();
			$bCanAdmin = sOKToAccess( "ADMIN" )=="";
			#inline
			<table class'TableForm' style='font-family:verdana;color:black;border:none;text-align:left;margin-left:.15in;'>
				<tr>
					<td style="width:1.35in;" valign=top class="HelpTip" sHelpId="Field_Author">
						Author:
					</td>
					<td>
			#endinline;
				if( $bCanAdmin )
				{
					AutocompleteField( "sAuthor", "Owners", "Author here...", "", "font:8pt verdana;", "bNoDelimeters=true" );
				}
				else
					$sAuthor;

			#inline
					</td>
				</tr>
				<tr>
						<td style="width:1.3in;" valign=top class="HelpTip" sHelpId="Field_Owner">
							<%GetGenString("LabelAssignedTo")%>:
						</td>
						<td>
							<div sShowingWhat='sOwner' sRef='<%$sRef%>' subscription='<%Ref%>~onStatusUpdate~' id='<%$sRef%>'>
								<%GetSnippet( "sOwner" )%>
							</div>
						</td>
				</tr>
			</table>
			</div>
			#endinline;
			break;

		case "Voices":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed("","VOICES");
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='V'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;
		case "Tests":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed("","TESTS");
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='T'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;
		case "Risks":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed("","RISKS");
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='K'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;
		case "Initiatives":
			$sPlugins = "Menu;sMenu='TableMenu'";
			$bRapidAdderAllowed = bRapidAdderAllowed("","INITIATIVES");
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='INIT'";
			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Requirements":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed("","REQUIREMENTS");
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='R'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Folders":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed( "", "CATEGORIES" );
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='F'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Groups":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed( "", "GROUPS" );
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='S'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Mitigations":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed( "", "MITIGATIONS" );
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='M'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Defects":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed( "", "DEFECTS" );
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='DFCT'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;


		case "Meetings":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed();
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='WM'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "MeetingCategories":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed();
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='WMC'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;
		case "EntryQuestions":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed();
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='WQE' ";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;
		case "ExitQuestions":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed();
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='WQX' ";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;
		case "ParentTask":
		case "SubTasks":
		case "ParentProcess":

			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed();
			if( $bRapidAdderAllowed and $sRequest == "SubTasks" )
				$sPlugins += "|RapidAdder;sAdderTag='WTD'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Deliverables":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed();
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='WTD'";

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Applications":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed();
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='R'";

			$sAdderHints = "&sReqType=COGAPP";
			SetRequest( "sAdderHints", $sAdderHints );

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "ActionItems":
			$sPlugins = "Menu;sMenu='TableMenu'";

			$bRapidAdderAllowed = bRapidAdderAllowed( "", "ACTIONITEMS" );
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='AI'";

			SetRequest( "sGrouping", "byStatus" );

			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "Reviews":
			$sPlugins = "Menu;sMenu='TableMenu'";

			GetFlexTableSection( $sRequest, $sPlugins, "", "None" );
			break;

		case "Inputs":
		case "SummaryInputs":
			$sPlugins = "Menu;sMenu='TableMenu'";
			$bRapidAdderAllowed = bRapidAdderAllowed( "", "INPUTS" );
			if( $bRapidAdderAllowed )
				$sPlugins += "|RapidAdder;sAdderTag='I'";

			GetFlexTableSection( $sRequest, $sPlugins );

			break;

		case "Breakdowns":
		case "Source":
		case "Attachments":
			$sPlugins = "Menu;sMenu='TableMenu'";
			GetFlexTableSection( $sRequest, $sPlugins );

			break;
		case "Privileges":
			GetPrivilegeSection();
			break;
		case "History":
			$oThis = *;
			$sRef = Ref;
			"<div style = 'margin-left:20px;' subscription='<%$sRef%>~onRefresh~' sShowingWhat='History' sRef='<%$sRef%>'  id='<% $sRef %>' >";
			GetSnippet( "History" );
			"</div>";
			break;

		case "SrcObject":
			$sPlugins = "Menu;sMenu='TableMenu'";
			GetFlexTableSection( $sRequest, $sPlugins );
			break;

		case "DerivedFrom":
			$sPlugins = "Menu;sMenu='TableMenu'";
			SetThreadContext("oDerivedObj", $this);
			GetFlexTable($sRequest,"table", "DerivedFrom","text-align:left", "", "","default","", "None", $sPlugins);
			break;

		case "TargetObjects":
			$sPlugins = "Menu;sMenu='TableMenu'";
			GetFlexTable($sRequest,"table", "ReferencedObject","text-align:left", "", "","default","All", "", $sPlugins);
			break;

		case "Reviews":
			$sPlugins = "Menu;sMenu='TableMenu'";
			GetFlexTable($sRequest,"table", "Reviews","text-align:left", "", "","default","None", "", $sPlugins);
			break;

		case "Derivatives":
			$sPlugins = "Menu;sMenu='TableMenu'";
			GetFlexTable($sRequest, "table", "ReferencedObject", "text-align:left", "", "","default", "", "None", $sPlugins);
			break;

		case "Notes":
			$sCurrSection = GetRequest("sCurrSection");
			if ( $sCurrSection == null ) $sCurrSection = "";

			$bEditable = bIsEditable();

			if( NOT bIsPseudoDeleted() )
			{
				##new note div
				#inline
				<div style="margin-left:20px;" class="fakelink" onclick="top.NewNoteLink(this);" sRef = '<%Ref%>' sSection = "<%$sCurrSection%>" sType = "Comment">
					<span style = 'font-family:verdana;font-size:8pt;'>
					New Note
					</span>
				</div>
				#endinline;
			};

			$loNotes = GetReverse( loGetObjects("Notes",$sCurrSection) );

			$loNotes/
			{
				$oCurrNote = *;
				$oCurrNote.GetNotebookSection( $sCurrSection, $bEditable );
			};

			break;

		case "Roles":
			$sRef = Ref;
			#inline
		    <div sShowingWhat='Roles' sRef='<%$sRef%>' id='<%$sRef%>' subscription='<%$sRef%>~onRefresh~onRoleAssignment' style='margin-left:20px;' >
			<%GetSnippet( "Roles" )%>
			</div>
			#endinline;

			break;

		default:
			super::GetSection_Builtin($sRequest);
	};
}


##===========================================================================
## GetSnippet_Builtin ( sShowingWhat )
##===========================================================================
void SSC_DBObj::GetSnippet_Builtin( $sShowingWhat )
{
	$sSupData = "";
	$sOriginalRequest = $sShowingWhat;
	if( find( $sShowingWhat, EOI ) != -1 )
	{
		$sSupData = Item( $sShowingWhat, 2, 2, EOI );
		$sShowingWhat = Item( $sShowingWhat, 1, 1, EOI );
	};

	$lo = CList();
	switch( $sShowingWhat )
	{
		case "AttachmentQualifier":
			break;
		case "sAllowFormatOverride":
			DropList( "sAllowFormatOverride", "sAllowFormatOverride" );

			break;
		case "sViewDefinition":
			$sRef = Ref;
			$sPublisher = $sRef + "~onRefresh~ViewDefinitionChange";
			DropList( "sViewDefinition", "sViewDefinition", "Select a view definition to use... (optional)", $sPublisher );

			break;
		case "MenuBarLinks":
			$sShowingWhat = GetDaoContext( "sShowingWhat" );
			if( Not $sShowingWhat )
				$sShowingWhat = "Home";

			GetMenu($sShowingWhat);
			break;
		case "Submenu":
			## which main menu are they asking for
			$sShowingWhat = GetRequest( "sForMainMenu" );

			## BEGIN LOGIC DUPLICATED IN SSC_Category::oGetCurrViewDef( $bForceCheckOnParent ), SSC_ItemGroup::InitializeViewPreference
			## Get the name of the ViewDef we should use
			$sViewDefDesired = $this.sGetMapValue( "S", "View Definition" );

			if ($sViewDefDesired == "" And $this.bInheritViewDefinitions()) {
				$sDocFormat = $this.sGetMapValue( "S", "sDocFormat" );
				if ( $sDocFormat == "" ) {
					$oPG = $this.oGetPrimaryGroup();
					if ( $oPG ) {
						$sViewDefDesired = $oPG.sGetMapValue( "S", "View Definition" );
					};
				}
				else if ( $sDocFormat == "Inherit from parent section" ) {
					$oSection = $this;
					## Look up the "chain" for the correct view definition
					## Stop looking if you find a specified view definition or the current level does not inherit from the parent
					while ( $oSection AND $sViewDefDesired == "" AND $sDocFormat == "Inherit from parent section" )	{
						$oObj = $oSection.oGetFolder();
						$oSection = $oObj == NULLOBJECT ? $oSection.oGetPrimaryGroup() : $oObj;

						if ( $oSection ) {
							$sViewDefDesired = $oSection.sGetMapValue( "S", "View Definition" );
							$sDocFormat = $oSection.sGetMapValue( "S", "sDocFormat" );
						};
					};
				};
			};


			## END LOGIC DUPLICATED IN SSC_Category::oGetCurrViewDef( $bForceCheckOnParent ), SSC_ItemGroup::InitializeViewPreference
			if ( $sViewDefDesired != "" ) {
				$oProject = oGetProject();
				## find the view def document
				$oDoc = $oProject.oGetViewDef($sViewDefDesired, false);

				if ( $oDoc ) {
					$loViews = CList();

					## get its views
					$loSecs = $oDoc.loGetObjects( "Sections", "Children" )[ lower( sDescription ) == lower( $sShowingWhat ) ];
					$oSec = first( $loSecs );
					if ( $oSec ) {
						$loViews = $oSec.loGetObjects( "Sections", "Children" );
					};

					## if not empty, then list them on the screen as links
					$nCount = count( $loViews );
					$bNotNeeded = ( $nCount == 1 and ( first( $loViews ).sDescription == "Default" ) );
					if ( $nCount > 0 and $bNotNeeded == false )
					{
						## what was the last sub-ViewDef shown
						$sCurrentView = GetRequest( "sCurrentView" );
						if ( $sCurrentView == NULL )
							$sCurrentView = GetDaoContext( "sCurrentView" );

						if ( $sCurrentView == "" or $sCurrentView == NULL )
							$sCurrentView = "Default";

						if ( NOT ( $loViews/sDescription contains $sCurrentView ) )
							$sCurrentView = "Default";

						$loViews/
						{
							$sView = sDescription;
							$sStyle = "CenterMenuLink";
							if ( $iternum == 0 and $sView != "Default" )
							{
								if ( $sCurrentView == "Default" )
									$sStyle = "CenterMenuLink' sShowing = 'true";

								$this.sCenterLink( "Default", $sShowingWhat + "&sCurrentView=", $sStyle );
							};

							$sStyle = "CenterMenuLink";
							if ( $sView == $sCurrentView )
								$sStyle = "CenterMenuLink' sShowing = 'true";

							$sViewShowing = $sShowingWhat + "&sCurrentView=" + URLEncode( $sView );
							$this.sCenterLink( $sView, $sViewShowing, $sStyle );
						};

					};
				};
			};
			break;

		case "RemoveFromCR":
			$oCR = CObj( $sSupData );

			$sExport = GetRequest( "sExport" );
			if ( $sExport == null ) $sExport = "";

			if ( $sExport == "" )
			{
				$sPublisher = Ref + "~onReloadBody~";;
				$sPrompt = GetGenString( "ksPromptConfirmRemoveFromCR" );
				#inline
					<div class='fakelink' onclick='top.RunMethodWithConfirmation( event, "<%$sPrompt%>", this, "RunUpdateMethod" );' publisher='<%$sPublisher%>' sArg1='<%Ref%>' sMethod='RemoveChangedObjectByRef' sRef='<%$oCR.Ref%>' >
						Remove
					</div>
				#endinline;
			};

			break;
				case "Derived Differences Link":
			##Check if we are derived from another project. If so, show the derived differences report
			$bDerived = $this.bHasObjects( "DerivedFrom", "DerivedFrom" );

			if( $bDerived )
			{
				$sDiffReport = "GetPage.ase?oThis="+ Ref + "&sShowingWhat=DerivedDifferencesReport" ;
				#inline
				<span sRef=<%Ref%>
						onclick='window.location= "<%$sDiffReport%>"'
						class="ActionLink" >Differences</span>
				</div>
				<br>
				#endinline;
			};
			break;

	    case "DerivedFromActions":
		    $oDerivedFrom = $this;
		    $oDerivedObj= GetThreadContext("oDerivedObj");
		    if ( COG_Base::bIsAvailable($oDerivedFrom) )
		    {
				$sDiffReport = URLEncode( "OnVersionCommandExecute.ase?oThis=" + $oDerivedObj.Ref + "&oPrevHItem=" + $oDerivedFrom.Ref +
					"&sRequest=DifferencesReport&sVersionDiff=false" );
		        #inline
			        <span sRef=<%$oDerivedObj.Ref%> href=''
					        onclick='top.window.open( "Run.ase?sLayout=JustBody&sHeaderType=NoHead&sBody=<%$sDiffReport%>", "_blank", "directories=no,location=no,menubar=no,status=no,titlebar=no,toolbar=no,resizable=yes,width=700px,top=0,left=0" );'
					        class="ActionLink" >Differences</span>
		        #endinline;
		    };
		    break;

		case "RoleSelection":
			$sSnippet = "RoleSelectionDetails" + EOI + $sSupData;
			$sRef = Ref;
			#inline
			<div sShowingWhat='<%$sSnippet%>' sRef='<%$sRef%>' id='<%$sRef%>' subscription='<%$sRef%>~onRefresh~'>
				<%GetSnippet( $sSnippet )%>
			</div>
			#endinline;

			break;

		case "RoleSelectionDetails":
			$oThis = *;
			$sRole = $sSupData;
			$sRef = Ref;
			$sSnippet = "RoleAssignment" + eoi + $sRole;

			$bEditable = false; ## let workflow do it...  bIsEditable();

			## get role
			$oRole = SSC_Role::oGetByID_s( $sSupData );

			#inline
			<div>
			#endinline;

			if ( $oRole != NULLOBJECT )
			{
				#inline
				<table>
				<col width=125px>
				<col width=150px>
				<col width=100px>
				#endinline;

				$bTeamOnly = True;
				$bGroupsOk = True;
				$bMutiple = False;

				if ( $oRole != NULLOBJECT )
				{
					$bMultiple = $oRole.bAllowMultiple;
					$bGroupsOk = $oRole.bAllowGroups;
					$bTeamOnly = $oRole.bRestrictToTeam;
				};

				$sNiceRole = SSC_Role::sGetNiceRoleName_s( $sRole ) + ":";
				$sSnippet = "RoleAssignment" + eoi + $sRole;

				if ( $bMultiple )
				{
					## get current number of holders
					$sSnippet = "MultipleRoleAssignment" + eoi + $sRole;

					## get all current people
					$loRoleHolders = SSC_Role::loGetByRole_s( $oThis, $sRole );

					$loRoleHolders/
					{
						$oHolder = *;
						$sPublisher = $oThis.Ref + "~onRefresh~onRoleAssignment";
						#inline
						<tr>
						<td><%sGetName()%></td>
						<td>
						#endinline;
						if ( $bEditable )
						{
							#inline
							<span class="fakelink" sMethod="RemoveRoleHolderByRef" sRef="<%$oThis.Ref%>"
									sArg1="<%$sRole%>" sArg2="<%$oHolder.Ref%>" sArg3="false" publisher="<%$sPublisher%>"
									onclick="top.RunUpdateMethod( this, this.getAttribute('sArg1'), this.getAttribute('sArg2'), this.getAttribute('sArg3') );"  >
								Remove
							</span>
							#endinline;
						};
						#inline
						</tr>
						#endinline;
						$sLastRole = $sRole;
					};
				};

				#inline
					<tr>
						<td colspan=2><%$oThis.GetSnippet( $sSnippet )%></td>
					</tr>
				</table>
				#endinline;
			}
			else
			{
				"No Role of Type " + $sSupData;
			};

			#inline
			</div>
			#endinline;

			break;

			## show nice drop list for role selection
			$sKey = "sRoleAssignment" + EOI + $sSupData;
			$sPublisher = $oThis.Ref + "~onRefresh~";
			DropList( $sKey, "Owners", "Select Role...", $sPublisher );

			break;


		case "WorkflowCommands":
			$oThis = *;
			$sRef = Ref;

			## go workflow commands
			$loCustom = loGetCommands( "", "" )[bShowInSnippet];

			if ( Not IsEmpty( $loCustom ) )
			{
				#inline
				<div>
				#endinline;
				$sThemeFolder = ::sGetThemeFolder();

				$loCustom/
				{
					$oCmd = *;
					$sName = $oCmd.sGetData( "sDescription" );
					if ( ItemCount( $sName, eoi ) > 1 ) $sName = Item( $sName, 2, 2, eoi );
					$sCmdRef = Ref;

					## decide if this needs to show UI
					$bShowUI = false;

					$bAuthenticate = bSignatureRequired;
					$bHasVariables = bHasVariables();
					$sDialogSize = sGetDialogSize();

					$sIcon = $oCmd.sCommandIcon;

					##make sure we look in the images theme directory if no path
					if( $sIcon != "" )
						$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );

					if ( $bAuthenticate Or $bHasVariables ) $bShowUI = true;



					#inline
					<div class="fakelink" style="display:block;" bHasVariables='<%$bHasVariables?"true":"false"%>' sDialogSize="<%$sDialogSize%>"
					sShowingWhat='CommandPrompts' onclick='top.ShowDialog( event ); event.cancelBubble = true;top.RunStateBasedCommand( this );'
					sHelpId='Callout_Command<%EOI + $sCmdRef%>' dynamicHelpTip=true
					sRef='<%$sRef%>' sCmd='<%$sCmdRef%>' >
					#endinline;

					if ( $sIcon != "" )
					{
						#inline
						<img src="<%$sIcon%>" style="" class="HelpTip" sHelpId="Callout_StateBased_Command">
						#endinline;
					};

					#inline
					<%$sName%></div>
					#endinline;

				};

				#inline
				</div>
				#endinline;

			};

			break;

		case "Roles":
			$oThis = *;

			## if workflow is used, let that handle it, otherwise consider editability
			$bNeedsWorkflow = bNeedsWorkflowState();

			$bHasEditPriv = bIsEditable();

			$bEditable = false;
			if ( Not $bNeedsWorkflow )
				$bEditable = $bHasEditPriv;

			## get roles available for this item
			$lsRoles = lsGetAvailableRoles();

			#inline
			<div >
			#endinline;

			if ( Not IsEmpty( $lsRoles ) )
			{
				if ( $bHasEditPriv )
				{
					#inline
					<table style="table-layout:fixed;" >
					<col style="width:1in;" />
					<col style="width:2in;" />
					<col style="width:1in;" />
					#endinline;
				}
				else
				{
					#inline
					<table style="table-layout:fixed;" >
					<col style="width:1in;" />
					<col style="width:100%;" />
					#endinline;
				};

				$sLastRole = "";

				## go through roles and build assignment table
				$lsRoles/
				{
					$sRole = *;

					## get the associated role
					$oRole = SSC_Role::oGetByID_s( $sRole );

					$bTeamOnly = True;
					$bGroupsOk = True;
					$bMutiple = False;

					if ( $oRole != NULLOBJECT )
					{
						$bMultiple = $oRole.bAllowMultiple;
						$bGroupsOk = $oRole.bAllowGroups;
						$bTeamOnly = $oRole.bRestrictToTeam;
					};

					$sNiceRole = SSC_Role::sGetNiceRoleName_s( $sRole ) + ":";
					$sSnippet = "RoleAssignment" + eoi + $sRole;

					## if this is workflow based, check special exception for OWNER
					if ( $bNeedsWorkflow )
						$bEditable = $bHasEditPriv And $sRole == "OWNER";

					if ( $bMultiple )
					{
						## get current number of holders
						$sSnippet = "MultipleRoleAssignment" + eoi + $sRole;

						## get all current people
						$loRoleHolders = SSC_Role::loGetByRole_s( $oThis, $sRole );

						$loRoleHolders/
						{
							$oHolder = *;

							#inline
							<tr>
							<td><%$sRole!=$sLastRole?$sNiceRole:""%></td>
							<td><%sGetName()%></td>
							#endinline;

							if ( $bEditable )
							{
								$sPublisher = $oThis.Ref + "~onRefresh~onRoleAssignment";

								#inline
								<td>
								<span class="fakelink" sMethod="RemoveRoleHolderByRef" sRef="<%$oThis.Ref%>"
										sArg1="<%$sRole%>" sArg2="<%$oHolder.Ref%>" sArg3="false" publisher="<%$sPublisher%>"
										onclick="top.RunUpdateMethod( this, this.getAttribute('sArg1'), this.getAttribute('sArg2'), this.getAttribute('sArg3') );"  >
									Remove
								</span>
								</td>
								#endinline;
							};

							#inline
							</tr>
							#endinline;
							$sLastRole = $sRole;
						};
					};

					#inline
					<tr>
						<td><%$sRole!=$sLastRole?$sNiceRole:""%></td>
						<td colspan=<%$bHasEditPriv?2:1%>><%$oThis.GetSnippet( $sSnippet )%></td>
					</tr>
					#endinline;

					## change last role
					$sLastRole = $sRole;
				};

				#inline
				</table>
				#endinline;
			}
			else
			{
				"no roles";
			};

			#inline
			</div>
			#endinline;

			break;

		case "DirectoryListing_LastModified":
			$sRef = Ref;
		    #inline
		    <div sShowingWhat='DirectoryListing_LastModified' sRef='<%$sRef%>' id='<%$sRef%>' subscription='<%$sRef%>~onRefresh~^<%$sRef%>~onStatusUpdate~'>
					 <%sGetText( "sModifiedDateAndTime",false,"")%>
					 <br>
					 Version: <%sGetText( "sActiveVersion",false,"")%>
					 <br>
					 <% GetSnippet( "CheckoutStatus" )%>
		    </div>
		    #endinline;
			break;

		case "DirectoryListing_Workflow":
			$sRef = Ref;
			#inline
			<div sShowingWhat='DirectoryListing_Workflow' sRef='<%$sRef%>' id='<%$sRef%>' subscription='<%$sRef%>~onStatusUpdate~'>
					<%GetSnippet( "sWorkflowState")%>
					<br>
					<%sGetText( "sComments",true,"sEmptyPrompt='Enter comments...'")%>
			</div>
			#endinline;
			break;
		case "CheckoutStatus":
			$oPersonCheckedOutTo = oGetLockOwner();
			if( $oPersonCheckedOutTo != NULLOBJECT )
			{
				#inline
				<div> In Process - Locked by <%$oPersonCheckedOutTo.sBodyLink( $oPersonCheckedOutTo.sGetName() ); %></div>
				#endinline;
			}
			else
				sGetData( "sState" );
			break;

		case "sStateColumn":
			$sRef = Ref;
			#inline
			<div sShowingWhat='sStateIcon' sRef='<%$sRef%>' id='<%$sRef%>' subscription='<%$sRef%>~onRefresh~'>
				<%GetSnippet_Builtin( "sStateIcon" );%>
			</div>
			#endinline;
			break;

		case "sStateIcon":

			$sState = sGetData( "sState" );
			$bInprocess = find( $sState, "In Process" ) > -1 ;

##			$bSubmit = find( $sState, "Submit" ) > -1 ;

			$oPersonCheckedOutTo = oGetLockOwner();
			$sThemeFolder = ::sGetThemeFolder();

			Choose
			{
				When $oPersonCheckedOutTo == $me.oGetPerson():

					#inline
					<img style="zoom:95%;" src="images/<% $sThemeFolder %>/locktome.png" title="In Process - Locked by me" />
					#endinline;

				When $oPersonCheckedOutTo != NullObject :

					#inline
					<img style="zoom:95%;" src="images/<% $sThemeFolder %>/lockToOther.png" title="In Process - Locked by <%$oPersonCheckedOutTo.sGetName(); %>" />
					#endinline;

				When $bInprocess:

					#inline
						<img style="zoom:90%;" src="images/<% $sThemeFolder %>/none.gif" title="In Process - Available for edit" />
<!--
						<img style="zoom:90%;margin-right:-5px;" src="images/<% $sThemeFolder %>/bullet.gif" title="In Process - Available for edit" />
						<img style="zoom:90%;" src="images/<% $sThemeFolder %>/unlock.png" title="In Process - Available for edit" />
-->
					#endinline;


				When find( $sState, "Checkpointed" ) > -1:

					#inline
					<img style="zoom:100%;" src="images/<% $sThemeFolder %>/VC_Check_In.png" title="Checkpointed" />
					#endinline;

				When find( $sState, "Approved" ) > -1:

					#inline
					<img style="zoom:94%;" src="images/<% $sThemeFolder %>/VC_Approve.png" title="Approved" />
					#endinline;

			};

			break;

		case "DetailedDescriptionWithMargin":
			## show the detailed description with a build-in margin (typically used when showing this as a section)
			## Not editable if this is a reference item
			if ( bReference )
				$bEditable = false;
			else
			{
				$bEditable = GetRequest( "bMakeEditable" );
				if( $bEditable == NULL )
					$bEditable = true;
			};

			#inline
			<div style="margin-top:.1in;margin-left:.18in;" >
				<p>
					<%sGetRichEditableText( "sDetailedDescription", $bEditable, " sEmptyPrompt='Description here...' " )%>
				</p>
			</div>
			#endinline;
			break;

		case "DetailedDescription":
		case "RichEditableText_DetailedDescription":

			## this seems to be used for inside tables
			$bEditable = GetRequest( "bMakeEditable" );
			if( $bEditable == NULL )
				$bEditable = true;

			$sTags = GetRequest( "sTags" );

			if( $sTags == NULL )
				$sTags = "";

			$sEmptyPrompt = $sTags ~ "s/.*sEmptyPrompt='(.+)'.*/$1/gi";

			if( ( Trim( $sEmptyPrompt ) == "" ) OR ( $sEmptyPrompt == $sTags ) )
				$sTags += " sEmptyPrompt='Description here...' ";

			sGetRichEditableText( "sDetailedDescription", $bEditable, $sTags );
			break;

		case "EditableRichTextMenu":
			#inline
			<i class='MenuIcon fa fa-list-alt' style="font-size:14px;" sRef='<%Ref%>' sShowingWhat='EditableRichTextMenu'
				oncontextmenu='top.currSection = top.oFindObjectByClassname( this, "Section", true );'
				onclick='top.currSection = top.oFindObjectByClassname( this, "Section", true );'/>
			#endinline;
			break;

		case "sEditableOwnerAutoCompleteCenter":
		case "sEditableOwnerAutoCompleteLeft":

			$bExport = GetRequest( "sExport" ) != NULL? true:false;
			$bEditable = bIsEditable();

			if( $bEditable AND ( NOT $bExport ) )
			{
				## check workflow state to see if this owner can be edited simply
				$bSimpleEdit = bSimpleOwnerEdit();
				if ( $bSimpleEdit )
				{
					$sAlign = "center;";
					if ( $sShowingWhat == "sEditableOwnerAutoCompleteLeft" )
						$sAlign = "left;";
					$sAlign = "text-align:" + $sAlign;
					AutocompleteField( "sOwner", "Owners", GetGenString( "OwnerEmptyPrompt" ), "", $sAlign + ";width:100%" );
				}
				else
					sGetText( "sOwner", false, "" );
			}
			else
				sGetText( "sOwner", false, "" );

			break;

		case "sCustomValuePrompt":

			DropList( $sSupData, $sOriginalRequest, "Select..." );
			break;

		case "sNumberFormatType":
			DropList( "sNumberFormatType", "sNumberFormatType", "Select" );
			break;

		case "sUseDefaultNumberFormat":
			## get current setting for default value
			$bValue = true;
			$sValue = sGetData( "sUseDefaultNumberFormat" );
			if ( upper( $sValue ) == "FALSE" )
				$bValue = false;

			## display a checkbox
			#inline
			<input type='checkbox' sRef = <%Ref%> id='sUseDefaultNumberFormat' tabindex=100 <%$bValue? "checked":""%> >
			#endinline;

			break;
		case "sClippedDescription":
			$sRef = Ref;
			#inline
			<div id='<%$sRef%>' subscription='<%$sRef%>~onNameChange~' sShowingWhat='ClippedDescription_Inner<%EOI + $sSupData%>' sRef='<%$sRef%>'>
				<%GetSnippet( "ClippedDescription_Inner" + EOI + $sSupData );%>
			</div>
			#endinline;
			break;
		case "ClippedDescription_Inner":
			$bMakeEditable = GetRequest( "bMakeEditable" );
			if( $bMakeEditable == NULL )
				$bMakeEditable = true;
			$sTags = GetRequest( "sTags" );
			if( $sTags == NULL )
				$sTags = "";

			if( $sSupData != "" )
			{
				$sDescription = sGetData( $sSupData );
				if( find( $sDescription, EOI ) != -1 )
					$sDescription = Item( $sDescription, 2, 2, EOI );
			}
			else
			{
				$sDescription = sGetDescription();
				$sId = sGetRefID();
				$sDescription = $sId == "" ? $sDescription : $sId + ": " + $sDescription;
			};

			$sRef = Ref;

			$sTags += " publisher='" + $sRef + "~onNameChange~'";

			## MLH, the icons are present and they already have this.
			##$sTags += " sHelpId='HelpTip' ";

			#inline
			<div title='<%$sDescription%>'>
				<%sGetText( "sClippedDescription" + EOI + $sSupData, $bMakeEditable, $sTags );%>
			</div>
			#endinline;
			break;
		case "ClippedColumnText":
			$sRef = Ref;
			#inline
			<div id='<%$sRef%>' subscription='<%$sRef%>~onNameChange~' sShowingWhat='ClippedColumnText_Inner<%EOI + $sSupData%>' sRef='<%$sRef%>'>
				<%GetSnippet( "ClippedColumnText_Inner" + EOI + $sSupData );%>
			</div>
			#endinline;
			break;
		case "ClippedColumnText_Inner":
			if( $sSupData != "" )
			{
				$sDescription = sGetData( $sSupData );
				if( find( $sDescription, EOI ) != -1 )
					$sDescription = Item( $sDescription, 2, 2, EOI );
			}
			else
				$sDescription = sGetDescription();


			$sRef = Ref;
			$nCharCount = StrLen( $sDescription );
			$sDisplay = $sDescription;
			if( ( GetRequest( "sExport" ) == NULL ) AND ( $nCharCount > 25 ) )
			{
				$sDisplay = SubStr( $sDescription, 0, 25 ) + "...";
			};
			#inline
			<div title='<%$sDescription%>'>
				<%$sDisplay%>
			</div>
			#endinline;
			break;

		case "ReqsInReqSummaryReport":

			$msmStatusMaps = GetDaoContext( "msmRequirementStatusReportMaps" );
			if( $msmStatusMaps != NULL )
			{
				$key = GetRequest( "key" );
				$sLabel = GetRequest( "sLabel" );
				$msoReqs = Pick($msmStatusMaps, $key);
				$loReqs = pickrange( $msoReqs, $sLabel );

				$sExport = "";
				if ( GetRequest( "sExport" ) != null )
					$sExport = GetRequest( "sExport" );
				$bExporting = ( $sExport != "" ? true : false );
				$bWindows = $dao.Context.Get( "bWindows" );

				#inline
				<html>
				<head>
					<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
					<meta http-equiv="Content-Encoding" value="utf-8"/>
					<% GetHeadCSSContent( "Documentation" ); %>
				</head>
				<body onClick = 'top.ClosePopout(this,true); top.closeCallout()' scroll=auto >

				<div style = "font-family:verdana;text-align:left;color:#666666;">
				#endinline;
				if ( not $bExporting )
				{
					#inline
					<div style = "font-family:verdana;text-align:center;color:#666666;">
					<img onclick="top.CloseSearch();" src="images/<% ::sGetThemeFolder() %>/CloseRed.png" title = "Close" style = "float:right; cursor:pointer;"/>
						<span style="font-weight:bold;">Found <%count( $loReqs )%> '<%$sLabel%>' items.</span>
						<br><br>
					#endinline;

					if ( $bWindows ) {
						#inline
						<span  class='noprint ActionLink' style = "cursor:pointer;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
							onClick = "top.ExportToExcel(window.location, this.ownerDocument.body, '' );">Excel</span>
						#endinline;
					};

					#inline
						<span  class='noprint ActionLink' style = "cursor:pointer;margin-left:10px;margin-right:30px;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
							onClick = "top.ExportReportToWord(window.location, event, this.ownerDocument.body, '' );">Word</span>

					</div>
					<br>
					#endinline;
				};

				#inline

				<table style="">

				#endinline;

				$msoMap = CMap( $loReqs/sGetDescription(), $loReqs );
				$msoMap/
				{
					if ( $bExporting )
					{
						#inline
						<tr>
							<td><%CStr($iternum+1)%>.</td>
							<td>
								<%
									$sDesc = sGetData( "sQualifiedDescription" );
									find( $sDesc, eoi ) > -1 ? Item( $sDesc, 2, 2, eoi ) : $sDesc;
								%>
							</td>
						</tr>
						#endinline;
					}
					else
					{
						#inline
						<tr>
							<td><%CStr($iternum+1)%>.</td>
							<td>
								<a class="NavigationLink" target=body href="GetBodyPage.ase?oThis=<%Ref%>"
									onclick="top.link( href, 'body' );return false;"
								><%
									$sDesc = sGetData( "sQualifiedDescription" );
									find( $sDesc, eoi ) > -1 ? Item( $sDesc, 2, 2, eoi ) : $sDesc;
								%></a>
							</td>
						</tr>
						#endinline;
					};
				};

				"</table>";

			}
			else
			{
				#inline
						None.
				#endinline;
			};
			break;

		case "DashboardNW":

			SetRequest( "DashColor", "#D3D3D3" );
			$sShowingWhatTitle = $sShowingWhat + WosAseStaticHelper::sCreateGUID_s();
			#inline
			<div class="l" id="<%$sShowingWhatTitle%>" >
				<span class="ll" onclick="top.link( this.getAttribute('sUrl'), 'body', '', event );" sUrl="GetBodyPage.ase?oThis=<%Ref%>&sShowingWhat=ActionItems" >
					Action Items</span> /
				<span class="ll" onclick="top.link( this.getAttribute('sUrl'), 'body', '', event );" sUrl="GetBodyPage.ase?oThis=<%Ref%>&sShowingWhat=History" >
					Notifications</span>
			</div>
			<div class=content >
				<%
					$mssArgs = CMap( "sHideRapidAdder", "true" );

				## Action Items
				ListWidget( "ActionItems", "Children", "AI",  	"sEmptyPrompt='New action item...' style='padding-left:20px;' sImgStyle='margin-left:20px;'",
							"", "", false, "sItemLinkQualified", "", true, $mssArgs );

				%>
			</div>
			<script>top.SetDashStyle( this.document.body, "<%$sShowingWhatTitle%>", "<%GetRequest( "DashColor" );SetRequest( "DashColor", "#D3D3D3" );%>" );</script>
			#endinline;

			break;

		case "DashboardSW":

			SetRequest( "DashColor", "#D3D3D3" );
			$sShowingWhatTitle = $sShowingWhat + WosAseStaticHelper::sCreateGUID_s();
			#inline
			<div class="l" id="<%$sShowingWhatTitle%>" >
				<span class="ll" onclick="top.link( this.getAttribute('sUrl'), 'body', '', event );" sUrl="GetBodyPage.ase?oThis=<%Ref%>&sShowingWhat=Attachments" >
					Attachments</span> /
				<span class="ll" onclick="top.link( this.getAttribute('sUrl'), 'body', '', event );" sUrl="GetBodyPage.ase?oThis=<%Ref%>&sShowingWhat=Notes" >
					Discussion</span>
			</div>
			<div class=content >
				#endinline;

				ListWidgetSimple( "Attachments", "Children", "sItemLinkQualified", "", true  );

				$sSectionNames = sGetData("sNotebookSections");
				$lsSections = split($sSectionNames,EOI);
				$sCurrSection = First($lsSections);
				if ( $sCurrSection == null ) $sCurrSection = "";

				ListWidgetSimple( "Notes", $sCurrSection, "DashboardNotice", "", true  );
				#inline
			</div>
			<script>top.SetDashStyle( this.document.body, "<%$sShowingWhatTitle%>", "<%GetRequest( "DashColor" );SetRequest( "DashColor", "#D3D3D3" );%>" );</script>
			#endinline;

			break;

		case "DashboardSE":

			SetRequest( "DashColor", "#D3D3D3" );
			$sShowingWhatTitle = $sShowingWhat + WosAseStaticHelper::sCreateGUID_s();

			#inline
			<div class="l" id="<%$sShowingWhatTitle%>" onclick="//window.location = this.getAttribute('sUrl');" sUrl="GetPage.ase?oThis=<%Ref%>&sShowingWhat=<%$sShowingWhat%>Page" >
				Document/Group Allocations</div>
			<div class=content >
			#endinline;
			if($this.classname != "SSC_Category")
			{
				#inline
				<%ListWidgetSimple( "Sections", "Parents", "sItemLinkQualified", "", true  )%>
				#endinline;
			};
			#inline
				<%ListWidgetSimple( "Folders", "Parents", "sItemLinkQualified", "", true  )%>
				<%ListWidgetSimple( "Groups", "Parents", "sItemLinkQualified", "", true  )%>
			</div>
			<script>top.SetDashStyle( this.document.body, "<%$sShowingWhatTitle%>", "<%GetRequest( "DashColor" );SetRequest( "DashColor", "#D3D3D3" );%>" );</script>
			#endinline;

			break;

		case "DashboardC":

			SetRequest( "DashColor", "#D3D3D3" );
			$sShowingWhatTitle = $sShowingWhat + WosAseStaticHelper::sCreateGUID_s();

			#inline
			<div style="padding-top:10px;" >
				<%GetSnippet( "TitleIcon Home Link" )%>
			</div>
			<div class=centercontent >
				<b><%sGetText( "sDescriptionWithID" )%></b>
				<div style="padding:2px;">
					<%GetSnippet( "sStabilityIcons" )%><br>
					<span class="ll" onclick="window.location = this.getAttribute('sUrl');" sUrl="GetPage.ase?oThis=<%Ref%>&sShowingWhat=History" >History</span><br>
					State: <%GetSnippet( "CheckoutStatus" ) %><br>
					Owner: <%GetSnippet( "sOwner" ) %><br>
					Modified: <%sGetData( "sModifiedDateAndTime" ) %><br>
					Workflow: <%GetSnippet( "sWorkflowState" ) %><br>
					<span class="ll" onclick="window.location = this.getAttribute('sUrl');" sUrl="GetPage.ase?oThis=<%Ref%>&sShowingWhat=Traceability" >Traceability</span>
				</div>
			</div>
			<script>//top.SetDashStyle( this.document.body, "<%$sShowingWhatTitle%>", "<%GetRequest( "DashColor" );SetRequest( "DashColor", "#D3D3D3" );%>" );</script>
			#endinline;

			break;

		case "Dashboard":
			GetDashboard();
			break;


		case "sProxyLinkQualified":
			## This case just need to test if we can see the reference attribute and display the item if we have it
			if ( bReference )
			{
				GetSnippet("sItemLinkQualified");
			} else
			{
				"Not active in current project version";
			};
			break;
		case "sProjectLink":
			$oProject = oGetProject();
			if ( COG_Base::bIsAvailable($oProject) )
				$oProject.GetSnippet("sItemLink");
			else
				"Project not available";
			break;
		case "sLinkType":
			if (bReference)
			    "Dynamic";
			else
			    "Static";
		    break;
		case "sProjectVersion":
			$oProject = oGetProject();
			if ( COG_Base::bIsAvailable($oProject) )
				$oProject.sVersionID;
			else
				"Latest";
			break;
		case "sComments":

			$sTags = GetRequest( "sTags" );

			if( $sTags == NULL )
				$sTags = " sEmptyPrompt='Enter comment...'";
			else if( find( $sTags, "sEmptyPrompt" ) == -1 )
				$sTags += " sEmptyPrompt='Enter comment...'";
			## check for empty empty prompts and patch them up
			else
			{
				$sEmptyPrompt = $sTags ~ "s/.*sEmptyPrompt='(.+)'.*/$1/gi";
				$sTestPrompt = Replace( $sEmptyPrompt, " ", "" );

				if( $sTestPrompt == "" )
				{
					$re = "s/sEmptyPrompt='(.+)'/sEmptyPrompt='Comments here...'/gi";
					$sTags = $sTags ~ $re;
				};
			};
			SetRequest( "sTags", $sTags );
			super::GetSnippet_Builtin( $sOriginalRequest );
			break;

		case "Workflow State":
			GetSnippet( "sWorkflowState" );

			break;

		case "Workflow Owner":

			$oThis = *;

			$bEditable = GetRequest( "bMakeEditable" );
			if ( $bEditable == null ) $bEditable = false;

			## get owners for workflow
			$loOwners = SSC_Role::loGetByRole_s( $oThis, "OWNER" );

			$loOwners/
			{
				$oOwner = *;

				#inline
				<div>
				<%GetSnippet( "PrettySummary" )%>
				</div>
				#endinline;

			};


			break;

		case "Workflow Notes":

			## Marketing Purpose. No harm.
			$loNotes = GetReverse( loGetObjects( "Notes","Workflow Log" ) );

			$nCount = count( $loNotes );

			if ( $nCount > 0 )
			{
			#inline
			<div onclick="top.ToggleRight( event );" class="fakelink" style="margin-left:0in;margin-bottom:.03in;" >Expand Workflow Log - <%$nCount%> entry(ies)</div>
			<div  style="display:none;margin-left:.05in" >
			#endinline;

			if ( IsEmpty( $loNotes ) )
			"None.";

			$loNotes/
			{
			$dtCreated = CDate( sGetData( "dtCreated" ) );
			$sOwnerName = sGetData( "sAuthor" );

			$sDateDiff = Item( ::sGetPrettyTimeDistance( CStr( $dtCreated ) ), 2, 2, eoi );

			#inline
			<li>
				<%$sDateDiff%>, <%$sOwnerName%> <%sGetRichEditableText( "sText", true, " sEmptyPrompt='Note here...' " )%>
			</li>
			#endinline;
			};

			#inline
			</div>
			#endinline;
			};
			break;

		case "Workflow":

			## Marketing Purpose. No harm.
			$oThis = *;
			$sRef = Ref;

			$sEndDiv="";

			$sDisplayWorkflow = "block";

			if ( GetRequest( "sShowingWhat" )  ~ "m/Workflow/" == false )
			{
				#inline
				<div style='display:inline;' subscription='<%$sRef%>~onRefresh~^<%$sRef%>~onStateChange~' sRef='<%$sRef%>' id='<%$sRef%>'
				sShowingWhat='Workflow' >
				#endinline;
				$sEndDiv = "</div>";
			};

			## check if this is assigned to me
			$oMe = $me.oPerson;
			$bMine = bIsAssignedTo( $oMe, true );

			SetRequest( "bMakeEditable", $bMine );

			#inline
			<table style='padding-left:0px;margin-left:-2px;' >
			<tr>
				<td style='padding-left:0px;margin-left:0px;' nowrap style="vertical-align:middle;" >State:</td><td><%GetSnippet("Workflow State")%></td>
			</tr>
			<tr>
				<td style='padding-left:0px;margin-left:0px;' nowrap style="vertical-align:middle;" ><%GetGenString("LabelAssignedTo")%>:</td><td><%GetSnippet("Workflow Owner")%></td>
			</tr>
			</table>
			#endinline;

			$sEndDiv;

			break;

		case "WorkflowForCommandMenu":

			## Marketing Purpose. No harm.
			$oThis = *;
			$sRef = Ref;

			$sEndDiv="";

			if ( GetRequest( "sShowingWhat" )  ~ "m/Workflow/" == false )
			{
				#inline
				<div style='display:inline;' subscription='<%$sRef%>~onRefresh~^<%$sRef%>~onStateChange~' sRef='<%$sRef%>' id='<%$sRef%>'
				sShowingWhat='Workflow' >
				#endinline;
				$sEndDiv = "</div>";
			};

			## check if this is assigned to me
			$oMe = $me.oPerson;
			$bMine = bIsAssignedTo( $oMe, true );

			SetRequest( "bMakeEditable", $bMine );

			#inline
			<table cellspacing=0 cellpadding=0 style='' >
			<tr>
				<td><%GetGenString("LabelState")%>:<%GetSnippet("sWorkflowState")%></td>
			</tr>
			<tr>
				<td><%GetSnippet("Workflow Owner")%></td>
			</tr>
			</table>
			#endinline;

			$sEndDiv;

			break;

		case "ModTipsBase":

			## break if exporting of any way
			if ( GetRequest( "sExport" ) != NULL )
				break;

			## get the changes
			$nDaysToShow = 5;
			$dtStartDate = DateAdd( "d", -$nDaysToShow, Now() );
			$dtEndDate = null;
			$oAuditLog = oAuditLog;
			$loChanges = CList();
			if ( $oAuditLog != NULLOBJECT )
				$loChanges = $oAuditLog.loGetEntries( -1, $dtStartDate, $dtEndDate );

			## reduce the list
			##$loChanges = $loChanges[ datediff( "d", dtCreated, now() ) < $nDaysToShow ];

			if ( IsEmpty( $loChanges ) == false )
			{
				$nCnt = Count( $loChanges );
				$oMostRecent = pick( $loChanges, $nCnt-1 );

				##<div style='background-color:#FFFF99;' >
				#inline
				<div>
					<font style='color:red;' class="HelpTip" sHelpId='sModTips' sRef='<%Ref%>' >
						<%$oMostRecent.sGetData( "sCreatedAgo" )%>, <%$oMostRecent.sGetData( "sModifier" );%> made a change.
						(<%$nCnt%> total within the last <%$nDaysToShow%> days)
					</font>
				</div>
				#endinline;
			};

			break;

		case "StateTipsBase":

			## break if exporting of any way
			if ( GetRequest( "sExport" ) != NULL )
				break;

			$oThis = *;
			$sRef = Ref;

			$sEndDiv="";

			if ( GetRequest( "sShowingWhat" )  ~ "m/Workflow/" == false )
			{
				#inline
				<div style='display:inline;' subscription='<%$sRef%>~onRefresh~onStateChange' sRef='<%$sRef%>' id='<%$sRef%>'
				sShowingWhat='StateTipsBase' >
				#endinline;
				$sEndDiv = "</div>";
			};

			#inline
			<div style='text-align:left;margin-top:5px;width:3.0in;margin-bottom:5px;background-color:#F5F4EA;border:1px solid #AAAAAA;padding:2px' >
				<div><%GetGenString("LabelState")%>:<%GetSnippet("sWorkflowState")%></div>
				<div><%GetGenString("LabelAssignedTo")%>:<br><%GetSnippet("Workflow Owner")%></div>

				#endinline;

				## get the changes
				$loChanges = loGetObjects( "WORKFLOWLOG", "MINE" );
				if ( Not IsEmpty( $loChanges ) )
				{
					$nCnt = Count( $loChanges );
					$oMostRecent = pick( $loChanges, 0 );

					#inline
					<div style='color:red;' class="HelpTip" sHelpId='sStateTips' sRef='<%Ref%>' >
					As of: <%$oMostRecent.sGetData( "sCreatedAgo" )%>...
					</div>
					#endinline;
				};

				#inline
			</div>
			#endinline;


			$sEndDiv;

			break;

		case "Modifications":
		case "sModTips":


			## look at some of the other options (CR or Doc Version)
			$bModTips = ::bModTipsOn();
			$bActiveCR = $bModTips And ::bModTipsInActiveCR();
			$bSinceCheckpoint = $bModTips And ::bModTipsSinceCheckpoint();

			$sModTipsMode = GetRequest( "sModTipsMode" );
			if ( $sModTipsMode )
				SetDaoContext( "sModTipsMode", $sModTipsMode );
			else {
				$sModTipsMode = GetDaoContext( "sModTipsMode" );
				if ( $sModTipsMode == null ) {
					$sModTipsMode = "AuditEntries";
					SetDaoContext( "sModTipsMode", $sModTipsMode );
				};
			};

			if ( $bSinceCheckpoint ) {
				$bByVersion = false;
				$bByWorkflow = false;
				$bByPeriods = false;
			} else {
				## default modes available
				$bByWorkflow = true;
				$bByPeriods = true;
				$bByVersion = true;
			};

			$sModTipsBy = GetRequest( "sModTipsBy" );
			if ( $sModTipsBy ) {
				## remap any modes that don't make sense for this use case
				if ( Not $bByWorkflow And $sModTipsBy == "ByWorkflow" ) $sModTipsBy = "ByDateRange";
				if ( Not $bByVersion And $sModTipsBy == "ByVersion" ) $sModTipsBy = "ByDateRange";
				if ( Not $bByPeriods And $sModTipsBy == "ByPeriods" ) $sModTipsBy = "ByDateRange";

				SetDaoContext( "sModTipsBy", $sModTipsBy );
			}
			else {
				$sModTipsBy = GetDaoContext( "sModTipsBy" );
				if ( $sModTipsBy == null )
				{
					$sModTipsBy = "ByDateRange";
					SetDaoContext( "sModTipsBy", $sModTipsBy );
				};
			};

			$sModTipsSnippet = $sModTipsMode + $sModTipsBy;
			$sUrlAdders = "";
			if ( GetRequest( "sModTipsDateRangeStart" ) )
				$sUrlAdders += "&sModTipsDateRangeStart=" + URLEncode(GetRequest( "sModTipsDateRangeStart" ));
			if ( GetRequest( "sModTipsDateRangeEnd" ) )
				$sUrlAdders += "&sModTipsDateRangeEnd=" + URLEncode(GetRequest( "sModTipsDateRangeEnd" ));

			$sURL = "GetSnippet.ase?sShowingWhat=sModTips&oThis=" + Ref;
			$sModeClick = "var tip = $(this).parents('.ModTips'); tip.attr( 'sMode', $(this).attr( 'sValue' ) ); tip.html( top.sGetUrl( '" + $sURL + "' + '&sModTipsMode=' + tip.attr( 'sMode' ) + '&sModTipsBy=' +tip.attr( 'sBy' ) ) );";
			$sByClick =   "var tip = $(this).parents('.ModTips'); tip.attr( 'sBy',   $(this).attr( 'sValue' ) ); tip.html( top.sGetUrl( '" + $sURL + "' + '&sModTipsMode=' + tip.attr( 'sMode' ) + '&sModTipsBy=' +tip.attr( 'sBy' ) ) );";
			$sNameID = 'sGetName/ID'();
			#inline
			<div class="ModTips" sMode="<%$sModTipsMode%>" sBy="<%$sModTipsBy%>" id="ModTips_<%$sNameID%>">
				<div class="ModTipsHeader" style="float:right;margin-bottom:5px;margin-right:2px;margin-top:2px;">
					<span class="<% $sModTipsMode=="AuditEntries"?"":"fakelink";%>" sValue="AuditEntries" onclick="<%$sModeClick%>" >Show Audit Entries</span>&nbsp;
					<span class="<% $sModTipsMode=="NetDiffs"?"":"fakelink";%>"     sValue="NetDiffs" onclick="<%$sModeClick%>" >Show Differences</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
					#endinline;

					if ( $bByVersion ) {
					#inline
					<span class="<% $sModTipsBy=="ByVersion"?"":"fakelink";%>"   sValue="ByVersion"   onclick="<%$sByClick%>" >By Version</span>&nbsp;
					#endinline;
					};

					if ( $bByWorkflow ) {
					#inline
					<span class="<% $sModTipsBy=="ByWorkflow"?"":"fakelink";%>"  sValue="ByWorkflow"  onclick="<%$sByClick%>" >By Workflow</span>&nbsp;
					#endinline;
					};

					if ( $bByPeriods ) {
					#inline
					<span class="<% $sModTipsBy=="ByPeriods"?"":"fakelink";%>"   sValue="ByPeriods"   onclick="<%$sByClick%>" >By Periods</span>&nbsp;
					#endinline;
					};

					#inline
					<span class="<% $sModTipsBy=="ByDateRange"?"":"fakelink";%>" sValue="ByDateRange" onclick="<%$sByClick%>" >By Date Range</span>&nbsp;
				</div>
				<br>
				<div class="ModTipsBody" id="ModTipsBody_<%$sNameID%>">
					<script>
						$("#ModTipsBody_<%$sNameID%>").load( "GetSnippet.ase?sShowingWhat=<%$sModTipsSnippet%>&oThis=<%Ref%><%$sUrlAdders%>" );
					</script>
					<span class="LoadingAsync">
						Loading
						<%::LoadingEllipsis( "font-size: 12px;" )%>
					</span>
				</div>
			</div>
			#endinline;

			##<%GetSnippet( $sModTipsSnippet );%>
			break;

		case "NetDiffsByVersion":
		case "NetDiffsByWorkflow":
		case "NetDiffsByPeriods":
		case "NetDiffsByDateRange":
			##SetRequest( "sExport", "Diff" );

			$oParentObj = *;

			## check if this is for MODTIPS
			$bModTips = ::bModTipsOn();

			$lsPeriods = lsGetSpecialDates( $sShowingWhat );

			## get the initial value data
			$mssInitial = mssInitialAuditValues();

			$lsPeriods/
			{
				$sPeriod = *;
				$sTitle = Item( $sPeriod, 1, 1, eoi );
				$sStart = Item( $sPeriod, 2, 2, eoi );
				$sEnd = Item( $sPeriod, 3, 3, eoi );

				## The calendar widgit always uses mm/dd/yyyy format regardless of locale
				## CDate calculates datetime with respect for locale. Therefore the universal
				## yyy-mm-dd format should be used when passing to CDate from the calendar widgit.
				## ReqEx finds ##/##/#### and replaces it with ####-##-##
				$sStartSafe = $sStart~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
				$sEndSafe = $sEnd~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
				$dtStart = CDate( $sStartSafe );
				$dtEnd = CDate( $sEndSafe );

				$loNewChanges = $this.loGetAllAuditEntries( null, $dtStart, $dtEnd, $bModTips )[ iType == 0 ];
				$loOldChanges = $this.loGetAllAuditEntries( null, null, $dtStart, $bModTips )[ iType == 0 ];

				$loNewChangesR = GetReverse( $loNewChanges );
				$loOldChangesR = GetReverse( $loOldChanges );

				$msoNew = CMap( $loNewChangesR/sGetData( "sProperty" ), $loNewChangesR, true );
				$msoOld = CMap( $loOldChangesR/sGetData( "sProperty" ), $loOldChangesR, true );

				Object $oDiffer;
				## $oDiffer = ::oGetDiffEngine();

				$loBinFileDiffs = CList();

				$msoNew/
				{
					$oNewObj = *;
					$sProperty = $oNewObj.sProperty;
					$sNewVal = $oNewObj.sValue;
					$oOwningObj = oGetOwningObj();
					$oOldObj = isempty( $msoOld ) ? null : pick( $msoOld, sGetData( "sProperty" ) );

					if( $sProperty == "binFile" )
					{
						$loBinFileDiffs << *;
					}
					else
					{
						if ( ItemCount( $sNewVal, eoi ) > 1 )
						{
							if ( $sProperty == "sDescription" )
								$sNewVal = Item( $sNewVal, 1, 1, eoi )
							else
								$sNewVal = Item( $sNewVal, 2, 2, eoi );
						};

						if ( Left( $sNewVal, 2 ) == "ks" )
							$sNewVal = GetGenString( $sNewVal );

						SetRequest( "dtDiffTime", dtCreated );

						$sNewVal = $this.sDecodeManagedDocUrl( $sNewVal );

						if ( $oOldObj != null )
						{
							$sOldVal = $oOldObj.sValue;
							if ( ItemCount( $sOldVal, eoi ) > 1 )
							{
								if ( $sProperty == "sDescription" )
									$sOldVal = Item( $sOldVal, 1, 1, eoi );
								else
									$sOldVal = Item( $sOldVal, 2, 2, eoi );
							};

							if ( Left( $sOldVal, 2 ) == "ks" )
								$sOldVal = GetGenString( $sOldVal );

							SetRequest( "dtDiffTime", $oOldObj.dtCreated );

							$sOldVal = $this.sDecodeManagedDocUrl( $sOldVal );


						}
						else
						{
							## look for an initial value
							$sOldVal = pick( $mssInitial, $sProperty );
							if ( $sOldVal == null ) $sOldVal = "";
						};

						## If sDescription we need to htmlencode the value
						if ($sProperty == "sDescription")
						{
							$sOldVal = htmlencode($sOldVal);
							$sNewVal = htmlencode($sNewVal);
						};

						$sDiff = ::sDiff( $sOldVal, $sNewVal );

						$oNewObj.Context.Set( "sDiffValue", $sDiff, Lifespan.Request );

					};
				};

				##handled separately, saving the sDiffValue on the context just like the differences
				##processed above
				$oParentObj.ProcessBinFileDifferences( $loBinFileDiffs, $dtStart, $dtEnd, true );

				$sStartFmt = Format( $dtStart, "m/d/yy hh:mm:ss" );
				$sEndFmt = Format( $dtEnd, "m/d/yy hh:mm:ss" );

				## output the first line
				$nCount = count( $msoNew );
				$sCount = $nCount == 1 ? "1 property difference" : $nCount + " property differences";
				$sTitle = "<b>"+$sTitle + "</b> has " + $sCount;
				$sColTitle = "Net differences - " + $sStartFmt + " thru " + $sEndFmt;
				$sCalId = "ModTipCal_" + WosAseStaticHelper::sCreateGUID_s();
				$sThemeFolder = ::sGetThemeFolder();
				#inline
				<div class="ModTips">
					#endinline;

					if ( $sShowingWhat == "NetDiffsByDateRange" and ::bModTipsOn() == false )
					{
						#inline
						<table style="width:100%;" cellspacing=0 cellpadding=0 >
							<tr>
								<td colspan=2 style="text-align:right;padding-bottom:5px;padding-top:3px;" >
									<div id="<%$sCalId%>" class="HelpTip" start="<%$sStart%>" end="<%$sEnd%>" sHelpId='jQueryCalendarControl' />
									<script>
										$('#<%$sCalId%>').calendarLite({
											dateFormat: '{%mm}/{%dd}/{%yyyy}',
											onSelect: function( cal, start, end ) {
												cal = $( "#<%$sCalId%>" ) || cal;
												var sUrl = "GetSnippet.ase?sShowingWhat=sModTips&oThis=<%$this.Ref%>&sModTipsMode=NetDiffs&sModTipsBy=ByDateRange";
												sUrl += "&sModTipsDateRangeStart=" + start + "&sModTipsDateRangeEnd=" + end;
												var tip = cal.parents('#ModTips_<%$oParentObj.'sGetName/ID'()%>');
												tip.html( top.sGetUrl( sUrl ) );
												return false;
											}
										});
									</script>
								</td>
							</tr>
						</table>
						#endinline;
					};

					#inline
					<hr style='clear:both;' >
					<table style="width:100%;" cellspacing=0 cellpadding=0 >
						<tr>
							<td style="font-weight:normal;color:red;">&nbsp;<%$sTitle%></td>
							<td>

									<div style="float:right;width:131px;height:22px;cursor:text;position:relative;">
										<img src="images/<% $sThemeFolder %>/img00004.gif" border="0" width="131" height="22">
										<input tabindex=100 oninput="top.filter( $(this).parents( '.ModTips' ).find( '.Searchable' ).get(0), this.value )" type="text" id="filterBox" style="position:absolute;left:25px;top:2px;width:96px;border:0px #000000 solid;font-family:Courier New;font-size:12px;)" size="16" NAME="filterBox">
										<img src="images/<% $sThemeFolder %>/filter_back.GIF" id="filterBack" border="0" style="position:absolute;left:8px;top:2px;">
									</div>
							</td>
						</tr>
					</table>
					<div style="overflow-y:auto;width:100%;max-height:4in;margin-right:.5in;padding-left:0in" >
						<div class="Searchable" >
							<table style="width:93%;" >
								<colgroup>
									<col />
									<col />
									<col style='width:100%;padding-left:.2in;' />
								</colgroup>
								<tr valign='top' align='left' style='text-decoration:underline;color:black' >
									<td colspan=2 style='padding-bottom:.1in;' >Property</td>
									<td colspan=1 style='padding-bottom:.1in;width:100%;' ><%$sColTitle%></td>
								</tr>
							#endinline;

							## write out the items
							$sType = "";
							$sVersion = "First Version";
							$sValue = "";
							$msoNew/
							{
								$sValue = "fetch";
								$sProperty = sGetData( "sProperty" );
								$sType = sGetData( "sType" );
								$sHilite = "";

								if ( $sProperty == "" and $sType == "Creation" )
								{
									$sProperty = "Initial Version";
									$sType = "created";
								}
								else if ( $sProperty == "" and $sType == "Workflow State" )
								{
									$sProperty = "Workflow State";
									$sHilite = "color:green;";
									$sType = "changed to";
								};

								if ( $sType == "Version" )
								{
									$sProperty = "Version " + $sProperty;
									$sType = sValue;
									$sValue = "";
								};

								switch ( $sType  )
								{
									case "Data Change":
										$sType = "changed";

										if( $this.classname != "SSC_ExtDocument" AND sProperty == "binFile" )
										{
											$oAttachAudit = *.Context.Get( "oAttachAudit", Lifespan.Session );
											if( $oAttachAudit )
												$sValue = $oAttachAudit.Context.Get( "sDiffValue", Lifespan.Request );
										}
										else if ( $sProperty != "Primary Group" )
											$sValue = *.Context.Get( "sDiffValue", Lifespan.Request );

										break;
									case "Add Relationship":
										$sType = "added";
										break;
									case "Remove Relationship":
										$sType = "removed";
										break;
									case "Creation":
									case "created":
										$sType = "created";
										$sHilite = "text-decoration:underline;color:red;";
										break;
									case "ksCheckOut":
										$sType = "created";
										$sHilite = "text-decoration:underline;color:red;";
										break;
									case "ksCheckIn":
										$sType = "checkpointed";
										$sHilite = "color:red;";
										break;
									case "ksLock":
										$sType = "locked";
										break;
									case "ksUnlock":
										$sType = "unlocked";
										break;
									case "General":
										$sProperty = sProperty;
										$sType = Item( $sProperty, 2, ItemCount( $sProperty, "," ), "," );
										break;
									case "ksAuditDeletion":
										$sProperty = "Deleted Item";
										$sType = "deletion";
										break;
									case "ksAuditRestore":
										$sProperty = "Restored Item";
										$sType = "restore";
										break;
									case "CR Incorporated":
										$sType = "incorporated";
										$sProperty = "Change Request";
										break;
									case "CR Terminated":
										$sType = "terminated";
										$sProperty = "Change Request";
										break;
									case "CR Addition":
										$sType = "addition";
										$sProperty = "Change Request";
										break;
								};

								#inline
								<tr valign='top' bFilterable="true" >
									<td nowrap ><b><%$iternum+1;%>. </b></td>
									<td nowrap style="<%$sHilite;%>"  ><%$sProperty%></td>
									<!-- td nowrap style="<%$sHilite;%>" ><%$sType%></td -->
									<td style="<%$sHilite;%>" ><%if ( $sValue=="fetch" ) GetSnippet( "NewValue") else $sValue ;%></td>
								</tr>
								#endinline;
							};

							#inline
							</table>
						</div>
					</div>
				</div>
				#endinline;
			};

			break;

		case "AuditEntriesByVersion":
		case "AuditEntriesByWorkflow":
		case "AuditEntriesByPeriods":
		case "AuditEntriesByDateRange":
		case "AuditEntriesForHandyAlert":
		case "AuditEntriesForHandyFollowed":
			##SetRequest( "sExport", "Diff" );

			$oParentObj = *;

			## check if this is for MODTIPS
			$bModTips = ::bModTipsOn();

			## what are we looking for?
			$lsPeriods = lsGetSpecialDates( $sShowingWhat );

			## get the initial value data
			$mssInitial = mssInitialAuditValues();

			$lsPeriods/
			{
				$sPeriod = *;
				$sTitle = Item( $sPeriod, 1, 1, eoi );
				$sStart = Item( $sPeriod, 2, 2, eoi );
				$sEnd = Item( $sPeriod, 3, 3, eoi );

				## The calendar widgit always uses mm/dd/yyyy format regardless of locale
				## CDate calculates datetime with respect for locale. Therefore the universal
				## yyy-mm-dd format should be used when passing to CDate from the calendar widgit.
				## ReqEx finds ##/##/#### and replaces it with ####-##-##
				$sStartSafe = $sStart~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
				$sEndSafe = $sEnd~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
				$dtStart = CDate( $sStartSafe );
				$dtEnd = CDate( $sEndSafe );


				$loChanges = $this.loGetAllAuditEntries( null, $dtStart, $dtEnd, $bModTips );

				## if modtips are on and checkpoint control is on, filter these
				if ( ::bModTipsOn() And ::bModTipsSinceCheckpoint() )
					$loChanges = $loChanges[ iType != 3 ];

				$loOldChanges = $this.loGetAllAuditEntries( null, null, $dtStart, $bModTips )[ iType == 0 ];

				$loOldChangesR = GetReverse( $loOldChanges );
				$msoOld = CMap( $loOldChangesR/sGetData( "sProperty" ), $loOldChangesR, true );

				Object $oDiffer;
				## $oDiffer = ::oGetDiffEngine();

				$loBinFileDiffs = CList();


				$mssLastVals = CMap( String, String, true );
				GetReverse($loChanges)/
				{
					$oDiff = *;
					$sProperty = sGetData( "sProperty" );
					$sRealProp = sProperty;
					$sType = sGetData( "sType" );

					if ( $sType == "Data Change" and $sProperty != "Primary Group" )
					{
						$sDiff = "";
						$oOwningObj = oGetOwningObj();

						if( $sRealProp == "binFile" )
							$loBinFileDiffs << *;
						else
						{
							$sValue = sValue;

							## pull off display value
							$sValue = $oOwningObj.sGetAuditDisplayValue( $sRealProp, $sValue );

							##if ( itemcount( $sValue, eoi ) == 2 )
							##	$sValue = item( $sValue, 2, 2, eoi );

							SetRequest( "dtDiffTime", dtCreated );
							$sValue = $oOwningObj.sDecodeManagedDocUrl( $sValue );
							$sLastVal = pick( $mssLastVals, $sProperty );

							if ( $sLastVal )
							{
								## If sDescription we need to htmlencode the value
								## $sLastVal was already encoded when put in the map
								if ($sRealProp == "sDescription")
									$sValue = htmlencode($sValue);

								$sDiff = ::sDiff( $sLastVal, $sValue );

								*.Context.Set( "sDiffValue", $sDiff, Lifespan.Request );
							}
							else
							{
								$oOldObj = isempty( $msoOld ) ? null : pick( $msoOld, $sProperty );
								if ( $oOldObj != null )
								{
									$sOldVal = $oOldObj.sValue;
									$sOldVal = $this.sGetAuditDisplayValue( $sRealProp, $sOldVal );
									## pull off display value
									##if ( itemcount( $sOldVal, eoi ) == 2 )
									##	$sOldVal = item( $sOldVal, 2, 2, eoi );

									SetRequest( "dtDiffTime", $oOldObj.dtCreated );

									$sOldVal = $this.sDecodeManagedDocUrl( $sOldVal );
								}
								else
								{
									## try to get the information from the "initial value" data
									$sOldVal = pick( $mssInitial, $sRealProp );
									if ( $sOldVal == null )	$sOldVal = "";
								};

								## If sDescription we need to htmlencode the value
								if ($sRealProp == "sDescription")
								{
									$sOldVal = htmlencode($sOldVal);
									$sValue = htmlencode($sValue);
								};

								$sDiff = ::sDiff( $sOldVal, $sValue );

								*.Context.Set( "sDiffValue", $sDiff, Lifespan.Request );
							};
							$mssLastVals << CMap( { $sProperty }, { $sValue } );
						};
					};
				};

				##handled separately, saving the sDiffValue on the context just like the differences
				##processed above
				$oParentObj.ProcessBinFileDifferences( $loBinFileDiffs, $dtStart, $dtEnd, false );

				$sStartFmt = Format( $dtStart, "m/d/yy hh:mm:ss" );
				$sEndFmt = Format( $dtEnd, "m/d/yy hh:mm:ss" );

				## output the first line
				$nCount = count( $loChanges );
				$sCount = $nCount == 1 ? "1 audit log entry" : $nCount + " audit log entries";
				$sTitle = "<b>"+$sTitle + "</b> has " + $sCount + " - " + $sStartFmt + " thru " + $sEndFmt;
				$sCalId = "ModTipCal_" + WosAseStaticHelper::sCreateGUID_s();
				#inline
				<div class="ModTips" >
				#endinline;

					if ( $sShowingWhat == "AuditEntriesByDateRange" and ::bModTipsOn() == false )
					{
						#inline
						<table style="width:100%;" cellspacing=0 cellpadding=0 >
							<tr>
								<td colspan=2 style="text-align:right;padding-bottom:5px;padding-top:3px;" >
									<div id="<%$sCalId%>" class="HelpTip" start="<%$sStart%>" end="<%$sEnd%>" sHelpId='jQueryCalendarControl' />
									<script>
										$('#<%$sCalId%>').calendarLite({
											dateFormat: '{%mm}/{%dd}/{%yyyy}',
											onSelect: function( cal, start, end ) {
												cal = $( "#<%$sCalId%>" ) || cal;
												var sUrl = "GetSnippet.ase?sShowingWhat=sModTips&oThis=<%$this.Ref%>&sModTipsMode=AuditEntries&sModTipsBy=ByDateRange";
												sUrl += "&sModTipsDateRangeStart=" + start + "&sModTipsDateRangeEnd=" + end;
												var tip = cal.parents('#ModTips_<%$oParentObj.'sGetName/ID'()%>');
												tip.html( top.sGetUrl( sUrl ) );
												return false;
											}
										});
									</script>
								</td>
							</tr>
						</table>
						#endinline;
					};

					if ( $sShowingWhat like "Handy" == false )
					{
						#inline
						<hr style='clear:both;' >
						<table style="width:100%;margin-bottom:.05in;" cellspacing=0 cellpadding=0 >
							<tr>
								<td style="font-weight:normal;color:red;">&nbsp;<%$sTitle%></td>
								<td>

										<div style="float:right;width:131px;height:22px;cursor:text;position:relative;">
											<img src="images/<% $sThemeFolder %>/img00004.gif" border="0" width="131" height="22">
											<input tabindex=100 oninput="top.filter( $(this).parents( '.ModTips' ).find( '.Searchable' ).get(0), this.value )" type="text" id="filterBox" style="position:absolute;left:25px;top:2px;width:96px;border:0px #000000 solid;font-family:Courier New;font-size:12px;)" size="16" NAME="filterBox">
											<img src="images/<% $sThemeFolder %>/filter_back.GIF" id="filterBack" border="0" style="position:absolute;left:8px;top:2px;">
										</div>
								</td>
							</tr>
						</table>
						#endinline;
					};

					if ( $nCount > 0 )
					{
						#inline
						<div style="overflow-y:auto;width:100%;max-height:4in;margin-right:.5in;padding-left:0in" >
							<div class="Searchable" >
								<table style="width:93%;" >
									<colgroup>
										<col />
										<col />
										<col style='padding-left:.1in;' />
										<col style='width:100%;padding-left:.1in;' />
										<col />
										<col />
									</colgroup>
									<tr valign='top' align='left' style='text-decoration:underline;' >
										<td colspan=2 style='padding-bottom:.1in;' nowrap >Property</td>
										<td style='padding-bottom:.1in;' >Event</td>
										<td style='padding-bottom:.1in;width:100%;' >New Value</td>
										<td style='padding-bottom:.1in;' >By</td>
										<td style='padding-bottom:.1in;'  >On</td>
									</tr>
								#endinline;

								## write out the items
								$sType = "";
								$sVersion = "First Version";
								$sValue = "";
								$loChanges/
								{
									$sValue = "fetch";
									$sProperty = sGetData( "sProperty" );
									$sType = sGetData( "sType" );
									$sHilite = "";


									if ( $sProperty == "" and $sType == "Creation" )
									{
										$sProperty = "Initial Version";
										$sType = "created";
									}
									else if ( $sProperty == "" and $sType == "Workflow State" )
									{
										$sProperty = "Workflow State";
										$sHilite = "color:green;";
										$sType = "changed";
									};


									if ( $sType == "Version" )
									{
										$sVersionName = $oParentObj.sGetVersionNameFromNumber($sProperty);

										$sProperty = "Version " + $sVersionName;
										$sType = sValue;
										$sValue = "";
									};

									switch ( $sType  )
									{
										case "Data Change":
											$sType = "changed";

											if( $this.classname != "SSC_ExtDocument" AND sProperty == "binFile" )
											{
												$oAttachAudit = *.Context.Get( "oAttachAudit", Lifespan.Session );
												if( $oAttachAudit )
													$sValue = $oAttachAudit.Context.Get( "sDiffValue", Lifespan.Request );
											}
											else if ( $sProperty != "Primary Group" )
												$sValue = *.Context.Get( "sDiffValue", Lifespan.Request );

											break;
										case "Add Relationship":
											$sType = "added";
											## check for EOI
											$sSubProperty = "";
											if (Find($sProperty, eoi) != -1) {
												$iItems = ItemCount($sProperty, eoi);
												$sSubProperty = Item($sProperty, $iItems, $iItems, eoi);
												$sProperty = Item($sProperty, 1, 1, eoi);
											};
											$sProperty = GetGenString( Trim( $sProperty ) );

											## add an subproperty at the end
											if ($sSubProperty != "") {
												$sProperty += " : " + $sSubProperty;
											};
											break;
										case "Remove Relationship":
											$sType = "removed";
											## check for EOI
											$sSubProperty = "";
											if (Find($sProperty, eoi) != -1) {
												$iItems = ItemCount($sProperty, eoi);
												$sSubProperty = Item($sProperty, $iItems, $iItems, eoi);
												$sProperty = Item($sProperty, 1, 1, eoi);
											};
											$sProperty = GetGenString( Trim( $sProperty ) );

											## add an subproperty at the end
											if ($sSubProperty != "") {
												$sProperty += " : " + $sSubProperty;
											};
											break;
										case "Creation":
										case "created":
											$sType = "created";
											$sHilite = "text-decoration:underline;color:red;";
											break;
										case "ksCheckOut":
											$sType = "created";
											$sHilite = "text-decoration:underline;color:red;";
											break;
										case "ksCheckIn":
											$sType = "checkpointed";
											$sHilite = "color:red;";
											break;
										case "ksLock":
											$sType = "locked";
											break;
										case "ksUnlock":
											$sType = "unlocked";
											break;
										case "General":
											$sTemp = sProperty;
											$sType = lower( Item( $sTemp, 2, ItemCount( $sTemp, "," ), "," ) );
											break;
										case "Link":
											$sType = "linked";
											break;
										case "ksAuditDeletion":
											$sType = "deletion";
											$sProperty = "Deleted Item";
											break;
										case "ksAuditRestore":
											$sType = "restore";
											$sProperty = "Restored Item";
											break;
										 case "CR Incorporated":
											$sType = "incorporated";
											$sProperty = "Change Request";
											break;
										 case "CR Terminated":
											$sType = "terminated";
											$sProperty = "Change Request";
											break;
										 case "CR Addition":
											$sType = "addition";
											$sProperty = "Change Request";
											break;
									};

									#inline
									<tr valign='top' bFilterable="true" >
										<td nowrap ><b><%$iternum+1;%>. </b></li></td>
										<td nowrap style="<%$sHilite;%>"  ><%$sProperty%></td>
										<td nowrap style="<%$sHilite;%>" ><%$sType%></td>
										<td style="<%$sHilite;%>" ><%if ( $sValue=="fetch" ) GetSnippet( "NewValue") else $sValue ;%></td>
										<td nowrap style="<%$sHilite;%>" ><%GetSnippet( "sModifier")%></td>
										<td nowrap style="<%$sHilite;%>" ><%Format( dtGetServerDate(), "m/d/yy hh:mm:ss" )%></td>
									</tr>
									#endinline;
								};

								#inline
								</table>
							</div>
						</div>
						#endinline;
					};

				#inline
				</div>
				#endinline;
			};

			break;

		case "ModTipsInlineAudit":
			$bModTips = True;
			$oItem = $this;
			$sSectionFormat = $oItem.sGetData( "sDocFormat" );
			$oParentObj = *;
			##SetRequest( "sExport", "Diff" );

			while ( $sSectionFormat like anycase "inherit" )
			{
				$oObj = $oItem.oGetFolder();
				$oParent = $oObj == NullObject ? $oItem.oGetPrimaryGroup() : $oObj;
				$sSectionFormat = $oParent.sGetData( "sDocFormatToUse" );
			};
			if ( $this.className == "SSC_Category" and $sSupData == "" and ($sSectionFormat like anycase "Adhoc List" or $sSectionFormat like anycase "Adhoc Trace"  or $sSectionFormat like anycase "List Of"
				or $sSectionFormat like anycase "FMEA"  ) and Lower( $me.oPerson.sGetData( "bModTipsAuditsInlineItems" ) ) == "true" )
			{
				## get data source 1
				$oDataSrc1 = $oItem.oGetDataSrc( 1 );
				$oCurr = $oItem;
				while ( $oCurr != $oDataSrc1 )
				{
					$oCurr= $oDataSrc1;
					##trace( "oCurrent is now: " + $oCurr.sGetDescription() );
					$nDataSourceIndexRequested = $oCurr.GetContext( "nDataSourceIndexRequested", true );
					##trace( "The index requested from it is: " + $nDataSourceIndexRequested);
					$oDataSrc1 = $oCurr.oGetDataSrc( $nDataSourceIndexRequested );
					##trace( "It's data source is: " + $oDataSrc1.sGetDescription());
				};

				if ( $sSectionFormat like anycase "list of" )
				{
					$sKind = $oItem.GetContext( "sKind", true );
					$sScope = $oItem.GetContext( "sScope", true );
				}
				else if ( $sSectionFormat like anycase "Adhoc FMEA" )
				{
					$sSectionFormatFMEA = $oItem.sGetDataValue( "sSectionFormatFMEA" );
					$sColDef = First($oItem.lsGetFMEADef( $sSectionFormatFMEA ));
					if ( $sColDef )
					{
						$sKind= "Custom";
						$sScope = First( Split( $sColDef, "|" ) );
						$sScope= Item( $sScope, 1, 1, EOI );
					}
				}
				else if ( $sSectionFormat like anycase "FMEA Table" )
				{
					$sKind= "Custom";
					$sScope = $oItem.sGetDataValue( "FMEA_Col_Group_Custom Request" );
				}
				else {
					$sKind = $oItem.sGetData( "sSectionFormatKind" );
					$sScope = "Children";
					if ( $sKind == "Custom Request" )
					{
						$sKind = "Custom";
						$sScope = $oItem.sGetData( "sSectionFormatCustomRequest" );

					};
				};

				try
				{
					$loObjs = $oDataSrc1.loGetObjects( $sKind, $sScope );
				}
				catch( $sErr ) {
					$loObjs= null;
				};


			};
			## FINDME

			$lsPeriods = lsGetSpecialDates( "ModTipsInlineAudit" );

			## get the initial value data
			$mssInitial = mssInitialAuditValues();

			$lsPeriods/
			{
				$sPeriod = *;
				$sTitle = Item( $sPeriod, 1, 1, eoi );
				$sStart = Item( $sPeriod, 2, 2, eoi );
				$sEnd = Item( $sPeriod, 3, 3, eoi );

				## The calendar widgit always uses mm/dd/yyyy format regardless of locale
				## CDate calculates datetime with respect for locale. Therefore the universal
				## yyy-mm-dd format should be used when passing to CDate from the calendar widgit.
				## ReqEx finds ##/##/#### and replaces it with ####-##-##
				$sStartSafe = $sStart~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
				$sEndSafe = $sEnd~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
				$dtStart = CDate( $sStartSafe );
				$dtEnd = CDate( $sEndSafe );

				$loNewChanges = $this.loGetAllAuditEntries( null, $dtStart, $dtEnd, $bModTips );

				## strip out some stuff
				$loRelations = $loNewChanges[$iType = iType; $iType == 1 Or $iType == 2];
				$loRelations = GetReverse( $loRelations );

				$sStartFmt = Format( $dtStart, "m/d/yy hh:mm:ss" );
				$sEndFmt = Format( $dtEnd, "m/d/yy hh:mm:ss" );
				$sSupData = $sSupData == "" ? "0" : CStr( CInt( $sSupData ) + 50 );

				if ( $sExport == "Word" Or $sExport == "DirectPDF" )
					$sStyle = "margin-top:10px;border: 1px solid gray;";
				else
					$sStyle = "margin-top:10px;background-color:#ffffe1;margin-left:" + $sSupData + "px;";

				if ($sSupData == "0" )
				{
					$loOldChanges = $this.loGetAllAuditEntries( null, null, $dtStart, $bModTips )[ iType == 0 ];
					$loNewChanges = $loNewChanges[iType == 0];

					$loNewChangesR = GetReverse( $loNewChanges );
					$loOldChangesR = GetReverse( $loOldChanges );

					$msoNew = CMap( $loNewChangesR/sGetData( "sProperty" ), $loNewChangesR, true );
					$msoOld = CMap( $loOldChangesR/sGetData( "sProperty" ), $loOldChangesR, true );

					$loBinFileDiffs = CList();

					##Object $oDiffer;
					##$oDiffer = ::oGetDiffEngine();

					$msoNew/
					{
						$oNewObj = *;
						$sTranslated = $iterkey;
						$sProperty = $oNewObj.sProperty;
						$sNewVal = $oNewObj.sValue;

						if( $sProperty == "binFile" )
							$loBinFileDiffs << *;

						else
						{

							if ( ItemCount( $sNewVal, eoi ) > 1 )
							{
								if ( $sProperty == "sDescription" )
									$sNewVal = Item( $sNewVal, 1, 1, eoi )
								else
									$sNewVal = Item( $sNewVal, 2, 2, eoi );
							};

							if ( Left( $sNewVal, 2 ) == "ks" )
								$sNewVal = GetGenString( $sNewVal );

							SetRequest( "dtDiffTime", $oNewObj.dtCreated );
							$sNewVal = $this.sDecodeManagedDocUrl( $sNewVal );
							$oOldObj = isempty( $msoOld ) ? null : pick( $msoOld, $sTranslated );
							if ( $oOldObj != null )
							{
								$sOldVal = $oOldObj.sValue;
								if ( ItemCount( $sOldVal, eoi ) > 1 )
								{
									if ( $sProperty == "sDescription" )
										$sOldVal = Item( $sOldVal, 1, 1, eoi );
									else
										$sOldVal = Item( $sOldVal, 2, 2, eoi );
								};

								if ( Left( $sOldVal, 2 ) == "ks" )
									$sOldVal = GetGenString( $sOldVal );

								SetRequest( "dtDiffTime", $oOldObj.dtCreated );

								$sOldVal = $this.sDecodeManagedDocUrl( $sOldVal );
							}
							else
							{
								## look for an initial value
								$sOldVal = pick( $mssInitial, $sProperty );
								if ( $sOldVal == null ) $sOldVal = "";
							};

							## If sDescription we need to htmlencode the value
							if ($sProperty == "sDescription")
							{
								$sOldVal = htmlencode($sOldVal);
								$sNewVal = htmlencode($sNewVal);
							};

							$sDiff = ::sDiff( $sOldVal, $sNewVal );

							$oNewObj.Context.Set( "sDiffValue", $sDiff, Lifespan.Request );
						};


					};
					##handled separately, saving the sDiffValue on the context just like the differences
					##processed above
					$oParentObj.ProcessBinFileDifferences( $loBinFileDiffs, $dtStart, $dtEnd, true );
				}
				else if ( Count($loRelations) != 0 )
				{
					$msoNew= null;
					$sTitle = $sSupData== "50" ? "Data Source 1: " : "";
					$sTitle +=  $oItem.sGetDescription();
					#inline
						<div style="margin:10px 0 0 <%$sSupData%>px;"><h1><%$oItem.GetSnippet( "sIcon" );%><%$sTitle%><h1></div>
					#endinline;
				};


				## output the first line
				#inline
				<div Style="<%$sStyle%>" >
					<table cellpadding=2>
						<colgroup>
							<col />
							<col style='width:100%;padding-left:.2in;' />
						</colgroup>
					#endinline;

					## write out the items
					$msoNew/
					{
						$sValue = "fetch";
						$sProperty = $iterkey;
						$iType = iType;
						$sHilite = "";

						switch ( $iType  )
						{
							case 0:
								$sType = "changed";
								if( $this.classname != "SSC_ExtDocument" AND sProperty == "binFile" )
								{
									$oAttachAudit = *.Context.Get( "oAttachAudit", Lifespan.Session );
									if( $oAttachAudit )
										$sValue = $oAttachAudit.Context.Get( "sDiffValue", Lifespan.Request );
								}
								else if ( $sProperty != "Primary Group" )
									$sValue = *.Context.Get( "sDiffValue", Lifespan.Request );
								break;
							case 9:
								$sType = Item( $sProperty, 2, ItemCount( $sProperty, "," ), "," );
								break;
						};

						#inline
						<tr valign='top' bFilterable="true" >
							<td nowrap style="<%$sHilite;%>"  ><%$sProperty%></td>
							<!-- td nowrap style="<%$sHilite;%>" ><%$sType%></td -->
							<td style="<%$sHilite;%>" ><%if ( $sValue=="fetch" ) GetSnippet( "NewValue") else $sValue ;%></td>
						</tr>
						#endinline;
					};

					$sAdded = GetGenString( "Added" );
					$sRemoved = GetGenString( "Removed" );



					$loRelations/
					{
						$iType = iType;
						## $sProperty = sGetData( "sProperty" );
						$sType = $iType == 1 ? $sAdded : $sRemoved;

						#inline
						<tr valign='top' bFilterable="true" >
							<td nowrap><%$sType%></td>
							<td><%GetSnippet( "NewValue");%></td>
						</tr>
						#endinline;
					};

					#inline
					</table>

				</div>
				#endinline;
			};

			if ( $oDataSrc1 != null and $oDataSrc1 != $this)
				$oDataSrc1.GetSnippet( "ModTipsInlineAudit" + EOI + $sSupData );
			$loObjs/
			{
				GetSnippet( "ModTipsInlineAudit" + EOI + CStr( CInt( $sSupData ) + 50 ));
			};
			break;

		case "HandyEntryAlert":

			#inline
			<table class='Entry' width='97%' style='border-bottom:1px solid gray;' >
				<tr>
					<td width="20px" ><%GetSnippet( "sIcon" )%></td>
					<td width="100%" ><%sBodyLink( sDescription, "Home", "link", " style='font:8pt Verdana;' " );%></td>
					<td nowrap align="right" width="100px" >
						#endinline;

						$sScr = "$(this).parents('.Entry').replaceWith( top.sGetUrl( 'GetSnippet.ase?oThis=" + Ref + "&sShowingWhat=HandyEntryAlert' ) );";
						$sOnChange =" sRefreshMethods=""" + $sScr + """ ";

						#inline
						<img src="images/<% ::sGetThemeFolder() %>/_delete.png" title="Stop following this item" onclick="$(this).parents('.Entry').remove();top.sGetUrl( 'SetData.ase?oThis=<%Ref%>&sRequest=sDelete&sValue=true&bUpdateTxn=true' );" />
					</td>
				</tr>
				<tr>
					<td> </td>
					<td colspan=2 ><%GetSnippet( "AuditEntriesForHandyAlert" )%></td>
				</tr>
			</table>
			#endinline;

			break;

		case "sStateTips":

			## what are we looking for?
			if ( $sShowingWhat == "sModTips" )
			{
				$sItemsOfInterest = "Change Log";
				## get the changes
				$loNotes = loGetObjects( "AuditLog", "Children" );
			}
			else
			{
				$sItemsOfInterest = "Workflow Log";
				## get the changes
				$loNotes = loGetObjects( "WorkflowLog", "Children" );
			};

			## reduce the list if ModTips
			if ( $sShowingWhat == "sModTips" )
			{
				$nDaysToShow = 5;
				$loNotes = $loNotes[ datediff( "d", dtCreated, now() ) < $nDaysToShow ];
			};

			## output the first line
			$nCount = count( $loNotes );
			$sCount = $nCount == 1 ? "1 entry" : $nCount + " entries";
			$sTitle = $sItemsOfInterest + " - " + $sCount;
			#inline
			<div style='width:450px'>
				<div style='font-size:10pt;font-weight:bold;padding-bottom:5px;' ><%$sTitle;%>
				#endinline;

				## get last GUID
				$oHistoryMgr = oGetHistoryManager( false );
				$sOldGUID = "";
				if ( $oHistoryMgr != NULLOBJECT )
					$sOldGUID = $oHistoryMgr.sGetLastGUID();

				if ( $sOldGUID != "" )
				{
					$oItem = $oHistoryMgr.oFindHistoryItemByGUID( $sOldGUID );
					$sOldTitle = "";
					if ( $oItem)
						$sOldTitle = $oItem.sName;
					##$bShowNavigation = false;
					$sGUID = "";
					$sNewTitle = htmlencode("<Latest>");
					$iDifferencingTool = CInt( $me.oPerson.sGetPersonalPref( "sDifferencingTool" ) );
					#inline
						<span class='noprint ActionLink' style = "cursor:pointer;margin-left:10px;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
							sRef=<%Ref%> onclick='top.RunDifferencesBetweenDocumentVersions( this, "<%Ref%>", <%$iDifferencingTool%>, "<% $sGUID %>", "<% $sOldGUID %>", "<%$sOldTitle%>", <%$sNewTitle%> );'>
							Diff
						</span>
					#endinline;
				};

				#inline
				</div>
				#endinline;

				## write out the items
				$loNotes/
				{
					#inline
					<li style='padding-bottom:5px;'>
						<%sGetData("sSummary")%>
					</li>
					#endinline;
				};

			"</div>";

			break;
		case "TraceReport":
			$sRequest = GetRequest("sRequest");
			if($sRequest == "TestsToRequirementsTrace")
			{
				#inline
				<div style = "font-family:verdana;text-align:center;color:#666666;">
						<span style="font-weight:bold;">Tests to Requirements and Specifications Trace</span>
				</div>
				<br>
				#endinline;
				TraceReport( "Tests", "Requirements", "Parents", "Tests", "Requirements and Specifications" );
			};
			if($sRequest == "ReqToSpecTrace")
			{
				#inline
				<div style = "font-family:verdana;text-align:center;color:#666666;">
						<span style="font-weight:bold;">Requirements to Sub Requirements Trace</span>
				</div>
				<br>
				#endinline;
				TraceReport( "Requirements", "Requirements", "Children", "Requirements", "Sub Requirements" );
			};
			if($sRequest == "SpecToTestTrace")
			{
				#inline
				<div style = "font-family:verdana;text-align:center;color:#666666;">
						<span style="font-weight:bold;">Requirements to Test Trace</span>
				</div>
				<br>
				#endinline;
				TraceReport( "Requirements", "Tests", "Children", "Requirements", "Tests" );
			};
			break;
		case "History":
			$oThis = *;
			$bActions = true;

			## Always show the local history page for now so local changes can be checkpointed
			## except if a linked in document, show the source document history report
			if ( $oThis.ClassName == "SSC_SubSystem" AND $oThis.bReference AND $oThis.bIsDocument() )
			{
				$oLink = $oThis.oFindMyReference();
				if ($oLink.IsValid)
				{
					$oThis = $oLink;
				}
				else
				{
					"Source reference is not valid.";
				};
			};
			$oThis.VersionReport($oThis,$bActions);
			break;

		case "sWorkflowState":
		case "WorkflowCommandsShort":
			$sExport = GetRequest( "sExport" );
			if ( $sExport == NULL )
				$sExport = "";

			$bCanModify = GetRequest( "bMakeEditable" );

			if( $bCanModify == NULL )
				$bCanModify = bIsEditable();

			$sRef = Ref;

			#inline
			<div style='display:inline;'>
			#endinline;

			if( $sExport == "MHTArchive" Or $sExport == "Word" or $sExport == "HtmlFile" Or $sExport == "Excel" Or $sExport == "PowerPoint" Or $sExport == "Email" Or $sExport == "DirectPDF" )
				"";
			else
			{
				$sIcon = "";
				$oState = $this.oGetWorkflowState();
				if ( $oState And $oState != NULLOBJECT ) $sIcon = $oState.sIconToUse;

				if ( $sIcon != "" )
				{
					##make sure we look in the images theme directory if no path
					$sIcon = ::resolveIconPath( $sIcon );
					#inline
						<img style='vertical-align:bottom;'	src="<%$sIcon%>"/>
					#endinline;
				};
			};

			Item( *.sGetData( "sWorkflowState" ), 2, 2, EOI );



			if( $bCanModify )
			{
				if( $sExport == "MHTArchive" Or $sExport == "Word" or $sExport == "HtmlFile" Or $sExport == "Excel" Or $sExport == "PowerPoint" Or $sExport == "Email" Or $sExport == "DirectPDF" )
					"";
				else
				{
					if ( Not bIsPseudoDeleted() )
					{
						if ( $sShowingWhat == "sWorkflowState" )
						{
							#inline
							<i class="Dialog fa fa-list-alt" style='font-size:14px;vertical-align:bottom;' sShowingWhat='WorkflowCommandMenu' sRef='<%$sRef%>'
								title = "Commands..."></i>
							#endinline;
						}
						else
						{
							#inline
							<div class="Dialog ActionLink" style="margin-left:10px;display:inline;"
								sShowingWhat='WorkflowCommandMenu'
								sRef='<%$this.Ref%>' >
								Commands</div>
							#endinline;
						};
					};
				};
			};

			#inline
			</div>
			#endinline;
			break;
		case "sWorkflowCommandMenu":
			$sExport = GetRequest( "sExport" );
			if ( $sExport == NULL )
				$sExport = "";

			$bCanModify = GetRequest( "bMakeEditable" );

			if( $bCanModify == NULL )
				$bCanModify = bIsEditable();

			$sRef = Ref;
			if( $bCanModify )
			{
				if( $sExport == "MHTArchive" Or $sExport == "Word" or $sExport == "HtmlFile" Or $sExport == "Excel" Or $sExport == "PowerPoint" Or $sExport == "Email" Or $sExport == "DirectPDF")
					"";
				else
				{
					if ( Not bIsPseudoDeleted() )
					{
						#inline
						<i class="Dialog fa fa-list-alt" style='font-size:14px;vertical-align:bottom;' sShowingWhat='WorkflowCommandMenu' sRef='<%$sRef%>'
							title="Commands..."></i>
						#endinline;
					};
				};
			};

			break;

		case "sWorkflowStateAndIcon":

			$sIcon = "";
			$oState = $this.oGetWorkflowState();
			if ( $oState And $oState != NULLOBJECT ) $sIcon = $oState.sIconToUse;

			if ( $sIcon != "" )
			{
				##make sure we look in the images theme directory if no path
				$sIcon = ::resolveIconPath( $sIcon );
				#inline
					<img style='vertical-align:bottom;'	src="<%$sIcon%>"/>
				#endinline;
			};

			Item( *.sGetData( "sWorkflowState" ), 2, 2, EOI );

			break;

		case "Status_section":
			"<div style='display:inline'>";
				GetTableForm("Status");
			"</div>";

			break;
		case "ActionItemsBlock":

			$sExport = "";
			if ( GetRequest( "sExport" ) != null )
				$sExport = GetRequest( "sExport" );
			$bExporting = ( $sExport != "" ? true : false );

			#inline
			<div class=FormalTable id=ActionItems style='width:100%' >
				<table width=100% style="table-layout:fixed;padding:1px;font-weight: bold;text-align:center;" >
					<tr>
						<td style="width:1.5in;" > </td>
						<td><div style="page-break-after:avoid;">ACTION ITEMS</div></td>
						<td style="width:1.5in;text-align:right;">
						#endinline;
						if ( $bExporting == false )
						{
							#inline
							<div  id="TableSettings" style='margin-top:-1px;font-weight: normal;' class='noprint'>
								<span class = "SidebarButton ActionLink" sShowingWhat = 'TableDef' sRef='<%Ref%>'
									sType = 'table' style="cursor:pointer;text-decoration:underline;"  sHelpId="Callout_Layout" sContext='table'
									onclick=top.currBodyTable=top.oFindTableDiv(this.ownerDocument.getElementById('ActionItems'),false);  >data</span>&nbsp;
								<span class = "SidebarButton ActionLink" sShowingWhat = 'Grouping' sRef='<%Ref%>'
									sType = 'table' style="cursor:pointer;text-decoration:underline;" sHelpId="Callout_Grouping" sContext='table'
									onclick=top.currBodyTable=top.oFindTableDiv(this.ownerDocument.getElementById('ActionItems'),false); >group</span>&nbsp;
								<span class = "SidebarButton ActionLink" sShowingWhat = 'Filtering' sRef='<%Ref%>'
									sType = 'table' style="cursor:pointer;text-decoration:underline;"  sHelpId="Callout_Filtering" sContext='table'
									onclick=top.currBodyTable=top.oFindTableDiv(this.ownerDocument.getElementById('ActionItems'),false); >filter</span>
							</div>
							#endinline;
						};
						#inline
						</td>
					</tr>
				</table>
			#endinline;

			$sRequest = "ActionItems";
			$sContext = "table";
			$sFormat = GetRequest("sFormat");
			if( $sFormat == NULL )
				$sFormat = "Standard";

			$sGrouping = GetRequest("sGrouping");
			if( $bExporting )
				$sGrouping = "";
			else if( $sGrouping == NULL  )
				$sGrouping = ""; ##"byStatus";

			$sFilter = GetRequest("sFilter");
			if( $sFilter == NULL )
				$sFilter = "";

			$sTheme = "Documentation";
			$sLinkerParams = "Child";
			$sEditParams = "Create";

			SetRequest( "sLinkerParams", $sLinkerParams );
			SetRequest( "sEditParams", $sEditParams );

			$nDataSrc = GetRequest( "nDataSrc" );
			if( $nDataSrc != NULL )
				$this.SetContext( "nDataSourceIndexRequested", $nDataSrc, true );

			$sPlugins = GetRequest( "sPlugins" );
			if( $sPlugins == NULL )
			{
				if( bRapidAdderAllowed( "&sChange=OTHER,ACTIONS" ) )
					$sPlugins = "RapidAdder;sAdderTag='AI'";
				else
					$sPlugins = "";
			};

			GetFlexTable($sRequest,$sContext, $sFormat,"width:100%;", $sGrouping,$sFilter,$sTheme,$sLinkerParams, $sEditParams, $sPlugins);

			#inline
			</div>

			<br>
			#endinline;

			break;
		case "Search":
			GetSearchPage();
			break;
		case "SearchResults":

			## what did they send us
			$sParams = GetRequest( "sParams" );

			## items per page
			$iShowPerPage = GetDaoContext( "iShowPerPagePreference" );
			if ( $iShowPerPage == null )
				$iShowPerPage = 15;
			else
				$iShowPerPage = CInt( $iShowPerPage );

			## new search or not
			$sMore = GetRequest( "sMore" );
			$bNewSearch = $sMore == null;

			## Paging magic
			$sKey = "ResultsTree";

			## more stuff
			$oParent = $this;
			$sRequest = GetRequest( "sRequest" );
			$sContext = GetRequest( "sContext" );
			$sTOCRequest = GetRequest( "sTOCRequest" );

			## even more
			if( ( $sParams == NULL ) OR ( $sParams == "" ) )
			{
				$lsGroupParams = CList();
				$bCountGroups = false;
			}
			else
			{
				$lsGroupParams = split( $sParams, "|");
				$bCountGroups = First($lsGroupParams) == "true"? true:false;
				$lsGroupParams = pickRange($lsGroupParams,1,Count($lsGroupParams)-1);
			};

			$sFilter = GetRequest("sFilter");
			$sFilter = $sFilter ? $sFilter : "";

			$sReqType = GetRequest("sReqType");
			$sReqType = $sReqType ? $sReqType : "";

			$sTocFilter = "";

			## finally, is this a new search?
			if ( $bNewSearch )
			{
				## something special for the app object
				if( *.classname == "SSC_AppObj" )
				{
					$loMembers = CList();
					try
					{
						loGetObjects( "ActiveProjects", "Below" )/ {
							$loMembers << *.loGetObjects( $sRequest, "Below" );
						};
					}
					catch( $sErr )
					{
						$error = ::sGetErrorString($sErr);

						$sError = URLEncode( $error );
						#inline
						<script>
							alert( top.URLDecode("<%$sError%>" ) );
						</script>
						#endinline;
						break;
					};
				}
				else
				{
					## get the goods normally
					try
					{
						if( $sRequest == "Requirements" AND $sReqType != "" )
							$loMembers = loGetObjects( $sRequest, "Below" )[ sReqType == $sReqType ];

						##When searching for projects, we are searching for ALL projects, and thus need the loGetObjects
						##to be called on the App Object
						else if( $sRequest == "Projects" )
						{
							$oApp = SSC_AppObj::oGet_s();
							$loMembers = $oApp.loGetObjects( "ACTIVEPROJECTS", "Below" );
						}
						else
							$loMembers = loGetObjects( $sRequest, "Below" );
					}
					catch( $sErr )
					{
						$error = ::sGetErrorString($sErr);

						$sError = URLEncode( $error );
						#inline
						<script>
							alert( top.URLDecode("<%$sError%>" ) );
						</script>
						#endinline;
						break;
					};
				};

				## now filter if needed
				if (	$sFilter != "" and
						find( $sFilter, "|*" ) == -1 and
						find( $sFilter, "|_EMPTY_" ) == -1 ) ## quick and dirty optimize
				{
					$lsFilters = GetFilter($sFilter);
					$loMembers = loFilterList( $loMembers, $lsFilters, true );
				};

				## most important, remember your hard work for "next/previous" requests, if any
				::RememberObjects( "Search", $sKey, $loMembers );
			};

			############################################################################################
			## So, now we are all equal, whether this is a new search or next/previous
			############################################################################################

			$loMembersToShow = ::loGetNextObjects( $sKey, $iShowPerPage, $sMore );
			$iStart = ::iGetStart( $sKey );
			$iEnd = ::iGetEnd( $sKey );
			$iCount = ::iGetCount( $sKey );

			## now, render page!

			#inline
			<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
			<html>
			<head>
				<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
				<meta http-equiv="Content-Encoding" value="utf-8"/>
				<link type="text/css" rel="stylesheet" href="styles/common.css">
				<%::headContentForAllPages()%>
				<script type="text/javascript" src="scripts/top.js"></script>
				<script type="text/javascript" src="scripts/JQueryCommon_loader.js"></script>
				<script type="text/javascript" src="scripts/FlexTree.js"></script>
			</head>
			<!-- turn on the dialog button, toggle the headers, and display the results -->
			<body class='SearchBody' style="overflow:auto;font-family:verdana;font-size:8pt;" id="SearchBody"
			onload="top.searching.style.display='none';top.oSearchFrameDiv.style.display='block';top.results.style.display='block';top.setLinkerFrameHeight();">
			#endinline;

			## decide what to do with the previous button
			$sPrevious = "<font color=white>Prev</font>";
			if( $iStart > 0 )
			{
				$sPrevious = "<a class='ActionLink' href='GetSnippet.ase?" + $sParams + "&sMore=Prev' >Prev</a>";
			};

			## decide what to do with the next button
			$sNext = "<font color=white>Next</font>";
			if( $iEnd < $iCount-1 )
			{
				$sNext = "<a class='ActionLink' href='GetSnippet.ase?" + $sParams + "&sMore=Next' >Next</a>";
			};

			## show the buttons
			#inline
				<table style="text-align:center;margin-left:108px;font-family:verdana;font-size:8pt;" cellpadding=0 cellspacing=0 >
					<tr>
						<td style="text-align:right;width:.5in;" ><%$sPrevious%></td>
						<td style="text-align:center;width:1in;" ><%$iCount%> Found.</td>
						<td style="text-align:left;width:.5in;" ><%$sNext%></td>
					</tr>
				</table>
				<br>
			#endinline;


			if( NOT IsEmpty( $loMembersToShow ) )
			{
				if ( $iCount <= 15 or $iShowPerPage <= 15 )
				{
					## show them nicely
					$loMembersToShow/
					{
						#inline
						<table cellpadding=0 cellspacing=0 >
							<tr>
								<td valign=top style="padding-top:.06in;width:.2in;" ><%$iternum+1+$iStart;%>. </td>
								<td valign=top ><%GetFTEntry(0, "search", $sTOCRequest, "FT_Node",$lsGroupParams,$sTocFilter,$bCountGroups, $oParent ) %></td>
							</tr>
						</table>
						#endinline;
					};
				}
				else if ( $iCount <= 25 or $iShowPerPage <= 25 )
				{
					## show them nicely
					$loMembersToShow/
					{
						#inline
						<table cellpadding=0 cellspacing=0 >
							<tr>
								<td valign=top style="padding-top:.06in;width:.2in;" ><%$iternum+1+$iStart;%>. </td>
								<td valign=top ><%GetFTEntry(0, "search", $sTOCRequest, "FT_Node",$lsGroupParams,$sTocFilter,$bCountGroups, $oParent ) %></td>
							</tr>
						</table>
						#endinline;
					};
				}
##				else if ( $iCount <= 100 or $iShowPerPage <= 100 )
##				{
					## show them with reduced decorations/functionality
##					$loMembersToShow/GetGenericItemName();
##				}
				else
				{
					## bare minimum
					"<ol start=" + CInt( $iStart + 1 ) + " style='padding-left:.05in;' >";
					$loMembersToShow/
					{
						#inline
						<li>
							<a class="NavigationLink" target=body href="GetBodyPage.ase?oThis=<%Ref%>"
								onclick="top.link( href, 'body' );return false;"
								><%
									$sDesc = sGetData( "sQualifiedDescription" );
									find( $sDesc, eoi ) > -1 ? Item( $sDesc, 2, 2, eoi ) : $sDesc;
								%></a>
						</li>
						#endinline;
					};
					"</ol>";
				};
				"<br>";
			};

			## and we're done.

			#inline
			</body>
			#endinline;
			break;

		case "CostSearchResults":
			$sCostRef = GetRequest("sCostRef");
			if ($sCostRef == "ALL")
			{
				$oApp = SSC_AppObj::oGet_s();
				$vAllDomains = $oApp.vsGetLevels( "ECMSearchDomains" );
				$vDomains = CVector();
				$vAllDomains/
				{
					$sDomain = *;
					$sDomain = $sDomain + EOI + "Production Server 1";
					$vDomains << CVector($sDomain);
				};
			}
			else
			{
				$sCostRef = $sCostRef + EOI + "Production Server 1";
				$vDomains = CVector($sCostRef);
			};

			$sFilter = GetRequest("sFilter");
			$sType = Item( $sFilter, 2, 2, "|" );
			$sToFind = Item( $sFilter, 3, 3, "|" );
			$vsCostInfo = CVector();
			$vsCostInfo << SSC_AppObj::Do_FindCosts($sToFind, ($sType == "sPart_Number")?1:2, $vDomains);
			#inline
			<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
			<html>
			<head>
				<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
				<meta http-equiv="Content-Encoding" value="utf-8"/>
				<link type="text/css" rel="stylesheet" href="styles/common.css">
				<%::headContentForAllPages()%>
				<script type="text/javascript" src="scripts/top.js"></script>
				<script type="text/javascript" src="scripts/JQueryCommon_loader.js"></script>
				<script type="text/javascript" src="scripts/FlexTree.js"></script>
			</head>
			<!-- turn on the dialog button, toggle the headers, and display the results -->
			<body class='SearchBody' style="overflow:auto" id="SearchBody"
			onload="top.searching.style.display='none';top.oSearchFrameDiv.style.display='block';top.results.style.display='block';top.setLinkerFrameHeight();">
				<span style = 'font-family:verdana;font-size:8pt;'>
				#endinline;

				if( NOT IsEmpty( $vsCostInfo ) )
				{	$vsCostInfo/
					{
						$sCost = Item( *, 1, 1, EOI );
						$sPartNumber = Item( *, 2, 2, EOI );
						$sScenario = Item( *, 3, 3, EOI );
						$sTopScenario = Item( *, 4, 4, EOI );
						$sDomain = Item( *, 5, 5, EOI );
						$sDomain + "<br>";
						"&nbsp;&nbsp;" + $sTopScenario + "<br>";
						"&nbsp;&nbsp;" + $sScenario + "<br>";
						"&nbsp;&nbsp;" + $sPartNumber + "<br>";
						"&nbsp;&nbsp;" + $sCost + "<br>";
						"<br>";
					};
					"</span>";
				}
				else
					"<span style = 'font-family:verdana;color:#666666;font-size:8pt;float:center;'>No results.</span>";

				#inline

			</body>
			#endinline;
			break;
		case "ProjectList":
			$loProjects = SSC_AppObj::loGetObjects_b( "MYPROJECTS", "BELOW");
			$loProjects = $loProjects[bHasViewAccess()];
			$msoProjects = CMap( $loProjects/Format( sGetDescription(), ">" ), $loProjects);

			$msoProjects/
			{
				Ref + EOI + sGetDescription() + EOI;
			};
		break;
		case "GroupList":
			$loGroups = $this.loGetObjects( "GROUPS", "BELOW");
			$loGroups = $loGroups[bHasViewAccess()];
			$msoGroups = CMap( $loGroups/Format( sGetDescription(), ">" ), $loGroups);

			$msoGroups/
			{
				Ref + EOI + sGetDescription() + EOI;
			};
		break;
		case "ActiveReportingSection":
			$sRef = Ref;
			$bEditable = bIsEditable();
			$bModTips = bShowModTipsInFields();

			if( $bEditable Or $bModTips )
				DropList( "sActiveReportingSection", "ActiveReportingSection", "Select here...", $sRef + "~onRefresh~" );
			else
				sGetData( "sActiveReportingSection" );
			break;

		case "RightPopoutHeader":
			$sName = sGetText( "sQualifiedDescription" );
			$sRequest = GetRequest("sRequest");
			$sLinkerParams = GetRequest("sLinkerParams");
			$sContext = GetRequest( "sContext" );
			$sThemeFolder = ::sGetThemeFolder();


			$sClassname = *.classname;
			$sTableId = "flexTable_" +$sRequest + $sLinkerParams;
			$sRef = Ref;

			$iRequirementDisplay = GetDaoContext( "RequirementDisplayMode" );

			$sDisplay = "";
			##Patch up formatting
			if($sRequest == "Attachments_All")
				$sRequest = "Attachments";
			if( ($sRequest == "Attachments" ) AND ( $sContext != "Unlinker" ) )
				$sRequest = "Attachments in current project";
			if($sRequest == "ActionItems")
				$sRequest = "Action Items";
			if($sRequest == "UDAS")
				$sRequest = "User Defined Attributes";
			if( $sRequest == "PeopleAndGroups" )
				$sRequest = "People and Groups";
			if( $sRequest == "UsersAndGroups" )
				$sRequest = "Users and Groups";
			if( $sRequest == "UserGroups" )
				$sRequest = "User Groups";
			if( $sRequest == "TFInputs" )
				$sDisplay = "Inputs";
			if( $sRequest == "CommonInputs" )
				$sDisplay = "Common Inputs";
			if( $sRequest == "OutputLinks" )
				$sDisplay = "Outputs";

			if( find($sRequest,EOI) != -1)
				$sRequest = First(split($sRequest,EOI));

			if( $sDisplay == "" )
				$sDisplay = $sRequest;

			$bFancy = false;
			$sRelationship = "";
			if((($sClassname == "SSC_VOC")AND($sRequest == "Requirements")) OR (($sClassname == "SSC_SysReq")AND($sRequest == "Voices")))
			{
				$sRelationship = "Affected " + $sDisplay;
				$bFancy = true;

			};
			if( ( $sClassname == "SSC_SysReq" ) AND ( $sRequest == "Requirements" ) )
				$bFancy = true;

			if($sRelationship == "")
			{
				if($sLinkerParams == "Interactions")
				{
					$sRelationship = "Interacting " + $sDisplay;
					$bFancy = true;
				}
				else if ($sLinkerParams == "Parent")
				{
					$sRelationship = "Parent " + $sDisplay;
				}
				else
				{
					$sRelationship = $sDisplay;
				};
			};

			if( $sContext == "HOQLinker" )
			{
				$bFancy = true;
				#inline
				<div style = "float:right;">
				<center>
					<img onclick="top.CloseHOQ();" src="images/<% $sThemeFolder %>/CloseRed.png" title = "Close"/>
					<br><font style="font-family:verdana;font-size:6pt">Close HOQ</font><br/>
					<%GetSnippet( "AgainButton" );%>
				</center>

				</div>
				#endinline;
			}
			else
			{

				#inline
				<div style = "float:right;">
				<center>
					<img onclick="top.ClosePopout(this,true);" src="images/<% $sThemeFolder %>/CloseRed.png" title = "Close"/>
					<%if( $bFancy )
					 {
						"<br/>";
						GetSnippet("AgainButton");
					 };
					%>
				</center>
				</div>
				#endinline;
			};

			#inline

			<div style = "text-align:center;border-bottom-width:thin; border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:Gray; font-size:8pt;font-family:verdana;padding-bottom:.05in;" >
			#endinline;

			if( $sContext == "Linker" )
			{
				#inline
				Add <%$sRelationship%> to:<br/>
				#endinline;
			}
			else if( $sContext == "Unlinker" )
			{
				#inline
				Remove <%$sRelationship%> from:<br/>
				#endinline;
			}
			else
			{

				#inline
				Add	<span onclick = "top.linkerSelect = this;" sRef='<%$sRef%>'
						id = "HOQ_SelectLinkType" class=MarkUpLink  sShowingWhat="HOQ_SelectLinkType">
						<%$sRelationship%>
					</span>
				to: <br/>
				#endinline;

			};

			#inline
			<center><div> <%GetSnippet("sLinkerIcon")%><span style= "font-family:verdana;font-size:8pt;color:#15C;margin-left:-5px;display:inline;"> <%$sName%> </span></div> </center>
			<%$bFancy? "<br/>": ""%>
			</div>
			#endinline;
			break;
		case "Table":
			$sRequest = GetRequest("sRequest");
			$sContext = GetRequest("sContext");
			$sFormat = GetRequest("sFormat");
			$sGrouping = GetRequest("sGrouping");
			$sTableStyle = GetRequest( "sTableStyle" );
			if ( Not $sTableStyle )
				$sTableStyle = "text-align:left;";

			$sFilter = GetRequest("sFilter");
			$sTheme = GetRequest("sTheme");
			$sLinkerParams = GetRequest("sLinkerParams");

			$sEditParams = GetRequest( "sEditParams" );
			if( $sEditParams == NULL )
				$sEditParams = "";

			$nDataSrc = GetRequest( "nDataSrc" );
			if( $nDataSrc != NULL )
				$this.SetContext( "nDataSourceIndexRequested", $nDataSrc, true );

			##Need to reconstruct the sets and save them to reflect changes prior to the refresh
			if( $sRequest == "PrivilegeHolders" )
			{
				$oThis= *;

				$bPrivByProj = false;
				if ( ( $oThis KindOf "SSC_DBObj" ) And $oThis.bIsPrivilegedByProject() )
					$bPrivByProj = true;

				SetThreadContext( "oParent", $oThis );

				$bIsAdmin = $oThis.bCheckAccess( "ADMIN" );

				if( NOT $bIsAdmin )
					SetRequest( "bReadOnly", "true" );

				if( $bPrivByProj )
				{
					$oProject = ::oProjectCurrentlyBeingViewed();

					## save the project team and project team members on contexts
					$oTeam = $oProject.oProjectManager.oTeam;
					SetThreadContext( "oTeam", $oTeam );
				}
				else if ($oThis.classname == "SSC_Group")
				{
					## add managed by set to context
					SetThreadContext( "oTeam", $oThis );
				};
			};

			if( $sRequest == "DirectoryListing" )
			{
				$loParents = loGetObjects( "Groups", "Parents" );
				if ( IsEmpty( $loParents ) )
					$loParents =  loGetObjects( "Breakdowns", "Parents" );

				SetRequest( "loParentDirs", $loParents );
			};

			$sPlugins = GetRequest( "sPlugins" );
			if( $sPlugins == NULL )
				$sPlugins = "";

			$mssAdditionalArgs = CMap( CList(), CList() );
			$lsAdditionalArgs = GetRequest( "lsAdditionalArgs" );
			if( $lsAdditionalArgs != NULL )
			{
				$lsAdditionalArgs/
				{
					$sKey = Item( *, 1, 1, EOI );
					$sValue = Item( *, 2, 2, EOI );
					$mssAdditionalArgs << CMap( $sKey, $sValue );
				};
			};

			$sSorting = GetRequest( "sSorting" );
			if( $sSorting == NULL )
				$sSorting = "";

			$bOnlyFetchRows = GetRequest( "bOnlyFetchRows" );
			if( $bOnlyFetchRows == "" )
				$bOnlyFetchRows = false;

			if( $bOnlyFetchRows )
				GetFlexTableLazyRows($sRequest, $sContext, $sFormat, $sGrouping, $sFilter, $sTheme, $sLinkerParams, $sPlugins, $sSorting, $mssAdditionalArgs );
			else
				GetFlexTable($sRequest,$sContext, $sFormat, $sTableStyle, $sGrouping,$sFilter,$sTheme,$sLinkerParams, $sEditParams, $sPlugins, $sSorting, $mssAdditionalArgs );

			##Clear out the sets and reset the thread context and the dao contexts
			if( $sRequest == "PrivilegeHolders" )
			{
				SetThreadContext( "oTeam", NULL );
				SetThreadContext( "oParent", NULL );
			};
			break;
		case "TablePage":
			$sRequest = GetRequest("sRequest");
			$sContext = GetRequest("sContext");
			$sFormat = GetRequest("sFormat");
			$sGrouping = GetRequest("sGrouping");
			$sSorting= GetRequest( "sSorting" );

			$sFilter = GetRequest("sFilter");
			$sTheme = GetRequest("sTheme");
			$sLinkerParams = GetRequest("sLinkerParams");

			$sEditParams = GetRequest( "sEditParams" );
			if( $sEditParams == NULL )
				$sEditParams = "";

			$nDataSrc = GetRequest( "nDataSrc" );
			if( $nDataSrc != NULL )
				$this.SetContext( "nDataSourceIndexRequested", $nDataSrc, true );

			$sExport = GetRequest( "sExport" );
			$bExporting = $sExport != null;

			##Need to reconstruct the sets and save them to reflect changes prior to the refresh
			if( $sRequest == "PrivilegeHolders" )
			{
				$oThis= *;

				$bPrivByProj = false;
				if ( ( $oThis KindOf "SSC_DBObj" ) And $oThis.bIsPrivilegedByProject() )
					$bPrivByProj = true;

				SetThreadContext( "oParent", $oThis );

				$bIsAdmin = $oThis.bCheckAccess( "ADMIN" );

				if( NOT $bIsAdmin )
					SetRequest( "bReadOnly", "true" );

				if( $bPrivByProj )
				{
					$oProject = ::oProjectCurrentlyBeingViewed();

					## save the project team and project team members on contexts
					$oTeam = $oProject.oProjectManager.oTeam;
					SetThreadContext( "oTeam", $oTeam );
				}
				else if ($oThis.classname == "SSC_Group")
				{
					## add managed by set to context
					SetThreadContext( "oTeam", $oThis );
				};

				##needed to get the height right on the columns for exporting
				$bExport = GetRequest( "sExport" ) != NULL;
				if( $bExport )
				{
					SetRequest( "sHeaderRowStyle", "height:1.5in;" );
					SetRequest( "sDocLayoutOverride", "Landscape" );
					$sTheme = "Documentation";
				};
			};

			if( $sRequest == "DirectoryListing" )
			{
				$loParents = loGetObjects( "Groups", "Parents" );
				if ( IsEmpty( $loParents ) )
					$loParents =  loGetObjects( "Breakdowns", "Parents" );

				SetRequest( "loParentDirs", $loParents );
			};

			$sPlugins = GetRequest( "sPlugins" );
			if( $sPlugins == NULL )
				$sPlugins = "";
			#inline
			<html>
			<head>
				<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
				<meta http-equiv="Content-Encoding" value="utf-8"/>
				<%GetTablePageStyle( $bExporting, $sTheme )%>
			</head>
			<body>
			<%GetFlexTable( $sRequest, $sContext, $sFormat,"text-align:left;", $sGrouping,$sFilter,$sTheme,$sLinkerParams, "", $sPlugins, $sSorting)%>
			</body>
			</html>
			#endinline;
			##Clear out the sets and reset the thread context and the dao contexts
			if( $sRequest == "PrivilegeHolders" )
			{
				SetThreadContext( "oTeam", NULL );
				SetThreadContext( "oParent", NULL );
			};
			break;
		case "GetTableLineItem":
			$oRequestor = GetRequest( "oParent" );
			$sFormat = GetRequest( "sFormat" );
			$sRequest = GetRequest( "sRequest" );

			$bModTips = bShowModTipsInFields();

			## Some snippets in a table rely on this check being performed before the snippet is drawn
			$bEditable = Not $bModTips And bIsEditable();

			if( $sRequest == "PrivilegeHolders" )
			{

				$bPrivByProj = false;
				if ( ( $oRequestor KindOf "SSC_DBObj" ) And $oRequestor.bIsPrivilegedByProject() )
					$bPrivByProj = true;

				SetThreadContext( "oParent", $oRequestor );

				$bIsAdmin = $oRequestor.bCheckAccess( "ADMIN" );

				if( NOT $bIsAdmin )
					SetRequest( "bReadOnly", "true" );

				if( $bPrivByProj )
				{
					$oProject = ::oProjectCurrentlyBeingViewed();

					## save the project team and project team members on contexts
					$oTeam = $oProject.oProjectManager.oTeam;
					SetThreadContext( "oTeam", $oTeam );
				}
				else if ($oRequestor.classname == "SSC_Group")
				{
					## add managed by set to context
					SetThreadContext( "oTeam", $oRequestor );
				};
			};

			if( $sRequest == "DirectoryListing" )
			{
				$loParents = $oRequestor.loGetObjects( "Groups", "Parents" );
				if ( IsEmpty( $loParents ) )
					$loParents =  $oRequestor.loGetObjects( "Breakdowns", "Parents" );

				SetRequest( "loParentDirs", $loParents );
			};

			$lsTableDef = lsGetTableDef( $sFormat );

			## add a column to any table that has "Reorderable" behavior
			$sPlugins = GetRequest( "sPlugins" );
			if( $sPlugins == NULL )
				$sPlugins = "";

			if ( Not $bModTips And find( $sPlugins, "Reorderable" ) >= 0 )
			{
				$lsTableDef << ::sReorderableColumn();
				$bReorderable = true;
			};

			if ( Not $bModTips And find( $sPlugins, "RowDetails" ) >= 0 )
				$lsTableDef << ::sRowDetailsColumn();

			$vsCols = CVector();
			$vsCellStyles = CVector();
			$vsTagAttrs = CVector();

			$lsTableDef/
			{
				$vsRowDef = split( *, "|" );

				$sCurrCol = pick( $vsRowDef, 0 );
				$vsCols << $sCurrCol;
				$vsCellStyles << pick( $vsRowDef, 3 );

				$sTagAttr = pick( $vsRowDef, 4 );

				if( $bReorderable )
					$sTagAttr += " bDragable=true DragTableRow=true ";

				$vsTagAttrs << $sTagAttr;
			};

			if( $oRequestor.classname == "SSC_Category" )
			{
				if( $oRequestor.bIsDocumentSection() )
					SetThreadContext( "oCurrentSection", $oRequestor );
			};

			$sRef = Ref;
			#inline
			<table>
			<tr class='FT_Row' sRef='<%$sRef%>' bLinked='false'  bFilterable=1 dragable=true subscription='<%$sRef%>~onRefresh~^<%$sRef%>~onDelete~' id='<% $sRef %>' >
			#endinline;

			if ( ::bIsSnippetFormat( $sFormat ) )
			{
				"<td class='FT_Cell' valign='top' sRef='" + $this.Ref + "'>";
				$this.GetSnippet( ::sGetSnippetNameFromSnippetFormat( $sFormat ) );
				"</td>";

				AddPluginCells( $sPlugins );
			}
			else
			{
				GetFlexTableEntry($oRequestor, $vsCols, $vsCellStyles, $vsTagAttrs,false,0 );
			};

			#inline
			</tr>
			</table>
			#endinline;

			##Clear out the sets and reset the thread context and the dao contexts
			if( $sRequest == "PrivilegeHolders" )
			{
				SetThreadContext( "oTeam", NULL );
				SetThreadContext( "oParent", NULL );
			};
			break;
		case "Linker":
			$sRequest = GetRequest("sRequest");
			$sLinkerParams = GetRequest("sLinkerParams");
			$sClassName = *.classname;

			$sUrl = "GetSnippet.ase?oThis=" + Ref +"&bClearTableCache=true&sShowingWhat=Linker_Body&sRequest=" + $sRequest + "&sLinkerParams=";
			$sUrl += URLEncode( $sLinkerParams );
			$sClassName = *.classname;

			if($sLinkerParams == "Interactions")
				$sFormat = "InteractionsLinker";
			else if ( ( ( $sClassName == "SSC_SysReq" ) AND ( ( $sRequest == "Voices" ) OR ( $sRequest == "Requirements" ) ) ) OR ( ( $sClassName == "SSC_VOC" ) AND ( $sRequest == "Requirements" ) ) )
				$sFormat = "VOCReqLinker";
			else if( $sRequest == "Competitors" )
				$sFormat = "CompetitorLinker";
			else
				$sFormat = "Linker";
			GetLinkerPage( $sUrl, $sFormat, $sRequest, "Linker" );
			break;

		case "Linker_Body":
			$sRequest = GetRequest("sRequest");
			$sLinkerParams = GetRequest("sLinkerParams");

			##Allows for special casing HOQ linker
			$sContext = GetRequest( "sContext" );
			if( $sContext == NULL )
				$sContext = "Linker";

			$sClassName = *.classname;

			if($sLinkerParams == "Interactions")
				$sFormat = "InteractionsLinker";
			else if ( ( ( $sClassName == "SSC_SysReq" ) AND ( ( $sRequest == "Voices" ) OR ( $sRequest == "Requirements" ) ) ) OR ( ( $sClassName == "SSC_VOC" ) AND ( $sRequest == "Requirements" ) ) )
				$sFormat = "VOCReqLinker";
			else if( $sRequest == "Competitors" )
				$sFormat = "CompetitorLinker";
			else
			{
				if( $sClassName == "SSC_SysReq" AND $sContext != NULL AND $sContext == "HOQLinker" )
					$sFormat = "VOCReqLinker";
				else if( $sRequest == "Competitors" )
					$sFormat = "CompetitorLinker";
				else
					$sFormat = "Linker";
			};

			$sFilter = GetRequest( "sFilter" );
			if( $sFilter == NULL )
				$sFilter = "";
			PageSetup( $sFormat );
			#inline
				<script>
				function FlexBodyMethods()
				{
					top.linkingMessage.style.display='none';
					top.linkerFrameDiv.style.display='block';
					top.setLinkerFrameHeight();
					top.linkerHeader.style.display='block';
					top.oLinkerTable = top.oFindObjectByClassname( document.body, "FT_Master", false );
					var o = top.linkerHeader.ownerDocument.getElementById('filterBox');
					try
					{
						o.focus();
						o.select();
					}
					catch ( e ){};
				}
				</script>
				<!-- Turn off the message, display the search bar and menu button, display the linker table, and save a handle to the linker table -->
				<body onload="FlexBodyMethods()">
			#endinline;
			GetFlexTable( $sRequest, $sContext, $sFormat, "text-align:left", "", $sFilter, $sFormat, $sLinkerParams, "", "");
			#inline
				</body>
			</html>
			#endinline;
			break;
		case "Unlinker":
			$sRequest = GetRequest("sRequest");
			$sLinkerParams = GetRequest("sLinkerParams");
			$sClassName = *.classname;

			$sUrl = "GetSnippet.ase?oThis=" + Ref +"&bClearTableCache=true&sShowingWhat=Unlinker_Body&sRequest=" + $sRequest + "&sLinkerParams=";
			$sUrl += URLEncode( $sLinkerParams );
			$sClassName = *.classname;

			if($sLinkerParams == "Interactions")
				$sFormat = "InteractionsLinker";
			else if ( ( ( $sClassName == "SSC_SysReq" ) AND ( ( $sRequest == "Voices" ) OR ( $sRequest == "Requirements" ) ) ) OR ( ( $sClassName == "SSC_VOC" ) AND ( $sRequest == "Requirements" ) ) )
				$sFormat = "VOCReqLinker";
			else if( $sRequest == "Competitors" )
				$sFormat = "CompetitorLinker";
			else
				$sFormat = "Linker";
			GetUnlinkerPage( $sUrl, $sFormat, $sRequest, "Unlinker" );
			break;
		case "Unlinker_Body":
			$sRequest = GetRequest("sRequest");
			$sLinkerParams = GetRequest("sLinkerParams");
			$sClassName = *.classname;

			if($sLinkerParams == "Interactions")
				$sFormat = "InteractionsLinker";
			else if ( ( ( $sClassName == "SSC_SysReq" ) AND ( ( $sRequest == "Voices" ) OR ( $sRequest == "Requirements" ) ) ) OR ( ( $sClassName == "SSC_VOC" ) AND ( $sRequest == "Requirements" ) ) )
				$sFormat = "VOCReqLinker";
			else if( $sRequest == "Competitors" )
				$sFormat = "CompetitorLinker";
			else
				$sFormat = "Linker";

			$sFilter = GetRequest( "sFilter" );
			if( $sFilter == NULL )
				$sFilter = "";

			PageSetup( $sFormat );
			#inline
				<script>
				function FlexBodyMethods()
				{
					top.linkingMessage.style.display='none';
					top.linkerFrameDiv.style.display='block';
					top.setLinkerFrameHeight();
					top.linkerHeader.style.display='block';
					top.oLinkerTable = top.oFindObjectByClassname( document.body, "FT_Master", false );
					var o = top.linkerHeader.ownerDocument.getElementById('filterBox');
					try
					{
						o.focus();
						o.select();
					}
					catch ( e ){};
				}
				</script>
				<!-- Turn off the message, display the search bar and menu button, display the linker table, and save a handle to the linker table -->
				<body onload="FlexBodyMethods()">
			#endinline;
			GetFlexTable($sRequest,"Unlinker", $sFormat,"text-align:left", "",$sFilter,$sFormat,$sLinkerParams, "", "");
			#inline
				</body>
			</html>
			#endinline;
			break;
		case "StandardWordPageOpening":
		case "ActionItemsBlockPageOpening":
			$sExport = "";
			if ( GetRequest( "sExport" ) != null )
				$sExport = GetRequest( "sExport" );
			$bExporting = ( $sExport != "" ? true : false );

			#inline
			<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
			<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office"
									xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">
			<head>
				<meta name="EKey" content="<%sGetEKey()%>"/>
			#endinline;
				$oParent = oGetProject();
			#inline
				<meta name="ZOOMCATEGORY" content="DBOBJ" />
				<meta name="ParentEKey" content="<%$oParent.IsValid?$oParent.sGetEKey():""%>"/>
				<meta name="Modified" content="<%sGetDataDisplay( "sModifiedDateAndTime_formatted" )%>" />
			#endinline;

			if( NOT $bExporting )
			{
				#inline
				<%::headContentForAllPages()%>
				<script src="scripts/jquery.calendarlite.min.js" type="text/javascript"></script>
				<script type="text/javascript" src="scripts/StickyTableHeaders.js"></script>
				<link rel='stylesheet' type='text/css' href='Utilities/textboxio/custom.css' />
				<link rel='stylesheet' type='text/css' href='Styles/themes/editor/<% ::sGetSiteThemeEditorFilename() %>' />
				#endinline;
			};

			#inline
				<meta name="ProgId" content="Word.Document">
				<!--[if mso]>
				<xml>
					<w:WordDocument>
						<w:View>Print</w:View>
						<w:Zoom>80</w:Zoom>
					</w:WordDocument>
				</xml>
				<![endif]-->
			#endinline;

			GetHeadCSSContent( "Documentation" );
			if ( NOT $bExporting ) {
				#inline
				<style media='print'> .noprint{	display:none; }	</style>
				<script type="text/javascript" >
					function oGetTop()
					{
						var oTop = top;
						if ( oTop.opener && !oTop.opener.closed )
							oTop = oTop.opener.top;
						return oTop;
					};
				</script>
				#endinline;
				GetHeadJavascriptContent("Documentation", true );
			};

			#inline
				<style type="text/css">
					html
					{
						overflow-x:normal;
					}
					body
					{
						padding-right:.1in;;
					}
				</style>
			</head>
			#endinline;

			if( $bExporting )
			{
				#inline
				<body onbeforeprint='if(window.oGetTop){oGetTop().ShowRatingTables( this );}' onafterprint='if(window.oGetTop){oGetTop().ResetRatingTables( this );}'
					onload="if(window.oGetTop){oGetTop().LoadRatingTables( this );}this.focus();" style='tab-interval:.5in;' >
				#endinline;
			}
			else
			{
				$oApp = SSC_AppObj::oGet_s();
				$sSmtp		= $oApp.sGetData( "sMailServerHostname" );
				$sFromName	= $me.oPerson.sGetLastFirstName();
				$sFromEmail	= $me.oPerson.sGetData( "sEmail" );
				$sToName	= $sFromName;
				$sToEmail	= $sFromEmail;
				$sSubject	= URLEncode( "Review of '" + sGetData( "sDescription" ) + "'" );

				#inline
				<body style='margin-left:.1in;' onbeforeprint='if(window.oGetTop){oGetTop().ShowRatingTables( this );}'
					onafterprint='if(window.oGetTop){oGetTop().ResetRatingTables( this );}' onload="if(window.oGetTop){oGetTop().LoadRatingTables( this );}this.focus();"
					onclick='top.closeCallout();'  >
				#endinline;

					##needed for rich edit fields.
					GetSnippet( "oRichEditMenu" + eoi + "Documentation" );

				#inline
					<div style = "font-family:verdana;text-align:center;color:#666666;" >
						<span class='noprint ActionLink' style = "cursor:pointer;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
							onClick = "top.SendEmailPage( event );" title='Click here to send this page to your email account.'
							sUrlArgs="sSmtp=<%$sSmtp%>&sFromName=<%$sFromName%>&sFromEmail=<%$sFromEmail%>&sToName=<%$sToName%>&sToEmail=<%$sToEmail%>&sSubject=<%$sSubject%>"

						>Email</span>
						<span class='noprint ActionLink' style = "cursor:pointer;margin-left:10px;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
							onClick = "top.ExportToWord( window.location, event, this.ownerDocument.body<% $sShowingWhat == "ActionItemsBlockPageOpening"? ",top.sTableHints( top.currBodyTable )":""%> );"  title='Click here to export this page to Microsoft Word.'>Word</span>
						<span class='noprint ActionLink' style = "cursor:pointer;margin-left:10px;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
							onClick = "top.printCenterPage();"  title='Click here to send this page to a printer.'>Print</span>
					</div>
					<br>
				#endinline;
			};

			## write actual content
			#inline
					<div class="Section1">
						<div class="Document sectionDiv" sRef='<%Ref%>' >
							<div class=Section >
								#endinline;

			break;



		case "StandardWordPageClosing":
			#inline
							</div>
						</div>
					</div>
				</body>
			</html>
			#endinline;

			break;
		case "Indent Div":
			## Indentation Level is set on object context during loGetObjects( "Custom", ... )

			$nLevel = $this.GetContext( "Level", true );

			if ( $nLevel != null )
				$sLevel = ::sIndentMargin($nLevel, 3);
			else
				$sLevel = "0";
			"<div nowrap style='margin-left:" + $sLevel + "in;' >";
			break;

		case "sOwner":
		case "sEditableOwner":

			## check export and editable flag
			$bExport = GetRequest( "sExport" ) != NULL? true:false;

			## locate the owner ROLE
			$oThis = *;

			$sRef = Ref;

			$oRole = SSC_Role::oGetByID_s( "OWNER" );
			$bCanModify = false;

			## look if workflow is required for this object
			$bNeedsWorkflow = bNeedsWorkflowState();
			if ( $bNeedsWorkflow )
				$bNeedsWorkflow = Not bSimpleOwnerEdit();

			if ( ( $oRole != NULLOBJECT ) And ( Not $bNeedsWorkflow ) )
				$bCanModify = bIsEditable();

			if( $bCanModify And Not $bExport )
			{
				$bMultiple = $oRole.bAllowMultiple;

				## check if there is more than one owner possible
				$sNewRequest = "sRoleAssignment" + eoi + "OWNER";;
				if ( $bMultiple )
				{
					## use a different request
					$sNewRequest = "sMultipleRoleAssignment" + eoi + "OWNER";

					## show mini-table of owners
					$loOwners = SSC_Role::loGetByRole_s( $oThis, "OWNER" );
					$sPublisher = $sRef + "~onStatusUpdate~";

					if ( Not IsEmpty( $loOwners ) )
					{
						"<table style='margin-left:-3px;'>";
						$loOwners/
						{
							$oOwner = *;

							#inline
							<tr>
								<td style='text-align:left;'><%sGetName()%>
									<%sBodyLink( "<img title='Edit the field on the left or click here to show the home page of the current owner.' style='margin-bottom:-4px;cursor:pointer;' src='Images/" + $sThemeFolder + "/user14x14.png' >", "Owner" );%>
								</td>
								<td>
									<span class="fakelink" sMethod="RemoveRoleHolderByRef" sRef="<%$oThis.Ref%>"
										sArg1="OWNER" sArg2="<%$oOwner.Ref%>" sArg3="false" publisher="<%$sPublisher%>"
										onclick="top.RunUpdateMethod( this, this.getAttribute('sArg1'), this.getAttribute('sArg2'), this.getAttribute('sArg3') );"  >
										Remove
									</span>
								</td>
							</tr>
							#endinline;
						};
						"</table>";

					};
				};

				## always show drop list
				$sPublisher = $sRef + "~onStatusUpdate~";
				DropList( $sNewRequest, "Owners", "Assign to...", $sPublisher );
			}
			else
				sGetData( "sOwner" );
			break;

		case "RoleAssignment":
		case "MultipleRoleAssignment":

			## check if workflow is in use
			$bNeedsWorkflow = bNeedsWorkflowState();
			if ( $bNeedsWorkflow And $sSupData == "OWNER" )
				$bNeedsWorkflow = Not bSimpleOwnerEdit();

			## role assignment snippet
			$bExport = GetRequest( "sExport" ) != NULL? true:false;
			$bEditable = false;
			if ( Not $bNeedsWorkflow )
				$bEditable = bIsEditable();
			$sRef = Ref;

			## data key for role assignment
			$sDataKey = "s" + $sShowingWhat + eoi + $sSupData;
			$sPublisher = $sRef + "~onRefresh~onRoleAssignment";

			if( $bEditable AND ( NOT $bExport ) )
				DropList( $sDataKey, "Owners", "Choose...", $sPublisher );
			else
				sGetData($sDataKey) ;
			break;

		case "RoleAssignmentWithMultiple":
			##Calls either RoleAssignment or MultipleRoleAssignment (bAllowMultiple)
			##after displaying any already chosen members for the role
			$oThis = *;
			$sRole = $sSupData;
			## get the associated role
			$oRole = SSC_Role::oGetByID_s( $sRole );
			if( $oRole )
			{
				$sSnippet = "RoleAssignment";
				$bMultiple = $oRole.bAllowMultiple;
				if( $bMultiple )
				{
					$sSnippet = "MultipleRoleAssignment";
					$bEditable = False;
					$bNeedsWorkflow = $oThis.bNeedsWorkflowState();
					if ( $bNeedsWorkflow AND $sRole == "OWNER" )
						$bNeedsWorkflow = Not $oThis.bSimpleOwnerEdit();

					$bExport = GetRequest( "sExport" ) != NULL? true:false;
					if ( Not $bNeedsWorkflow And Not $bExport )
						$bEditable = $oThis.bIsEditable();

					## get all current people
					$loRoleHolders = SSC_Role::loGetByRole_s( $oThis, $sRole );
					$sThemeFolder = ::sGetThemeFolder();

					$loRoleHolders/
					{
						$oHolder = *;

						#inline
							<%sGetName()%>
						#endinline;

						if ( $bEditable )
						{
							$sPublisher = $oThis.Ref + "~onRefresh~onRoleAssignment";

							#inline
							<img src="images/<% $sThemeFolder %>/_delete.png"  sMethod="RemoveRoleHolderByRef" sRef="<%$oThis.Ref%>"  title="Remove"
									sArg1="<%$sRole%>" sArg2="<%$oHolder.Ref%>" sArg3="false" publisher="<%$sPublisher%>"
									onclick="top.RunUpdateMethod( this, this.getAttribute('sArg1'), this.getAttribute('sArg2'), this.getAttribute('sArg3') );"  />
							#endinline;
						};
						"<br>";
					};
				};
				GetSnippet( $sSnippet + EOI + $sRole );
			}
			##We add author even when it is not a defined role so there must be a case for it
			else if( $sRole == "AUTHOR" )
			{
				GetSnippet( "RoleAssignment" + EOI + $sRole );
			};
			break;

		case "SpecialContent":

			$sPage = GetDaoContext( "sShowingWhat" );
			if ( $sPage == "Documentation" )
			{
				$bStateTipsOn = GetDaoContext( "bStateTipsOn" );
				if ( $bStateTipsOn )
				{
					GetSnippet( "StateTipsBase" );
				};

				$bReviewTipsOn = GetDaoContext( "bReviewTipsOn" );
				$sActiveReview = GetDaoContext( "sActiveReview" );

				if ( $sActiveReview and $sActiveReview != "" and $bReviewTipsOn )
				{
					GetSnippet( "ReviewContent" );
				};
			};

			break;

		case "ReviewContent":

			$sActiveReview = GetDaoContext( "sActiveReview" );

			if ( $sActiveReview and $sActiveReview != "" )
			{
				$oActiveReview = first( loGetObjects( "Notes", "ReviewCenter" )[ sText == $sActiveReview ] );

				## look for active review
				SetRequest( "oActiveReview", $oActiveReview );

				GetSnippet( "Review_OpinionInfo" );
				GetSnippet( "Review_Feedback" );
				"<br>";
				"<br>";
			};

			break;

		case "Review_OpinionInfo":

			$sActiveReview = GetDaoContext( "sActiveReview" );

			$oActiveReview = GetRequest( "oActiveReview" );

			if ( $oActiveReview )
			{
				$sRefToUse = $oActiveReview.Ref;
				$iMyOpinion = item( $oActiveReview.sGetData( "iMyOpinion" ), 1, 1, eoi );
				$sTally = $oActiveReview.sGetData( "sOpinionTally" );
			}
			else
			{
				$sRefToUse = Ref;
				$iMyOpinion = 0;
				$sTally = "0" + eoi + "0" + eoi + "0" + eoi + "0";
			};

			$iNR = CInt( Item( $sTally, 1, 1, eoi ) );
			$iLG = CInt( Item( $sTally, 2, 2, eoi ) );
			$iNW = CInt( Item( $sTally, 3, 3, eoi ) );
			$iNS = CInt( Item( $sTally, 4, 4, eoi ) );

			$iTotal = $iLG + $iNW + $iNS + $iNR;

			if ( $iTotal == 0 )
			{
				$rLGP = 0;
				$rNWP = 0;
				$rNSP = 0;
				$rNRP = 0;
			}
			else
			{
				$rLGP = CInt( 375 * $iLG Div $iTotal ) Div 100;
				$rNWP = CInt( 375 * $iNW Div $iTotal ) Div 100;
				$rNSP = CInt( 375 * $iNS Div $iTotal ) Div 100;
				$rNRP = CInt( 375 * $iNR Div $iTotal ) Div 100;
			};

			#inline
			<table cellpadding="0" cellspacing="0" style="background-color:#FFFFDD;border-left:.01in solid gray;border-top:.01in solid gray;border-right:.04in solid gray;table-layout:fixed;" >
				<tr>
					<td style="width:.9in;padding-bottom:.1in;" >&nbsp;<u><%$sActiveReview%></u></td>
					<td style="width:1in;" > </td>
					<td style="width:1.05in;" > </td>
					<td style="width:.8in;" > </td>
					<td style="width:1.1in;" > </td>
					<td style="width:100%;"> <td>
				</tr>
				<tr>
					<td style="width:.9in;"  >&nbsp;Your Opinion:<br><br>&nbsp;Summary:</td>
					<td style="width:1in;color:green;text-align:right;" >
						<input type="radio" name="Opinion_<%$sRefToUse%>" sRef="<%$sRefToUse%>" value="1" sItem="iMyOpinion" <%$iMyOpinion==1?"checked":""%> onclick="top.setDataSimple( this );" />Looks Good<br><br><%$iLG%> votes</td>
					<td style="width:1.05in;color:red;text-align:right;" >
						<input type="radio" name="Opinion_<%$sRefToUse%>" sRef="<%$sRefToUse%>" value="2" sItem="iMyOpinion" <%$iMyOpinion==2?"checked":""%> onclick="top.setDataSimple( this );" />Needs Work<br><br><%$iNW%> votes</td>
					<td style="width:.8in;color:#B98B00;text-align:right;" >
						<input type="radio" name="Opinion_<%$sRefToUse%>" sRef="<%$sRefToUse%>" value="3" sItem="iMyOpinion" <%$iMyOpinion==3?"checked":""%> onclick="top.setDataSimple( this );" />Not Sure<br><br><%$iNS%> votes</td>
					<td style="width:1.1in;color:gray;text-align:right;" >
						<input type="radio" name="Opinion_<%$sRefToUse%>" sRef="<%$sRefToUse%>" value="0" sItem="iMyOpinion" <%$iMyOpinion==0?"checked":""%> onclick="top.setDataSimple( this );" />Not Reviewed<br><br><%$iNR%> votes</td>
					<td style="width:100%;"> <td>
				</tr>
				#endinline;
				if ( $iTotal > 0 )
				{
					#inline
					<tr>
						<td colspan=5 style="text-align:right">
							<table cellpadding="0" cellspacing="0" >
								<tr>
									<td >&nbsp;</td>
									<td style="width:<%$rLGP%>in;background-color:#4AA02C;" ></td>
									<td style="width:<%$rNWP%>in;background-color:#FF4A4A;" ></td>
									<td style="width:<%$rNSP%>in;background-color:gold;" ></td>
									<td style="width:<%$rNRP%>in;background-color:gray;" ></td>
								</tr>
							</table>
						</td>
					</tr>
					#endinline;
				};
				#inline
			</table>

			#endinline;

			break;

		case "Review_Feedback":

			$oActiveReview = GetRequest( "oActiveReview" );
			$sActiveReview = GetDaoContext( "sActiveReview" );

			$sReview = "";
			$sSection = "";

			## we might have an active review string context, even when we don't have
			## an object
			if ( $sActiveReview )
			{
				$sReview = $sActiveReview;
				$sSection = "ReviewCenter";
			};

			if ( $oActiveReview )
			{
				$sRefToUse = $oActiveReview.Ref;
				$loChildNotes = $oActiveReview.loNotes;
			}
			else
			{
				$sRefToUse = Ref;
				$loChildNotes = CList();
			};

			#inline
			<div style="width:100%;background-color:#FFFFDD;" >
				<div style="border-left:.01in solid gray;border-right:.04in solid gray;background-color:#FFFFDD;" >
					<br><span>&nbsp;Feedback:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
					<span class="fakelink" onclick="top.NewFeedback(this);" sRef = "<%$sRefToUse%>" iType="1" sReview="<%$sReview%>" sSection="<%$sSection%>" >add comment</span>&nbsp;
					<span class="fakelink" onclick="top.NewFeedback(this);" sRef = "<%$sRefToUse%>" iType="2" sReview="<%$sReview%>" sSection="<%$sSection%>" >question</span>&nbsp;
					<span class="fakelink" onclick="top.NewFeedback(this);" sRef = "<%$sRefToUse%>" iType="3" sReview="<%$sReview%>" sSection="<%$sSection%>" >caution</span>&nbsp;
					<span class="fakelink" onclick="top.NewFeedback(this);" sRef = "<%$sRefToUse%>" iType="4" sReview="<%$sReview%>" sSection="<%$sSection%>" >recommendation</span>&nbsp;
					<br><br>
				</div>
				<div style="border-bottom:.01in solid gray;background-color:#FFFFDD;" >
				<%$loChildNotes/GetSnippet( "NoteWrapper" )%>
				</div>
			</div>
			#endinline;

			break;
		case "Callout_Command":
			$oCommand = CObj( $sSupData );
			if( $oCommand != NULL )
			{
				$sHelp = $oCommand.sGetData( "sCommandHelp" );

				#inline
				<b>HelpTip</b>
				<br><br>
					<%$sHelp%>
				<br>
				#endinline;
			};
			break;
		case "CustomizationTable":
			$oRegistrar = oGetRegistrar();

			$sRequest = $sSupData;

			$sPlugins = "Menu;sMenu='TableMenu'";
			$oRegistrar.GetFlexTable( $sRequest, "table", "Detailed","text-align:left;", "", "","default","Child", "Create", $sPlugins );
			break;
		case "sDescriptionWithIdAndIcon":

			$bMakeEditable = GetRequest( "bMakeEditable" );
			if( $bMakeEditable == NULL )
				$bMakeEditable = true;

			GetSnippet("sIcon");
			$sExport = GetRequest( "sExport" );
			if( $sExport != NULL And $sExport != "Review" )
				sGetData( "sDescription" );
			else
				sGetDecoratedText( "sDescriptionWithID", $bMakeEditable, "" );

			break;
		case "ReloadFMEARow":
			$sRef = Ref;
			$oSection = GetRequest( "oSection" );
			$sSectionRef = $oSection.Ref;
			#inline
			<div style="position:absolute;left:30px;top:48px;width:400px" >
				<center>
					<%GetGenString( "ksLabelRefreshingRow" )%>
				</center>
			</div>

			<iframe id="calloutMsgFrame" name="calloutMsgFrame"  src='GetSnippet.ase?oThis=<%$sRef%>&oSection=<%$sSectionRef%>&oCurrentSection=<%$sSectionRef%>&sShowingWhat=ReloadFMEARow_JS' frameborder=0 scrolling=no
					style="position:absolute;left:.3in;top:.48in;width:4.1in;height:.65in;display:none;"
					></iframe>
			#endinline;
			break;
		case "ReloadFMEARow_JS":
			$sRef = Ref;
			$oSection = GetRequest( "oSection" );
			$sSectionRef = $oSection.Ref;
			#inline
			<script>
				top.ReloadFMEARow( "<%$sRef%>", "<%$sSectionRef%>" );
			</script>
			#endinline;
			break;

		case "RowDetails":
			$nCells = GetRequest( "nColSpan" );
			$oCurSection = GetRequest( "oCurrentSection" );
			$sSecRef = $oCurSection.Ref;
			$sRowDetailSelected = $oCurSection.Context.Get( "sRowDetailSelected", LifeSpan.Session );
			if ( $sRowDetailSelected == null )
			{
				$sChoices = $oCurSection.GetChoices( "sRowDetailChoices" );
				$sChoice = Item( $sChoices, 1, 1, "|" );
				if( $sChoice == "@" )
					$sChoice = Item( $sChoices, 2, 2, "|" );

				$sRowDetailSelected = $sChoice;

				##When a choice has an EOI the first part is the display, don't use that
				$iItemCount = ItemCount($sChoice, EOI);
				if( $iItemCount > 1 ) {
					$sRowDetailSelected = Item($sChoice, 2, $iItemCount, EOI);
				};

				$oCurSection.Context.Set( "sRowDetailSelected", $sRowDetailSelected, LifeSpan.Session );
			};

			$sSnippet = $oCurSection.sGetDataValue( "sRowDetailSnippet" + EOI + $sRowDetailSelected );

			$sURL = "GetSnippet.ase?sShowingWhat=RowDetailsBody&oThis=" + Ref + "&oCurrentSection=" + $sSecRef + "&sSelected=";
			$s = "this.ownerDocument.ReplaceRowDetails( this, '" + $sURL + "' )";

			$oSectionToUse = GetRequest( "oSectionToUse" );
			if( $oSectionToUse == NULL )
				$oSectionToUse = $oCurSection;

			$sURL += "&oSectionToUse=" + $oSectionToUse.Ref;

			#inline
			<tr class="RowDetails" >
				<td colspan="<%$nCells%>" style='padding:.1in;padding-top:.05in;border:1px dashed gray;border-left:1px solid gray;border-right:1px solid gray;' >
					<div class="RowDetailsHeader" style="float:right;">
						#endinline;
						##Allow view only users to use the row details droplist.
						$bEditable = GetRequest( "bIsEditable" + $sSecRef );
						SetRequest( "bIsEditable" + $sSecRef, true );
						$sAdditionalArgs = " sAdditionalArgs='&oSectionToUse=" + $oSectionToUse.Ref + "' ";
						$oCurSection.DropList( "sRowDetailSelected", "sRowDetailChoices", "View...", "", " bSet=false sRefreshMethods=""" + $s + """ " + $sAdditionalArgs );
						SetRequest( "bIsEditable" + $sSecRef, $bEditable );
						#inline
					</div>
					<br>
					<div class="RowDetailsBody" style='width:100%' >
						<%GetSnippet( $sSnippet );%>
					</div>
				</td>
			</tr>
			#endinline;
			break;

		case "RowDetailsBody":

			$oCurSection = GetRequest( "oCurrentSection" );

			$oSectionToUse = GetRequest( "oSectionToUse" );
			if( $oSectionToUse == NULL )
				$oSectionToUse = $oCurSection;

			$sRowDetailSelected = GetRequest( "sSelected" );
			$oCurSection.Context.Set( "sRowDetailSelected", $sRowDetailSelected, LifeSpan.Session );

			$sSnippet = $oSectionToUse.sGetDataValue( "sRowDetailSnippet" + EOI + $sRowDetailSelected );

			GetSnippet( $sSnippet );

			break;

		case "FlexMind Graphical Trace":

			$sFlexId = "Flex_" + replace( WosAseStaticHelper::sCreateGUID_s(), "-", "" );
			#inline
			<div id='FlexEditOuterDiv' style="width:100%; height:7in;">
				<object id="<%$sFlexId%>" codebase="FlexEdit.cab#Version=1,4,29,0" data="FlexEdit.cab#Version=1,4,29,0" classid="CLSID:FA3EA0AD-4E2C-4D60-A7E3-160F2B559AD0" height="100%" width="100%" border="0"><% GetGenString("ksRequiresActiveX") %></object>
				<script for="<%$sFlexId%>" event="OnLoad()" language=javascript>
					sHost = document.URL;
					document.getElementById("<%$sFlexId%>").height="100%";
					if (sHost !== "about:blank") {
						if (document.getElementById("<%$sFlexId%>").readyState === 4) {
							document.getElementById("<%$sFlexId%>").LoadData2( sHost, "GetSnippet.ase?oThis=<% Ref %>&sShowingWhat=FlexMindXML&sRequest=&sContext=&sNodeStyle=" );
						} else {
							var iInt = setInterval( function() {
								if (document.getElementById("<%$sFlexId%>").readyState === 4) {
									document.getElementById("<%$sFlexId%>").LoadData2( sHost, "GetSnippet.ase?oThis=<% Ref %>&sShowingWhat=FlexMindXML&sRequest=&sContext=&sNodeStyle=" );
									clearInterval( iInt );
								}
							}, 1 );
						}
					}
				</script>
			</div>

			#endinline;

			break;

		case "Graphical Trace":

			$sDiagramId = "STIG_" + replace( WosAseStaticHelper::sCreateGUID_s(), "-", "" );
			$sSource = "StigDump.ase";
			$sArgs = "&sStigType=supernode";
			$sLoadingMessage = "Please wait while data is loading";

			#inline
			<link rel="stylesheet" href="styles/stig.css">

			<!-- jQuery -->
			<script type="text/javascript" src="scripts/jquery.min.js"></script>
			<!-- GoJS (Debug). Should use production version if deployed -->
			<script type="text/javascript" src="Frameworks/GoJS/go-debug.js"></script>

			<!-- STIG library -->
			<script type="text/javascript" src="scripts/stig-lib.js"></script>
			<script type="text/javascript" src="scripts/stig-active.js"></script>
			#endinline;

			#inline
			<div id="StigOuterDiv" style="width: 100%; height: 7in;">
				<script type="text/javascript">
					$(function() {
						var diagramId = "<%$sDiagramId%>"; // the ID for STIG-lib to locate the diagram
						var stigRef = "<%Ref%>"; // the Ref for the root node
						var stigShouldPrompt = true; // if the window should prompt for the Ref manually (FALSE)
						var stigAltSource = "<%$sSource%>"; // the alternative ASE file to get JSON from
						var stigAltArgs = "<%$sArgs%>"; // URL arguments to be passed at the end

						console.log("Using diagram id", [diagramId]);
						console.log("Using stig ref", [stigRef]);

						registerDiagram(diagramId, stigAltSource, stigAltArgs, stigRef);
					});
				</script>
				#endinline;

				#inline
				<div id="<%$sDiagramId%>_stigContent" class="stigContent">
				  <!-- Content to be displayed during loading -->
				  <div id="<%$sDiagramId%>_stigOverlay" class="stigOverlay">
				    <div class="stigLoader"></div>
				    <%$sLoadingMessage%>
				  </div>

					<!-- Auto populated with the diagram canvas -->
					<div id="<%$sDiagramId%>" class="diagramDiv"></div>
					<!-- The context menu opened by right click -->
					<div id="<%$sDiagramId%>_stigContextMenuWrapper" onmouseleave="cxCloseAllMenus(event)">
				    <div id="<%$sDiagramId%>_stigContextMenu" class="stigContextMenu">
				      <ul>
				        <li id="<%$sDiagramId%>_cxFind" onclick="cxCommand(event)" onmouseenter="cxCloseOtherMenus(event)"><a target="_self">Find (Ctrl-F)</a></li>
				        <li id="<%$sDiagramId%>_cxCopyImage" onclick="document.execCommand('copy'); cxCommand(event)" onmouseenter="cxCloseOtherMenus(event)"><a target="_self">Copy as Image</a></li>
				        <li id="<%$sDiagramId%>_cxExport" onclick="cxCommand(event)" onmouseenter="cxCloseOtherMenus(event)"><a target="_self">Export</a></li>
				        <li id="<%$sDiagramId%>_cxPrint" onclick="cxCommand(event)" onmouseenter="cxCloseOtherMenus(event)"><a target="_self">Print (Ctrl-P)</a></li>
				        <li id="<%$sDiagramId%>_cxExpandCollapse" class="stigHasSubMenu" onmouseenter="cxCommand(event, true)"><a target="_self">Expand/Collapse &#9658;</a></li>
				        <li id="<%$sDiagramId%>_cxRealign" onclick="cxCommand(event)" onmouseenter="cxCloseOtherMenus(event)"><a target="_self">Realign</a></li>
				        <li id="<%$sDiagramId%>_cxTextAlignment" onclick="cxCommand(event)" onmouseenter="cxCloseOtherMenus(event)"><a target="_self">Align Text</a></li>
				        <li id="<%$sDiagramId%>_cxNodeSize" onclick="cxCommand(event)" onmouseenter="cxCloseOtherMenus(event)"><a target="_self">Node Size</a></li>
				      </ul>
				    </div>
				    <div id="<%$sDiagramId%>_cxExpandCollapseSubMenu" class="stigContextMenu">
				      <ul>
				        <li id="<%$sDiagramId%>_cxExpandCollapseSubMenuCollapseLevel" onclick="cxCommand(event)">
				          <a target="_self">Collapse Level</a>
				        </li>
				        <li id="<%$sDiagramId%>_cxExpandCollapseSubMenuCollapseAll" onclick="cxCommand(event)">
				          <a target="_self">Collapse All</a>
				        </li>
				        <li id="<%$sDiagramId%>_cxExpandCollapseSubMenuExpandLevel" onclick="cxCommand(event)">
				          <a target="_self">Expand Level</a>
				        </li>
				        <li id="<%$sDiagramId%>_cxExpandCollapseSubMenuExpandAll" onclick="cxCommand(event)">
				          <a target="_self">Expand All</a>
				        </li>
				      </ul>
				    </div>
				  </div>

					<!-- Only visible as print media -->
					<div id="<%$sDiagramId%>_stigPrintView" class="stigPrintView"></div>
				</div>
			</div>
			#endinline;

			break;

		case "FMEA Line Item_Table":
			$oSection = GetRequest( "oSection" );
			SetThreadContext( "oCurrentSection", $oSection );

			#inline
			<table>
			#endinline;
				GetSnippet( "FMEA Line Item" );
			#inline
			</table>
			#endinline;
			break;
		case "Adhoc FMEA Line Item":
			$bRenderNonEdit = GetRequest( "bRenderNonEdit" );
			if( $bRenderNonEdit == NULL )
				$bRenderNonEdit = false;
			if( $bRenderNonEdit )
			{
				$thread.Context.Set( "bRenderNonEdit", true );
				$thread.Context.Set( "bCacheData", true );
				$thread.Context.Set( "bUseStaticColorForIcons", true );
			};

			$lsFMEADef = GetRequest( "lsFMEADef" );
			$sParentItemKey = GetRequest( "sParentItemKey" );
			$sCurrItemKey = GetRequest( "sCurrItemKey" );
			$nLevel = CInt( GetRequest( "nFMEALevel" ) );
			$lsKeywordStack = GetRequest( "lsKeywordStack" );
			$lsRefStack = GetRequest( "lsRefStack" );
			$sFMEAName = GetRequest( "sFMEAName" );

			$oSection = CObj( First( $lsRefStack ) );

			$oCurrentSection = GetThreadContext( "oCurrentSection" );
			if( $oCurrentSection == NULL )
				SetThreadContext( "oCurrentSection", $oSection );

			##cache this so we don't have to re-parse it every time we render a row
			$ssToProcess = $oSection.Context.Get( "ssToProcess" + EOI + $sParentItemKey + EOI + $sCurrItemKey, Lifespan.Request );

			if( $ssToProcess == NULL )
			{
				$ssToProcess = CSet();

				## the key of the object type we are rendering
				$lsFMEADef/
				{
					$sDef = *;

					$sObjectRequest = Item( $sDef, 1, 1, "|" );
					$sKeyword = Item( $sDef, 5, 5, "|" );

					if( find( $sObjectRequest, EOI ) != -1 )
						$sObjectRequest = Item( $sObjectRequest, 1, 1, EOI );

					if( $sObjectRequest == $sCurrItemKey )
						$ssToProcess << $sDef;

					##used to encode a custom filter in the encoding
					if( find( $sObjectRequest, "::" ) != -1 )
					{
						$sObjectRequest = Replace( $sObjectRequest, "::", EOI );
					};

					$sParentKey = "";
					if( find( $sObjectRequest, ":" ) != -1 )
					{
						$sParentKey = Item( $sObjectRequest, 2, 2, ":" );
						$sObjectRequest = Item( $sObjectRequest, 1, 1, ":" );
					};


					##only allow one $sNextKey per call to body
					if( $sParentKey == $sParentItemKey AND $sKeyword == $sCurrItemKey )
						$ssToProcess << $sDef;
				};

				$oSection.Context.Set( "ssToProcess" + EOI + $sParentItemKey + EOI + $sCurrItemKey, $ssToProcess, Lifespan.Request );
			};

			Adhoc_FMEA_Line_Item( $sFMEAName, $lsFMEADef, $lsRefStack, $lsKeywordStack, $sParentItemKey, $sCurrItemKey, $ssToProcess, $nLevel );


			SetRequest( "lsFMEADef", $lsFMEADef );
			SetRequest( "sParentItemKey", $sParentItemKey );
			SetRequest( "nFMEALevel", $nLevel );
			SetRequest( "lsKeywordStack", $lsKeywordStack );
			setRequest( "lsRefStack", $lsRefStack );
			SetRequest( "sCurrItemKey", $sCurrItemKey );
			SetRequest( "sFMEAName", $sFMEAName );
			break;
		case "Adhoc FMEA Line Item_Table":
			$bRenderNonEdit = GetRequest( "bRenderNonEdit" );
			if( $bRenderNonEdit == NULL )
				$bRenderNonEdit = false;
			if( $bRenderNonEdit )
			{
				$thread.Context.Set( "bRenderNonEdit", true );
				$thread.Context.Set( "bCacheData", true );
				$thread.Context.Set( "bUseStaticColorForIcons", true );
			};

			#inline
			<div>
			#endinline;

			GetSnippet( "Adhoc FMEA Line Item" );

			#inline
			</div>
			#endinline;
			break;
		case "sDefaultPageSize":
			$sRef = Ref;
			DropList( "sDefaultPageSize", "DefaultPageSizes", "Choose Page Size...", $sRef + "~onRefresh~DefaultCustomPageSizeSettings" );
			GetPublisherSnippet( "DefaultCustomPageSizeSettings", $sRef + "~onRefresh~DefaultCustomPageSizeSettings" );
			break;
		case "DefaultCustomPageSizeSettings":
			$sPageSize = sGetData( "sDefaultPageSize" );
			if( $sPageSize == "Custom" )
				GetTableForm( "DefaultCustomPageSizeSettings" );
			break;
		case "WorkflowRoleAssignmentTable":
			$oThis = *;
			## get roles available for this item
			$lsRoles = lsGetAvailableRoles();

			if ( Not IsEmpty( $lsRoles ) )
			{

				#inline
				<div class="FormalTable">
					<table class="FT_Table" style="table-layout:fixed;width:5in;" >
						<col style="width:2in;" />
						<col style="width:3in;" />
						<thead>
							<td class="FT_Header" >Role</td>
							<td class="FT_Header" >Members</td>
						</thead>
						</tbody>
				#endinline;

				## go through roles and build assignment table
				$lsRoles/
				{
					$sRole = *;
					$sNiceRole = SSC_Role::sGetNiceRoleName_s( $sRole );

					#inline
							<tr>
								<td class="FT_Cell"><%$sNiceRole%></td>
								<td class="FT_Cell">
									<%$oThis.GetSnippet( "RoleAssignmentWithMultiple" + EOI + $sRole )%>
								</td>
							</tr>
					#endinline;

				};

				#inline
						</tbody>
					</table>
				</div>
				#endinline;
			}
			else
			{
				"No Roles Available.";
			};
			break;
		case "Row Detail Table":
			$oSection = GetThreadContext( "oCurrentSection" );
			$sRowDetailSelected = $oSection.Context.Get( "sRowDetailSelected", LifeSpan.Session );

			$sRequest = $oSection.sGetDataValue( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sRequest" );
			if( $sRequest == "Custom Request" )
				$sRequest = "Custom";
			$sTableDef = $oSection.sGetDataValue( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sTableDef" );
			$sFilter = $oSection.sGetDataValue( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sFilter" );
			$sGrouping = $oSection.sGetDataValue( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sGrouping" );
			$sTheme = $oSection.sGetDataValue( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sTheme" );
			$sScope = $oSection.sGetDataValue( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sScope" );
			if( $sScope == "" )
				$sScope = "Child";

			$sTag = sGetTagTypeFromRequest( $sRequest );

			$sPlugins = "";

			$mssArgs = CMap( CList(), CList() );

			$sCreatable = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatCreatable" );
			$sCreatable = $sRequest ~ "m/Custom/" ? "" : $sCreatable;

			if( $sCreatable != "" )
			{
				## add subtype
				$sSubType = Item( $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatSubType" ), 1, 1, EOI );
				$sAdderHints = sGetSubTypeHint( $sRequest, $sSubType );

				SetRequest( "sAdderHints", $sAdderHints );

				$sPlugins = "RapidAdder;sAdderTag='" + $sTag + "';";
				$mssArgs << $oSection.mssGetRapidAdderArgs_RowDetails( $oSection, $sRowDetailSelected, "" );
			};

			GetFlexTable( $sRequest, "table", $sTableDef,"", $sGrouping, $sFilter, $sTheme, $sScope, "none", $sPlugins, "", $mssArgs );

			break;
		case "Row Detail 2-Way Trace":
			$nColumns = 2;
			$oSection = GetThreadContext( "oCurrentSection" );
			$sRowDetailSelected = $oSection.Context.Get( "sRowDetailSelected", LifeSpan.Session );

			$sKind1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatKind" );

			$sBaseKind1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatBaseKind" );
			$sKindToRequest1 = $sKind1 ~ "m/Custom/" ? "Custom" : $sBaseKind1;

			$sScope1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatBaseScope" );

			$sKind2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatKind2" );
			$sBaseKind2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatBaseKind2" );
			$sKindToRequest2 = $sKind2 ~ "m/Custom/" ? "Custom" : $sBaseKind2;

			$sScope2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatBaseScope2" );

			$sTitle1 = trim( $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatTitle" ) );
			$sTitle2 = trim( $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatTitle2" ) );
			if ( $sTitle1 == "" )
			{
				$sTitle1 = $sKind1;
				if( find( $sTitle1, EOI ) != -1 )
					$sTitle1 = Item( $sTitle1, 1, 1, EOI );
			};

			if ( $sTitle2 == "" )
			{
				$sTitle2 = $sKind2;
				if( find( $sTitle2, EOI ) != -1 )
					$sTitle2 = Item( $sTitle2, 1, 1, EOI );
			};

			$sColWidth1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatColWidth" );
			$sColWidth2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatColWidth2" );
			## Need to get the export flag because we only want to convert the values if exporting
			$sExport = GetRequest( "sExport" );
			if ( $sExport == NULL ) $sExport = "";
			if ( $sExport != "" AND ( Upper( $sExport ) == "WORD" Or $sExport == "DirectPDF") )
			{
				$nPageWidth = nAvailablePageWidth();
				$sColWidth1 = ::sCSSValueToInches( $sColWidth1, $nPageWidth );
				$sColWidth2 = ::sCSSValueToInches( $sColWidth2, $nPageWidth );
			};

			$sData1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatData" );
			if( find( $sData1, EOI ) != -1 )
				$sData1 = Item( $sData1, 1, Itemcount( $sData1, EOI )-1, EOI );

			$sData2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatData2" );
			if( find( $sData2, EOI ) != -1 )
				$sData2 = Item( $sData2, 1, Itemcount( $sData2, EOI )-1, EOI );

			$sGrouping1 = "";
			$sGrouping2 = "";

			$sFilter1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatFilter" );

			if( find( $sFilter1, EOI ) != -1 )
				$sFilter1 = Item( $sFilter1, 1, Itemcount( $sFilter1, EOI )-1, EOI );


			$sFilter2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatFilter2" );
			if( find( $sFilter2, EOI ) != -1 )
				$sFilter2 = Item( $sFilter2, 1, Itemcount( $sFilter2, EOI )-1, EOI );

			$sSorting1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatSorting" );
			if( find( $sSorting1, EOI ) != -1 )
				$sSorting1 = Item( $sSorting1, 1, Itemcount( $sSorting1, EOI )-1, EOI );

			$sSorting2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatSorting2" );
			if( find( $sSorting2, EOI ) != -1 )
				$sSorting2 = Item( $sSorting2, 1, Itemcount( $sSorting2, EOI )-1, EOI );

			$sTag1 = sGetTagTypeFromRequest( $sBaseKind1 );
			$sTag2 = sGetTagTypeFromRequest( $sBaseKind2 );

			$sReorderable1 = "";
			$sReorderable2 = "";


			$sCreatable1 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatCreatable" );
			$sCreatable1 = $sKind1 ~ "m/Custom/" ? "" : $sCreatable1;

			$sCreatable2 = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatCreatable2" );
			$sCreatable2 = $sKind2 ~ "m/Custom/" ? "" : $sCreatable2;

			$oToRegisterWith1 = $this;

			## if requested, autoregister with the section of the document.
			## For virtual sections, we will have an override set to the root section, meaning
			## we will register with the section which asked for its children to be virtual, not
			## the children themselves.
			$oToRegisterWith2 = NullObject;

			## add the basic parameters to the map
			$mssParameters = CMap( CList(), CList() );
			$mssParameters = mssGetAdHocTraceParameters( $mssParameters, 1, $sKindToRequest1, $sScope1, $sTitle1, $sData1, $sColWidth1, $sFilter1, $sGrouping1, $sSorting1, $sTag1, $sCreatable1 );

			$mssParameters = mssGetAdHocTraceParameters( $mssParameters, 2, $sKindToRequest2, $sScope2, $sTitle2, $sData2, $sColWidth2, $sFilter2, $sGrouping2, $sSorting2, $sTag2, $sCreatable2 );

			## add subtype
			$sSubType1 = Item( $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatSubType" ), 1, 1, EOI );
			$sSubType2 = Item( $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatSubType2" ), 1, 1, EOI );
			$mssParameters = mssAddCustomAdHocTraceParameters( $mssParameters, "sSubType1", $sSubType1 );
			$mssParameters = mssAddCustomAdHocTraceParameters( $mssParameters, "sSubType2", $sSubType2 );

			## add register objects
			$mssParameters = mssAddCustomAdHocTraceParameters( $mssParameters, "oToRegisterWith1", $oToRegisterWith1.Ref );
			if ($oToRegisterWith2) $mssParameters = mssAddCustomAdHocTraceParameters( $mssParameters, "oToRegisterWith2", $oToRegisterWith2.Ref );

			$sCurrentSection = $this.Ref;
			$mssParameters = mssAddCustomAdHocTraceParameters( $mssParameters, "oCurrentSection", $oSection.Ref );

			##Additional influence over Rapid Adder
			$mssArgs1 = CMap( CList(), CList() );
			$mssArgs1 << mssGetRapidAdderArgs_RowDetails( $oSection, $sRowDetailSelected, "" );

			$mssArgs2 = CMap( CList(), CList() );
			$mssArgs2 << mssGetRapidAdderArgs_RowDetails( $oSection, $sRowDetailSelected, "2" );

			##Additional influence over Rapid Adder
			$mssArgs3 = CMap( CList(), CList() );

			##Additional influence over Rapid Adder
			$mssArgs4 = CMap( CList(), CList() );

			$sTheme = "RowDetailTable";

			GetAdHocTrace( $nColumns, $mssParameters, $sTheme, $mssArgs1, $mssArgs2, $mssArgs3, $mssArgs4 );
			break;
		case "GetDerivedDifferences":
			DisplayDerivedDifferences( CObj( $sSupData ) );
			break;
		case "GetDerivedDifferences_TopLevel":
			DisplayDerivedDifferences( CObj( $sSupData ), true );
			break;
		case "Title Links":
			GetSnippet("Project Home Link");
			break;
		case "Project Home Link":
			if( $this.ClassName != "SSC_Project" ) {
				$oProject = $this.oGetProject();

				if( $oProject ) {
					$sRef = $oProject.Ref;
					#inline
						<span class='noprint ActionLink' onClick="top.oView.HoistIfToc(top.oView.sCurrentToc, '<%$sRef%>');top.link('GetBodyPage.ase?oThis=<%$sRef%>&sShowingWhat=Home', 'body')">
							Project Home</span>
					#endinline;
				};
			};
			break;
		default:
			super::GetSnippet_Builtin( $sOriginalRequest );

			break;
	};
}

##===========================================================================
## lsGetSnippetList_Builtin
##===========================================================================
variant SSC_DBObj::lsGetSnippetList_Builtin()
{
	$lsRetval = CList();
	$lsRetval << "DetailedDescription|Detailed Description";
	$lsRetval << "RoleSelection|Role Selection";
	$lsRetval << "Derived Differences Link|Derived Differences Link";
	$lsRetval << "sDescriptionWithProjectName|Item Name Qualified by Project Name";
	$lsRetval << "sDescriptionWithProjectNameAndVersion|Item Name Qualified by Project Name And Version";

	## Get Parent class options
	$lsParentVal = super::lsGetSnippetList_Builtin();
	$lsParentVal/{
		$lsRetval << *;
	};
	##Remove duplicates
	$lsRetval = GetUnique($lsRetval);
	return $lsRetval;
}
##===========================================================================
## GetChoices_Builtin
##===========================================================================
variant SSC_DBObj::GetChoices_Builtin( $sShowingWhat )
{
	$sResponse = "";

	$sOriginalRequest = $sShowingWhat;

	$sSupData = "";
	if( find( $sShowingWhat, EOI ) != -1 )
	{
		$sSupData = Item( $sShowingWhat, 2, 2, EOI );
		$sShowingWhat = Item( $sShowingWhat, 1, 1, EOI );
	};

	switch( $sShowingWhat )
	{
		case "sViewDefinition":
			$sResponse = "@||";

			## Find the ViewDef documents
			$oProject = $this.oGetProject();
			$loViewDefs = $oProject.loGetViewDefinitions();
			$lsViewDefs = $loViewDefs/sGetDescription();
			if (Not IsEmpty($lsViewDefs)) {
				$sResponse += join( $lsViewDefs, "|" );
			};
			break;

		case "sAllowFormatOverride":
			$sResponse = "@|Allow the selected format to be overridden|Keep the selected format and don't allow override";
			break;

		case "AutoUpdateMode":
			$sResponse = "On|Off";
			break;

		case "sCustomValuePrompt":

			$oProject = $this.oGetProject();

			$loRows << $oProject.loGetUDAsByClass( $this.classname )[ sGetName() == $sSupData ];

			$oUDA = first( $loRows );

			if( $oUDA == null )
				$sResponse = "ATTR NOT DEFINED";
			else
			{
				$sVal = $this.sGetData( $oUDA.sName );
				if( ( $sVal == "" ) AND ( $oUDA.bHasDefaultValue() ) )
					$sVal = $oUDA.sGetDefaultValue();

				$vsPickList = CVector( $sVal );
				$vsPickList2 = CVector( $oUDA.vsGetPickFrom( $this ) );
				$vsPickList2 = $vsPickList2 -- $vsPickList;
				$vsPickList << $vsPickList2;
			};

			$sResponse = join( $vsPickList, "|" );
			break;

		case "sNumberFormatType":
			$sResponse = "Fixed|Floating|Scientific|Exponential";
			break;
		case "UDAs":
			$oApp = SSC_AppObj::oGet_s();

			$oThis = *;
			$oRegistrar = oGetLocalRegistrar();

			$loRows = AseAttribute::loGetUDAsByClass_s( $oThis.classname, $oRegistrar );

			$lsTemp = CList();
			$loRows/
			{
				$sDescription = *.sGetData( "sDescription" );
				$lsTemp << $sDescription + EOI + *.sGetData( "sKey" ) + EOI + $sDescription;
			};

			$sResponse = "@||" + join( $lsTemp, "|" );
			break;

		case "ObjectChoices":

			$sResponse = "";

			try
			{
				## get the information off the request and prepare a single string called $sCustomScope

				$sCustomScope = "";

				$sChoicesRequest = GetRequest( "sChoicesRequest" );

				if ( $sChoicesRequest == null or $sChoicesRequest == "" )
				{
					$sChoicesRequest = "";
					throw "";
				};

				## now, let's use our fancy new loGetObjects kind called "Custom"
				$loObjects = loGetObjects( "Custom", $sChoicesRequest );

				$sChoicesFilter = GetRequest( "sChoicesFilter" );
				if( $sChoicesFilter != NULL )
				{
					$loObjects = loFilterList( $loObjects, GetFilter( $sChoicesFilter ), true );
				};


				## should we force the browser to re-get the choices each time?
				##$sReloadOption = "@|";	## this will force a reget from the server
				$sReloadOption = "";		## this will not

				$loObjects/
				{
					## the item should look like |Description eoi Display eoi =Ref|
					$sResponse += $iternum==0 ? $sReloadOption : "|";
					$sResponse2 = sGetData( "sQualifiedDescription" );
					$sResponse2 = replace( $sResponse2, eoi, eoi+sGetIconTag( "14x14", "", " style='margin-right:0.025in' " ) );
					$sResponse2 += eoi + "=" + Ref;
					##Replace any pipes since they would be interpreted as the end of the choice
					##accidentally leading to all sorts of issues.
					$sResponse += replace( $sResponse2, "|", "_" ); ## THESE ARE REFS
				};
			}
			catch( $sError )
			{
				throw( "Error: Auto-complete request '" + $sChoicesRequest + "' had an error. Please review it on the details page." );
			};

			break;

		case "ActiveReportingSection":
			## If a requirement use it to get sections
			if ( $this.className == "SSC_SysReq" ) {
				$vsDataSects = $this.vsGetDataSections("Reporting")
			} else {
				$oProject = oGetProject();
				$vsDataSects = $oProject.vsGetDataSectionsForScorecard();
			};
			$nTotalSects = Count( $vsDataSects );

			$lsSectionChoices = CList();

			$vsDataSects/
			{
				$lsData = Split( *,"|" );
				switch( pick( $lsData,1 ) )
				{
					case 2:
						$lsSectionChoices << pick( $lsData, 0 ) + " - Design";
					break;
					case 3:
						$lsSectionChoices << pick( $lsData, 0 ) + " - Process";
					break;
					case 4:
						$lsSectionChoices << pick( $lsData, 0 ) + " - Test";
					break;
				};
			};
			$sResponse = "@|" + join( $lsSectionChoices, "|" );
			break;

		case "sWorkflowState":
			$sResponse = "@|";

			## get current state
			$oState = oGetWorkflowState();

			if ( $oState != NULLOBJECT )
			{
				## add the current state
				$sResponse += $oState.sDescription + eoi + $oState.sRefID;

				## get the successor states
				$vsStates = $oState.vsGetSuccessorStates();
				if ( Not IsEmpty( $vsStates ) )
					$sResponse += "|" + join( $vsStates, "|" );
			}
			else
			{
				## get the default state from the process
				$oProcess = oGetWorkflowProcess();
				if ( $oProcess != NULLOBJECT )
				{
					$oState = $oProcess.oDefaultState;
					if ( $oState != NULLOBJECT )
					{
						## add the default state
						$sResponse += $oState.sDescription + eoi + $oState.sRefID;
					};
				};
			};

			break;

		case "sSectionTypes":
			$sResponse += "Design|Target|Test|Process";
			break;
		case "sAvailability":
			$sResponse += "Disabled|Enabled|Optional";
			break;
		case "sDataSectionAvailability":
			$lsReqTypes = SSC_AppObj::wvsGetAllowableObjTypes_s( "SSC_SysReq" );
			$sResponse = join( $lsReqTypes, "|" );
			break;
		case "Users":
			$oProject = ::oProjectCurrentlyBeingViewed();
			if( COG_Base::bIsAvailable( $oProject ) )
			{
				$lsUserNames = $oProject.loGetObjects_b( "People", "Children" )/ sGetData( "sDescription" );
				$sResponse = join( $lsUserNames, "|" );
			}
			else
				$sResponse = "";
			break;

		case "UsersInTheProjectWithLoginRights":
			$oProject = ::oProjectCurrentlyBeingViewed();
			if( COG_Base::bIsAvailable( $oProject ) )
			{
				$lsUserNames = $oProject.loGetObjects_b( "People", "Children" )[ bLoginUser ]/ sGetData( "sDescription" );
				$sResponse = "@|" + join( $lsUserNames, "|" );
			}
			else
				$sResponse = "@|";
			break;
		case "Projects":
			$sResponse = join( /'Data*'/SSC_Project[bIsLatestVersion(false)]/sDescription, "|" );
			break;
		case "bExecutable":
			$sResponse = "True|False";
		break;
		case "LoginOwners":
		case "Owners":
			$bLoginRequired = false;
			if ( $sShowingWhat == "LoginOwners" )
				$bLoginRequired = true;
			$lsOwners = CList();

			## specially handle project object case
			$oPM = oGetProjectManager();

			if ( $oPM == NULLOBJECT )
			{
				## add all people
				if ( $bLoginRequired )
					$lsOwners << /'Data Vault 1/'/SSC_Person[Not bDeleted][bLoginAllowed AND bLoginUser]/sGetName();
				else
					$lsOwners << /'Data Vault 1/'/SSC_Person[Not bDeleted][bLoginAllowed]/sGetName();

				## add all global groups
				$lsOwners << /'Data Vault 1/'/SSC_Group[Not bDeleted][ sProject == "" ]/( "G:" + sGetName() );
			}
			else
			{
				$oOwner = oGetOwner();
				$oTeam = $oPM.oTeam;

				## Start with all the direct users and groups with any access
				$loPossibleOwners = loGetObjects_b( "PRIVILEGEHOLDERS", "CHILDREN" );

				## get all subitems (People and groups) uniquely
				## Error level needs to be 0 because not all objects will have a cMembers
				$olderrorlevel = $errorlevel;
				$errorlevel = 0;
				$loPossibleOwners//cMembers;
				$errorlevel = $olderrorlevel;
				$loPossibleOwners = GetUnique( $loPossibleOwners );

				$sProjID = $oPM.'sName/ID';

				$lsKeys = CList();
				$lsValues = CList();

				## correct any names
				$loPossibleOwners/{
					$oPossible = *;
					$sKey = "";
					$sName = $oPossible.sGetName();
					if ( $oPossible.Classname == "SSC_Group" AND NOT $oPossible.bIsDisabled() )	{
						$sProj = *.sProject;
						if ( $sProj == "" )	{
							$sKey = "3" + EOI + upper( $sName );
							$sName = "G:" + $sName;
						} else if ( $sProj == $sProjID ) {
							$sKey = "2" + EOI + upper( $sName );
							$sName = "T:" + $sName;
						} else {
							$sKey = "";
						};

					} else if ( $oPossible.Classname == "SSC_Person" AND NOT $oPossible.bIsDisabled() )	{
						if ( (NOT $bLoginRequired) OR bLoginUser )
							$sKey = "1" + EOI + upper( $sName );
					};

					if ( $sKey != "" ) {
						$lsKeys << $sKey;
						$lsValues << $sName;
					};
				};

				$lsOwners = CMap( $lsKeys, $lsValues );
			};

			$sResponse = join( $lsOwners , "|" );
			$sResponse = "@|" + $sResponse;

			break;

		case "sSectionFormatChartAttribute_1":
		case "sSectionFormatChartAttribute_2":
		case "sSectionFormatChartAttribute_3":
		case "sSectionFormatChartAttribute_4":



			## what kink of chart is this?
			$sGraphTypeRequest = replace( $sShowingWhat, "ChartAttribute", "ChartGraph" );
			$sGraphType = sGetData( $sGraphTypeRequest );

			if ( $sGraphType == "Hor. Stacked Bar Chart" )
			{
				$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartObjectRequest" );
				$sCustomRequest = sGetData( $sRequestToUse );

				$nCnt = ItemCount( $sCustomRequest, "/" );
				$sItem = Item( $sCustomRequest, $nCnt, $nCnt, "/" );
				$sKind = Item( $sItem, 1, 1, "," );
				$sKind = trim( $sKind );
			}
			else
			{
				$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartKind" );
				$sKind = sGetData( $sRequestToUse );
				if ( $sKind ~ "m/Custom Request/" )
				{
					$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartCustomRequest" );
					$sCustomRequest = sGetData( $sRequestToUse );

					$nCnt = ItemCount( $sCustomRequest, "/" );
					$sItem = Item( $sCustomRequest, $nCnt, $nCnt, "/" );
					$sKind = Item( $sItem, 1, 1, "," );
					$sKind = trim( $sKind );
				};
			};

			if ( $sGraphType == "Bubble Chart" )
				$sChoices = sGetData( "Chart Attribute Choices - Bubble Y" + eoi + $sKind );
			else if ( $sGraphType == "Hor. Stacked Bar Chart" )
				$sChoices = sGetData( "Chart Attribute Choices - Stacked Bar" + eoi + $sKind );
			else
				$sChoices = sGetData( "Chart Attribute Choices" + eoi + $sKind );

			## return the choices
			if ( trim( $sChoices ) == "" )
			{
				if ( $sGraphType == "Bubble Chart" )
				{
					$sResponse = "@|Bubble Reward";
				}
				else if ( $sGraphType == "Hor. Stacked Bar Chart" )
				{
					$sResponse = "@|";
				}
				else
				{
					## this handles all other chart types (pie,horbar,stackhorbar)
					$sResponse = "@|Last Modified|Status Color";
				};
			}
			else
				$sResponse = $sChoices;

			break;

		case "sSectionFormatChartAttribute2_1":
		case "sSectionFormatChartAttribute2_2":
		case "sSectionFormatChartAttribute2_3":
		case "sSectionFormatChartAttribute2_4":

			## what kind of object are they working with
			$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartKind" );
			$sKind = sGetData( $sRequestToUse );
			if ( $sKind ~ "m/Custom Request/" )
			{
				$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartCustomRequest" );
				$sCustomRequest = sGetData( $sRequestToUse );

				$nCnt = ItemCount( $sCustomRequest, "/" );
				$sItem = Item( $sCustomRequest, $nCnt, $nCnt, "/" );
				$sKind = Item( $sItem, 1, 1, "," );
				$sKind = trim( $sKind );
			};

			## simple default list. Fully expect UDR's to override to create a larger list
			$sChoices = sGetData( "Chart Attribute Choices - Bubble X" + eoi + $sKind );
			if ( trim( $sChoices ) == "" )
				$sResponse = "@|Bubble Risk";
			else
				$sResponse = $sChoices;

			break;

		case "sSectionFormatChartAttribute3_1":
		case "sSectionFormatChartAttribute3_2":
		case "sSectionFormatChartAttribute3_3":
		case "sSectionFormatChartAttribute3_4":

			## what kind of object are they working with
			$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartKind" );
			$sKind = sGetData( $sRequestToUse );
			if ( $sKind ~ "m/Custom Request/" )
			{
				$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartCustomRequest" );
				$sCustomRequest = sGetData( $sRequestToUse );

				$nCnt = ItemCount( $sCustomRequest, "/" );
				$sItem = Item( $sCustomRequest, $nCnt, $nCnt, "/" );
				$sKind = Item( $sItem, 1, 1, "," );
				$sKind = trim( $sKind );
			};

			## simple default list. Fully expect UDR's to override to create a larger list
			$sChoices = sGetData( "Chart Attribute Choices - Bubble Size" + eoi + $sKind );
			if ( trim( $sChoices ) == "" )
				$sResponse = "@|Bubble Size";
			else
				$sResponse = $sChoices;

			break;

		case "sSectionFormatChartAttribute4_1":
		case "sSectionFormatChartAttribute4_2":
		case "sSectionFormatChartAttribute4_3":
		case "sSectionFormatChartAttribute4_4":

			## what kind of object are they working with
			$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartKind" );
			$sKind = sGetData( $sRequestToUse );
			if ( $sKind ~ "m/Custom Request/" )
			{
				$sRequestToUse = replace( $sShowingWhat, "ChartAttribute", "ChartCustomRequest" );
				$sCustomRequest = sGetData( $sRequestToUse );

				$nCnt = ItemCount( $sCustomRequest, "/" );
				$sItem = Item( $sCustomRequest, $nCnt, $nCnt, "/" );
				$sKind = Item( $sItem, 1, 1, "," );
				$sKind = trim( $sKind );
			};

			## simple default list. Fully expect UDR's to override to create a larger list
			$sChoices = sGetData( "Chart Attribute Choices - Bubble Color" + eoi + $sKind );
			if ( trim( $sChoices ) == "" )
				$sResponse = "@|Bubble Color";
			else
				$sResponse = $sChoices;

			break;

		case "Bubble Reward":
		case "Bubble Risk":
		case "Bubble Size":

			## just an example attribute for them to use
			$sResponse = "@|10|9|8|7|6|5|4|3|2|1|0";
			break;

		case "Bubble Color":

			$sResponse = "@|Green|Blue|Yellow|Red";
			break;
		case "DefaultPageSizes":
			$sResponse = "Letter|A4|Custom";
			break;
		default:

			if( $sResponse == "" )
				$sResponse = super::GetChoices_Builtin( $sOriginalRequest );
			break;
	};
	return $sResponse;
}

##===========================================================================
## VersionReport
##===========================================================================
void SSC_DBObj::VersionReport($oThis,$bActions)
{
	VersionReport($oThis, $bActions, false);
}

##===========================================================================
## VersionReport
##===========================================================================
void SSC_DBObj::VersionReport($oThis,$bActions,$bFormal)
{
	$oThis = *;

	## Set the starting version increment
	$iVersionNum = 0;

	if ($bFormal)
		$sRowClass = "ReportRow";
	else
		$sRowClass = "ReportRowColored ";
	$loHistoryItems = CList();

	## get history items
	$bShowPreviousEntries = true;
	$tcHistoryItems = tcGetVersionHistory( $bShowPreviousEntries );

	## Store the state id for items checkpointed under a CR
	$iStateCRCheckedin = SSC_HistoryManager::kiStateCRCheckedin_s();

	$oHistoryMgr = oGetHistoryManager( false );
	$oProject = oGetProject();
	if( $oHistoryMgr != NULLOBJECT )
	{
		## Get the latest version
		$sLatestVersion = $oHistoryMgr.sGetLatestVersion();
	}
	else
	{
		if( $oProject == NULL OR $oProject == NULLOBJECT )
			$oProject = ::oProjectCurrentlyBeingViewed();
		if( $oProject == NULL OR $oProject == NULLOBJECT )
		{
			"Must have a project currently selected to view the version report";
			return;
		}
		else {
			## No changes yet so just get the data for the columns
			$sProjVersion = $oProject.sVersionID;
			if ( ( ItemCount( $sProjVersion, "." ) == 2 ) And ( Item( $sProjVersion, 2, 2, "." ) == "0" ) )
   				$sProjVersion = Item( $sProjVersion, 1, 1, "." );
			$sLatestVersion = $sProjVersion + ".1";
			##Trace("Starting version number: " + $sLatestVersion);
			## get owner
			$oOwner = oGetByRole( "OWNER" );
			$sPersonName = "";
			if ( $oOwner != NULLOBJECT )
				$sPersonName = $oOwner.sGetName();

			$dtModified = dtModified;
			if ($bFormal)
				$sModified = Format($dtModified, "m/d/yy hh:mm");
			else
				$sModified = Format($dtModified, "m/d/yy hh:mm:ss");

		};

	};

	## Get the privileging object and check if it supports item versioning..
	$oPrivObj = oGetPrivilegingObj();
	if ( * HasMethod "bSupportsItemVersioning" )
	{
		$bSupportsItemVersioning = $oPrivObj.bSupportsItemVersioning();
		$oState = $oProject.oGetWorkflowState();
		$sHideAutoNumber = $oState.sGetData("bHideAutomaticVersionNumber");
		if (Upper($sHideAutoNumber) == "TRUE")
			$bHideAutoNumber = true;
		else
			$bHideAutoNumber = false;

	}
	else
	{
		$bSupportsItemVersioning = false;
		$bHideAutoNumber = false;
	};

	#inline
	<style type="text/css">
		.ReportRowColored
		{
			background-color:#F2FAFF;
			font-family:verdana;
			font-size:8pt;
		}

		.ReportRow
		{
			font-family:verdana;
			font-size:8pt;

		}

	</style>
	#endinline;
	if ($bFormal)
	{
		$sBorder="style='text-align:left;border:solid 1px gray;'";
		#inline
		<table style="text-align:left; width:7.5in;font-family:verdana;border-collapse:collapse;border:solid 1px gray;" cellpadding="4" cellspacing="0">
		<colgroup>
		#endinline;
	} else {
		$sBorder="style='text-align:left;'";
		#inline
		<div style='float: right; margin: 0 20px 0 0;font-family:verdana;' ><a class='ActionLink' style='text-decoration: underline; cursor: pointer;' onclick='window.print();'>Print</a></div>
		<table style="text-align:left; width: 100%;font-family:verdana;" cellpadding="4" cellspacing="0" subscription='<%Ref%>~onNewVersion~' id='<% Ref %>' >
		<colgroup>
		#endinline;
	};
	## Need to handle hiding the first column
	if (NOT $bHideAutoNumber) "<col style='width:.4in;'>";
	#inline
		<col style='width:1.6in;'>
		<col style='width:1.6in;'>
		<col style='width:1.4in;'>
		<col style='width:3.2in;'>
		<col style='width:1.3in;'>
		</colgroup>
		<tr style="height: .18in;color:gray;">
	#endinline;
	## Need to handle hiding the first column
	if (NOT $bHideAutoNumber) "<th " + $sBorder + "> </th>";
	#inline
		<th <%$sBorder%>>Name</th>
		<th <%$sBorder%>>By</th>
		<th <%$sBorder%>>Date</th>
		<th <%$sBorder%>>Comments</th>
		<%$bActions?"<th style='text-align:left;'>Actions</th>":""%>
	</tr>

	#endinline;

	$sLastVersion = "";

	## If the history is empty this item has not been changed so display the base information
	if ( IsEmpty($tcHistoryItems) ) {
		#inline
		<tr class="ReportRow"  style='font-weight: bold;'>
		#endinline;
		## Need to handle hiding the first column
		if (NOT $bHideAutoNumber) "<td " + $sBorder + ">1</td>";
		#inline
			<td <%$sBorder%>>
				<%"In Process"%>
			</td>
			<td <%$sBorder%>>
				<%$sPersonName%>
			</td>
			<td <%$sBorder%>>
				<%$sModified%>
			</td>
			<td <%$sBorder%>>
				Active version
			</td>
			<td <%$sBorder%>>
				None
			</td>
		</tr>
		#endinline;

	};

	$sLastEntry = NULL;

	$nItems = count($tcHistoryItems);

	## Initialize the minor version
	$iMinorVersion = 0;

	for ( $i = 0; $i < $nItems; $i += 1 )
	{
		$oHItem = pick($tcHistoryItems, $i);
		## If the latest version of an item is Approved, then a previous version prior to the latest approved version
		## and the latest version BOTH have the same number and hence cause confusion. So Skip over this
		## anamoly after checking if previous history item's version is the same as the Latest history items version.
		if ( $bFormal OR $sRowClass == "ReportRowColored" )
			$sRowClass = "ReportRow";
		else
			$sRowClass = "ReportRowColored";

		## This old version number is obsolete with 8.0 but anything checkpointed prior to
		## 8.0 will display this in the name column
		$sVersionNumber = $oHItem.sGetVersionNumber();

		$sHighlight = "";
		if ( $i == ($nItems-1) )
			$sHighlight = "style='font-weight: bold;'";
		## Process the headings based on what we have
		if ( $oHItem == $oThis )
		{
			$bVersionInCR = false;
			$sVersionName = "";
			$sState = "In Process";
			$sItemPerson = $sPersonName;
			if ($bFormal)
				$sModDate = Format(CDate($sModified), "m/d/yy hh:mm");
			else
				$sModDate = Format(CDate($sModified), "m/d/yy hh:mm:ss");
			if( $sLastEntry != NULL )
			{
				$nDiff = DateDiff( "s", CDate( $sLastEntry ), CDate( $sModDate ) );

				if( $nDiff < 0 )
					$sModDate = $sLastEntry;
			};

			$sComments = "Active Version";

		} else if ( ($oHItem.Classname == "SSC_HistoryItem") OR ($oHItem.Classname == "SSC_HistoryManager") )
		{
			## Check if in a CR
			$bVersionInCR = $oHItem.Context.Get("bInCR", Lifespan.Request);
			$sVersionName = $oHItem.sName;
			if ($bVersionInCR == NULL) $bVersionInCR = false;
			$sState = $oHItem.sGetStateName();
			$sItemPerson = $oHItem.sPersonName;
			$sModDate = Format($oHItem.dtTimeStamp(), "m/d/yy hh:mm:ss");

			$nDiff = NULL;
			if( $sLastEntry != NULL )
				$nDiff = DateDiff( "s", CDate( $sLastEntry ), CDate( $sModDate ) );

			$sComments = $oHItem.sGetComments();
    		## Current the default string on the history manager defaults to a string with <>
    		if ( ($sComments == "" OR SubStr($sComments,0,1) == "<") AND ($i == ($nItems-1) ) AND ($sState != "Checkpointed"))
			{
				$sComments = "Active Version";

				if( $nDiff != NULL AND $nDiff < 0 )
					$sModDate = $sLastEntry;
			}
			else
				$sLastEntry = $sModDate;
		} else
		{
			$bVersionInCR = false;
			$sVersionName = "";
			$sState = "Checkpointed";
    		$oOwner = oGetByRole( "OWNER" );
			if ( $oOwner != NULLOBJECT )
				$sItemPerson = $oOwner.sGetName();
			else
    			$sItemPerson = $sPersonName;

			$sModDate = Format($oHItem.dtModified, "m/d/yy hh:mm:ss");

			$nDiff = NULL;
			if( $sLastEntry != NULL )
				$nDiff = DateDiff( "s", CDate( $sLastEntry ), CDate( $sModDate ) );

     		if ( $i == ($nItems-1) )
			{
				$sComments = "Active Version";

				if( $nDiff != NULL AND $nDiff < 0 )
					$sModDate = $sLastEntry;
			}
			else
			{
				$sLastEntry = $sModDate;
				$sComments = "";
			};
		};

		## If in a CR then do no increment the major version but increase the minor version

		if ($bVersionInCR)
		{
			## Increment the minor version
			$iMinorVersion += 1;
			$sVersionNum = $iVersionNum + "." + $iMinorVersion;

			## If in process, just put "In Process" for the name
			if ($sState == "In Process")
			{
				$sVersionName = $sState;
				## Handle a checkpoint in process case
				$sThreadName = $thread.Context.Get("sCheckinName");
				if ($sThreadName) $sVersionName = $sThreadName;
				$sThreadComments = $thread.Context.Get("sCheckinComments");
				if ($sThreadComments) $sComments = $sThreadComments;
			}
			else if ($sVersionName == "Checkpoint")
				## If in a CR, the name is blank unless we have something other than "Checkpoint" for the name
				## Checkpoint is what was stored in the name prior to 8.0
				$sVersionName = "";
		}
		else
		{
			$bIncrementMajorVersion = true;
			if ( $oHItem.Classname == "SSC_HistoryItem" )
			{
				## Increment minor version instead if this was originally done under a CR
				$bIncrementMajorVersion = $oHItem.iState != $iStateCRCheckedin;
			};

			if ( $bIncrementMajorVersion )
			{
				## Increment the major version
				$iVersionNum += 1;

				## Reset the minor version
				$iMinorVersion = 0;
			}
			else
			{
				## Increment the minor version
				$iMinorVersion += 1;
			};

			if ( $iMinorVersion > 0 )
			{
				$sVersionNum = $iVersionNum + "." + $iMinorVersion;
			}
			else
			{
				## Combine the major and minor version if in a CR
				$sVersionNum = $iVersionNum;
			};

			## If in process, just put "In Process" for the name
			if ($sState == "In Process")
			{
				$sVersionName = $sState;
				## Handle a checkpoint in process case
				$sThreadName = $thread.Context.Get("sCheckinName");
				if ($sThreadName) $sVersionName = $sThreadName;
				$sThreadComments = $thread.Context.Get("sCheckinComments");
				if ($sThreadComments) $sComments = $sThreadComments;
			}
			else if ($sVersionName == "Checkpoint")
				## When not in a CR use the old version number if the name is "Checkpoint"
				$sVersionName = $sVersionNumber;

		};

		#inline
		<tr class="<%$sRowClass%>" <%$sHighlight%> >
		#endinline;
		## Need to handle hiding the first column
		if (NOT $bHideAutoNumber) "<td " + $sBorder + ">" + $sVersionNum + "</td>";
		#inline
		    <td <%$sBorder%>>
		    	<%$sVersionName%>
			</td>
			<td <%$sBorder%>>
				<%$sItemPerson%>
			</td>
			<td <%$sBorder%>>
				<%$sModDate%>
			</td>
			<td <%$sBorder%>>
				<%$sComments%>
			</td>
			#endinline;
			if ($bActions)
			{
				#inline
				<td <%$sBorder%>>
				#endinline;

				## Only display Differences if the next item version exist and is different
				if ( $i == $nItems-1 )
				{
					$sNextVersion = "";
					## If this is the last version, pass it into GetHistoryItems as the latest version
					$sLastVersion = $sLatestVersion;
				}
				else
				{
					$oNextItem = pick($tcHistoryItems, $i+1);
					$sNextVersion = $oNextItem.sGetVersionNumber();
					$sLastVersion = "";
				};
				$oThis.GetHistoryActions( $oHItem, $sLastVersion, $sVersionNumber, $sNextVersion );
				#inline
				</td>
				#endinline;
			};
			#inline
			</tr>
			#endinline;

			## remember last version
			if ( *.Classname == "SSC_HistoryItem" )
				$sLastVersion = sVersionNumber;
		};

		#inline
	</table>
	#endinline;

}

##===========================================================================
## OnGetItemInfo
##===========================================================================
void SSC_DBObj::OnGetItemInfo($sText, $sRequest)
{
			## Used throughout the phaseout of OnGetItemInfo.ase
			if ( $sRequest == "Initiatives" OR $sRequest == "Risks"
				OR $sRequest == "TopTechnicalIssues" OR $sRequest == "MyRequirements"
				OR $sRequest == "GetMySubItems"){
				#inline
				<a class="NavigationLink" title="<%$sText%>" target=CenterPage href="itemMethodHandler.ase?oThis=<%Ref%>&sRequest=<%$sRequest%>" ><%$sText%></a>
				#endinline;
			}

			else {
				#inline
				<a class="NavigationLink" title="<%$sText%>" target=CenterPage href="OnGetItemInfo.ase?oThis=<%Ref%>&sRequest=<%$sRequest%>" ><%$sText%></a>
				#endinline;
			};
}

##===========================================================================
## sGetDescription - optimize "sDescription"
##===========================================================================
variant SSC_DBObj::sGetDescription()
{
	## Need to handle the case of linked items that might be pseudo deleted, but case based on class so we don't do any work unless need
	$sClassName = ClassName;
	if ($sClassName == "SSC_SubSystem" OR $sClassName == "SSC_VOC" OR $sClassName == "SSC_SysReq" OR $sClassName == "SSC_Risk" OR $sClassName == "SSC_Mitigation" OR $sClassName == "SSC_Test")
		$oProject = oProject;
	else
		$oProject = nullobject;

	## optimize the crap out of "sDescription"
	$sChange = SSC_ChangeRequest::sGetChangeStr_s( "ATTR", "sDescription" );
	$oThis = oGetThis_r( $sChange );
	$sDescription = $oThis.sDescription;

	## If a linked item oGetThis_r will have returned the source item even is pseudo deleted so handle that case
	if ($oProject != nullobject AND $oThis.oProject != $oProject)
	{
	    ## Check is pseudo deleted
		if ($oThis.bIsPseudoDeleted())
			$sDescription = $sDescription + " (" + GetGenString("Msg_LinkSource_DELETED") + ")";
	};
	return $sDescription;
}


##===========================================================================
## sGetSetData - This should be implemented on each class that has something
## to offer. However, don't call it directly, use the more convenient
## accessor functions: sGetData( $sRequest, $bMakeEditable ) and SetData( $sRequest, $Value ).
## Both are defined on COG_Base.
##===========================================================================
variant SSC_DBObj::sGetSetData( $sRequest, $bSettingValue, $Value, $bGetDisplay )
{
	$sResponse = "";
	$sError = "Error: '" + $sRequest + "' not settable.";
	$oThis = *;

	## Read orignial request and store in separate variable. Use this to pass along
	## to base class method in case this request is not handled at this level.
	$sOriginal = $sRequest;

	## init a variable
	$sSubRequest = "";

	## Strip out inner request if any. Note that these requests that are
	## tagged along with the REQUEST key is always an object reference.
	if( find($sRequest,EOI) != -1 )
	{
		$lsRequest		= split( $sRequest, EOI );
		$sSubRequest	= pick(  $lsRequest,1 );
		## The inner request might be "safe". So replace "-" in the reference string with "|"
		$sSubRequest    = Replace( $sSubRequest, "-", "|" );
		$sRequest		= First( $lsRequest );
	};

	## Process either Get or Set
	if ( $bSettingValue )
	{
		##trace( " setting  value " + $sRequest );

		switch( $sRequest )
		{
			case "sQualifiedDescription":
			case "sQualifiedDescriptionWithoutID":
			case "sDescriptionWithSection":
			case "sDescriptionWithSectionAndGroup":
			case "sDescriptionWithID":
			case "sClippedDescription":
				try
				{
					$sNotUsingTheirValue = sSetData_b( "sDescription", $Value );

					## we're a local implementation for now
					$sResponse = $Value + EOI + sGetDataDisplay( $sRequest );
				}
				catch( $sResponse )
				{
					$sResponse = ::sGetErrorString($sResponse);
					throw($sResponse);
				};
				break;
			case "sDetailedDescription":

				## execute a modify check,
				$tmp = $oThis.CheckPropertyWriteAccess( $sRequest, "", true, true );

				## checkout object
				$oThis.onBeforeChange( true );

				$sEncodedDescription = sEncodeManagedDocUrl( $Value, "sDetailedDescription" );
				$oThis.SetAttr_cr( "sDetailedDescription", $sEncodedDescription );

				## eliminate unused documents
				$oThis.EliminateUnusedImages();

				$sResponse = $sEncodedDescription;
				break;

			case "sRichSectionFooterContent":

				## throw error is access test is violated
				$tmp = $this.CheckPropertyWriteAccess( $sRequest, "", true, true );

				$this.onBeforeChange( true );
				$sEncodedDescription = sEncodeManagedDocUrl( $Value, "sRichSectionFooterContent" );
				$this.AddMapValue( "S", "sRichSectionFooterContent", $sEncodedDescription );

				## eliminate unused documents
				$this.EliminateUnusedImages();

				$sResponse = $sEncodedDescription;
				break;
			case "sComments":
			case "sDefinition":
				$sEncodedDescription = sEncodeManagedDocUrl( $Value, $sRequest );
				$sResponse = super::sGetSetData( $sRequest, $bSettingValue, $sEncodedDescription, $bGetDisplay );

				## eliminate unused documents
				$oThis.EliminateUnusedImages();

				break;

			case "sDescription":
				try
				{
					$sEncodedDescription = sEncodeManagedDocUrl( $Value, $sRequest );
					$sNotUsingTheirValue = sSetData_b( "sDescription", $sEncodedDescription );

					## we're a local implementation for now
					$sResponse = sGetData( $sRequest );

					## eliminate unused documents
					$oThis.EliminateUnusedImages();
				}
				catch( $sResponse )
				{
					$sResponse = ::sGetErrorString($sResponse);
					throw($sResponse);
				};
				break;

			case "sRoofComments":
			case "sRatingComments":
				$sSourceRef = GetRequest("sSourceRef");
				if( $sSourceRef == NULL )
				{
					if( $sSubRequest != "" )
						$sSourceRef = $sSubRequest;
					else
						$sSourceRef = "";
				};
				$sRequest += EOI + $sSourceRef;
				$sResponse = super::sGetSetData( $sRequest, $bSettingValue, $Value, $bGetDisplay );
				break;
			case "mosTargetNominalValue":
				if( $sSubRequest == "" )
				{
					## Comes from linkanator HOQ
					$sRequest += EOI + GetRequest("sSourceRef");
				}
				else
				{
					## Comes from smart data section
					$sRequest += EOI + $sSubRequest;
				};

				$sResponse = super::sGetSetData( $sRequest, $bSettingValue, $Value, $bGetDisplay );
				break;

			case "sAutoMetricUpdate":
				$sValue = CStr( $Value );
				$bAutoMetricUpdate = false;

				if( $sValue == "On" )
					$bAutoMetricUpdate = true;

				SetDaoContext( "bAutoMetricUpdate", $bAutoMetricUpdate );
				break;

			case "sNotebookSection":
				$sCommand = GetRequest("sSetDataCommand");
				if($sCommand != NULL)
				{
					switch($sCommand)
					{
						case "Add":
							$Value = "Add" + EOI + $Value + EOI + "";
							break;
						case "Remove":
							$Value = "Remove" + EOI + $Value + EOI + "";
							break;
						case "Rename":

							$sOldValue = GetRequest("sOldValue");
							$Value = "Rename" + EOI + $sOldValue  + EOI + $Value;
							$sSectionNames = sGetData("sNotebookSections");
							break;
					};
					try
					{
						$sResponse = sSetData_b( $sRequest, $Value );
					}
					catch( $sResponse )
					{
						$sResponse = ::sGetErrorString($sResponse);
						throw($sResponse);
					};
				}
				else
					$sResponse = "Error:" + EOI + "Error occurred while manipulating the Notebook section.";
				break;

			case "iMyOpinion":

				## which review?
				$sActiveReview = GetDaoContext( "sActiveReview" );

				if ( $sActiveReview and $sActiveReview != "" )
				{
					## get the review object (top-level note in a section called 'ReviewCenter')
					$oActiveReview = first( loGetObjects( "Notes", "ReviewCenter" )[ sText == $sActiveReview ] );

					## create it if needed
					if ( $oActiveReview == null )
					{
						AddNotebookEntry( "ReviewCenter", $sActiveReview );
						$oActiveReview = first( loGetObjects( "Notes", "ReviewCenter" )[ sText == $sActiveReview ] );
					};

					## set your opinion
					$oActiveReview.SetData( "iMyOpinion", $Value );

					$sResponse = $Value;
				};
				break;

			case "Bubble Reward":
			case "Bubble Risk":
			case "Bubble Size":
			case "Bubble Color":
				$this.AddMapValue( "S", $sRequest, $Value, true );
				$sResponse = $Value;
				break;

			case "binFile":
				$sConID = GetRequest("sConID");
   				$oDoc = SSC_ExtDocument::oGetAttachmentFromConnection_s($oThis, $sConID);

   				## Redirect the request to the ExtDoc
                $sResponse = $oDoc.sGetSetData( $sRequest, $bSettingValue, $Value );

				## Moved to ExtDoc
                ## Now check if we have an image file to also update
                ## Get embedded app flag
                ##$bEmbeddedApp = GetRequest("bEmbeddedApp");
                ##if ( $bEmbeddedApp == NULL ) $bEmbeddedApp = false;
    			##if ( $bEmbeddedApp == true )
    			##{
				##	$debug = true;
				##	trace( "isEmbeddedApp" );
        		##	$sFile = GetDaoContext( "sFirstFile" );
    			##    SetDaoContext("sFirstFile", NULL);
	    		##    $sSrcFile = GetDaoContext( "sFirstSrcFile" );
    			##    SetDaoContext("sFirstSrcFile", NULL);
    	    	##	SetDaoContext( "sFile", $sFile );
	    	    ##	SetDaoContext( "sSrcFile", $sSrcFile );
				##
	    	    ##	## Get the associated image and save the file to it
	    	    ##	$msaData = $oDoc.msaData;
	    	    ##	$oImage = pick($msaData, "oImage");
				##	if ( $oImage )
				##		trace( "has image" )
				##	else
				##		trace( "no image" );
	    	    ##	if ( $oImage != NULL )
                ##        $sResponse = $oImage.sGetSetData( $sRequest, $bSettingValue, $sFile, false );
	    	    ##
    			##};
                $oThis = *;

				## save the attachment changed as the binFile entry
				if( $oThis.iAuditLevel() != 0 )
					$oEntry = SSC_AuditEntry::AddLogEntry_oData( $oThis, "binFile", $oDoc.sGetEKey(), True );
                break;

            case "sAllowFormatOverride":
				$sAllow = $Value == "Allow the selected format to be overridden" ? "" : "0";
				AddMapValue( "S", "sAllowFormatOverride", $sAllow, true );
				$sResponse = $Value;
				break;

			case "sViewDefinition":
				AddMapValue( "S", "View Definition", $Value, true );
				$sResponse = $Value;
				break;
			default:

				## look for rich text UDAs since the require special handling
				if ( left( $sRequest, 5 ) == "sUDA_" )
				{
					## get the registrar
					$oRegistrar = oGetLocalRegistrar();

					## check if this is a rich text uda
					$sClass = Classname;

					$oUDA = $oRegistrar.oGetAttributeFromCache_s( $sRequest, $sClass );
					if ( $oUDA != NullObject And $oUDA.bIsRichText() )
					{
						## add access protection
						$tmp = CheckPropertyWriteAccess($sRequest, "", true, true);

						## check this object out
						$oThis.onBeforeChange( true );

						## do encoding
						$sChange = SSC_ChangeRequest::sGetChangeStr_s( "ATTR", "msaCustomData", $sRequest );
						$oThis = $oThis.oGetThis_u( $sChange );

						$sEncodedDescription = sEncodeManagedDocUrl( $Value, $sRequest );

						## construct a new map with the value
						$mNew = CMap( $sRequest, $sEncodedDescription );

						## append data
						WosAseStaticHelper::AppendToPersistentMap( $oThis, "msaCustomData", $mNew, true);

						## eliminate unused documents
						$oThis.EliminateUnusedImages();

						## if we have a change request, we also want to remember this value
						SSC_ChangeEntry::SaveChangeValue_s( $this, $sChange, "", $sEncodedDescription );

						$sResponse = $sEncodedDescription;
					}
					else
						$sResponse = super::sGetSetData( $sOriginal, $bSettingValue, $Value, $bGetDisplay );
				}
				else
					$sResponse = super::sGetSetData( $sOriginal, $bSettingValue, $Value, $bGetDisplay );

				break;
		};
	}
	else
	{
		## trace( " getting  value " + $sRequest );

		switch ( $sRequest )
		{
			case "sViewDefinition":
				$sResponse = sGetMapValue( "S", "View Definition" );
				break;

            case "sAllowFormatOverride":
				$s = sGetMapValue( "S", "sAllowFormatOverride" );
				$sResponse =  $s != "0" ? "Allow the selected format to be overridden" : "Keep the selected format and don't allow override" ;
				break;

			case "sQualifiedDescription":
				$sDescription = sGetDescription();
				$bNoHTML = false;
				if( GetRequest( "bNoHTML" ) != NULL )
					$bNoHTML = true;
				$sDisplay = htmlencode(sGetDescriptionWithId());

				## Get the qualifier text from the backend
				$sQualifier = $this.sGetQualifier();
				if( $sQualifier != "" )
				{
					if( $bNoHTML )
						$sDisplay += " - " + htmlencode( $sQualifier );
					else
					{
						$sDisplay += " - <font style='color:green;' class='primaryGroup' >";
						$sDisplay += htmlencode( $sQualifier ) + "</font>";
					};
				};

				$sDesc = $sDescription;
				$sResponse = $sDesc  + eoi + $sDisplay;

				break;

			case "sQualifiedDescriptionForFlex":
				$sDisplay = sGetDescriptionWithId();

				## Only qualify with group if a linked object
				if ($this KindOf "SSC_LinkedObj")
				{
					$sQualifier = sGetQualifier();
					if ( $sQualifier != "" )
					{
						$sDisplay += " - " + htmlencode( $sQualifier );
					};
				};
				$sResponse = urlencode( $sDisplay );
				break;

			case "sQualifiedDescriptionForFlex_simple":
				$sDisplay = sGetDescription();

				$sResponse = urlencode( $sDisplay );
				break;

			case "sQualifiedDescriptionWithoutID":

				$sDesc = sGetDescription();
				$sDisplay = htmlencode( $sDesc );


				## Only qualify with group if a requirement
				## Get the qualifier text from the backend
				$sQualifier = $this.sGetQualifier();
				if ( $sQualifier != "" ) {
					$sDisplay += " - <font style='color:green;' class='primaryGroup' >" + htmlencode( $sQualifier ) + "</font>";
				};

				$sResponse = $sDesc  + eoi + $sDisplay;

				break;

			case "sDescriptionWithID":

				$sDesc = sGetDescription();
				$sDisplay = htmlencode( sGetDescriptionWithId() );
				$sResponse = $sDesc  + eoi + $sDisplay;

				break;

			case "sDescriptionWithSection":

				$sDesc = sGetDescription();
				$sDisplay = htmlencode( sGetDescriptionWithId() );

				$sSection = sGetData( "sSectionNumber" );

				if ( $sSection != "" )
					$sDisplay = $sSection + " " + $sDisplay;

				$sResponse = $sDesc  + eoi + $sDisplay;

				break;

			case "sDescriptionWithSectionAndGroup":

				$sResponse = sGetData( "sQualifiedDescription" );

				$sSection = sGetData( "sSectionNumber" );

				if ( $sSection != "" )
				{
					$sDesc = Item( $sResponse, 1, 1, EOI );
					$sDisplay = Item( $sResponse, 2, 2, EOI );

					$sDisplay = $sSection + " " + $sDisplay;

					$sResponse = $sDesc  + eoi + $sDisplay;
				};

				break;

			case "sDetailedDescription":
				## Need to check if a proxy
				if ( bReference )
				{
					$oItem = $this.oFindMyReference();
				} else
					$oItem = $this;

				## Need to handle the reference no being available
				if ( COG_Base::bIsAvailable($oItem) )
				{
					$sResponse =  $oItem.GetAttr_cr( "sDetailedDescription" );
					$sResponse =  $oItem.sDecodeManagedDocUrl( $sResponse );
				}
				else
					$sResponse = "*** This item not available in referenced version ***";
				break;
			case "sRichSectionFooterContent":
				## Need to check if a proxy
				if ( bReference )
				{
					$oItem = $this.oFindMyReference();
				} else
					$oItem = $this;

				## Need to handle the reference no being available
				if ( COG_Base::bIsAvailable($oItem) )
				{
					$sResponse =  $this.sGetMapValue( "S", $sRequest );
					$sResponse =  $oItem.sDecodeManagedDocUrl( $sResponse );
				}
				else
					$sResponse = "*** This item not available in referenced version ***";
				break;

			case "sComments":
				$oThis = oGetThis_r( "ATTR,sComments" );
				$sResponse = $oThis.sComments;
				$sResponse = $oThis.sDecodeManagedDocUrl( $sResponse );
				break;

			case "sDefinition":

				$sResponse = sGetData_b($sRequest, "");;
				$sResponse = sDecodeManagedDocUrl( $sResponse );
				break;

			case "sOwner_name":

				$oOwner = oGetByRole( "OWNER" );
				if ( $oOwner != NULLOBJECT )
					$sResponse = $oOwner.sGetData( "sDescription" );
				break;

			case "sProjectName":
				$oProject = oGetProject();
				$sResponse = $oProject.sGetData( "sDescription" );
				break;

			case "sState":
				$sResponse = sGetData_b($sRequest, "");
				break;

			case "sCheckedOutBy":
				$sResponse = sGetLockAndOwner();
				break;

			case "sDateCreated":
				$sResponse = CStr( dtCreated );
				break;

			case "sDateCreated_formatted":
				$sResponse = CStr( dtCreated );
				$sResponse = ::sGetPrettyTimeDistance($sResponse);
				break;


			case "sDateModified":
				$sResponse = CStr( dtModified );
				break;


			case "sModifiedDateAndTime":

				$sResponse= ::sFormatDate( dtGetModifiedDateAndTime(), "ST" );
				break;

			case "sModifiedDateAndTime_formatted":

				$sResponse= CStr( dtGetModifiedDateAndTime() );
				$sResponse = ::sGetPrettyTimeDistance($sResponse);
				break;

			case "sMarkupComment":
				$loMarkups = loGetObjects( "Markups", "Mine" );
				$lsComments = CList();
				$loMarkups/
				{
					$lsComments << sGetDataValue( "sText" );
				};
				$sResponse = Join( $lsComments, EOI );
				break;

			case "sActiveVersion":
				$oHistoryMgr = oGetHistoryManager( false );
				if( $oHistoryMgr != NULLOBJECT )
				{
					$tcHistory = tcGetVersionHistory( true );
					if( NOT IsEmpty( $tcHistory ) )
					{
						## Get the latest version
						$oHItem = First( GetReverse( $tcHistory ) );
						$sResponse = $oHItem.sName;
						if( $sResponse == "" )
							$sResponse = CStr( Count( $tcHistory ) );
					};
				}
				else
					$sResponse = "1";

				if( $sResponse == "<Latest>" )
					$sResponse = sGetCurrentVersionNumber();

				break;
			case "sVersionNumber":
				$sResponse = sVersionNumber;

			case "sStateName":
				$sResponse = sGetStateName();
				break;
			case "sDateCheckedIn":
				$sResponse = CStr( dtCheckedIn );
				break;

			case "sDateCheckedIn_formatted":
				$sResponse = CStr( dtCheckedIn );
				$sResponse = ::sGetPrettyTimeDistance($sResponse);
				break;

			case "sPersonName":
				$sResponse = sPersonName;
				break;

			case "sName/ID":
				$sResponse = 'sGetName/ID'();
				break;
			case "sApprovalState":
				$bIsApproved = bIsItemApproved();
				if( $bIsApproved )
					$sResponse = "Approved";
				else
				{
					$bIsSubmittedForApproval = bIsItemSubmittedForApproval();
					if( $bIsSubmittedForApproval )
						$sResponse = "Submitted for Approval";
					else
						$sResponse = "Not Submitted for Approval";

				};
				break;
			case "sAutoMetricUpdate":
				$bAutoMetricUpdate = GetDaoContext( "bAutoMetricUpdate" );
				if( $bAutoMetricUpdate == NULL OR $bAutoMetricUpdate == false )
					$sResponse = "Off";
				else
					$sResponse = "On";
				break;
			case "sClippedDescription":

				## Added to support using other display values for the clipped description
				if( $sSubRequest != "" )
				{
					$sDescription = sGetData( $sSubRequest );
					$sDisplay = $sDescription;
					if( find( $sDescription, EOI ) != -1 )
					{
						$sDisplay = Item( $sDescription, 2, 2, EOI );
						$sDescription = Item( $sDescription, 1, 1, EOI );
					};
				}
				else
				{
					$sDescription = sGetDescription();
					$sDisplay = $sDescription;
				};

				$sId = sGetRefID();
				$sDisplay = $sId == "" ? $sDisplay : $sId + ": " + $sDisplay;

				$nCharCount = StrLen( $sDisplay );
				if( ( GetRequest( "sExport" ) == NULL ) AND ( $nCharCount > 55 ) )
				{
					$sDisplay = SubStr( $sDisplay, 0, 55 ) + "...";
				};

				$sResponse = $sDescription + EOI + $sDisplay;
				break;
			case "sWorkflowState":

				## Marketing Purpose. No harm.
				$sResponse = sGetData_b( $sRequest, "" );
				break;

			case "mosTargetNominalValue":
				$sSubRequest = Replace( $sSubRequest, "-", "|" );
				$sRequest += EOI + $sSubRequest;
				$sResponse = sGetData_b( $sRequest, "" );
				break;

			case "sStateIcon":

				## Marketing Purpose. No harm.
				$sState = sGetData( "sState" );
				$bInprocess = find( $sState, "In Process" ) > -1 ;
				$sThemeFolder = ::sGetThemeFolder();

				$oPersonCheckedOutTo = oGetLockOwner();

				Choose
				{
					When $oPersonCheckedOutTo == $me.oGetPerson():

						$sResponse = "<img style='zoom:95%;' src='images/" + $sThemeFolder + "/locktome.png' title='In Process - Locked by me' />";

					When $oPersonCheckedOutTo != NullObject :

						$sResponse = "<img style='zoom:95%;' src='images/" + $sThemeFolder + "/lockToOther.png' title='In Process - Locked by " + $oPersonCheckedOutTo.sGetName() + "' />";

					When $bInprocess:

						$sResponse = "<img style='zoom:90%;' src='images/" + $sThemeFolder + "/none.gif' title='In Process - Available for edit' />";

					When find( $sState, "Checkpointed" ) > -1:

						$sResponse = "<img style='zoom:100%;' src='images/" + $sThemeFolder + "/VC_Check_In.png' title='Checkpointed' />";

					When find( $sState, "Approved" ) > -1:

						$sResponse = "<img style='zoom:94%;' src='images/" + $sThemeFolder + "/VC_Approve.png' title='Approved' />";

				};

				break;
			case "sDocLayout":
				$sResponse = "Portrait";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sPageSize":
				$sResponse = "Letter";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( "sDefaultPageSize" );
				break;

			case "sPageSize_CustomLength":
				$sResponse = "11in";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( "sDefaultPageSizeCustomLength" );
				break;

			case "sPageSize_CustomLength":
				$sResponse = "8.5in";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( "sDefaultPageSizeCustomWidth" );
				break;

			case "sPageSize_Pair":
				$sResponse = "";
				$sPageSize = $this.sGetDataValue("sPageSize");
				if( $sPageSize == "Custom" )  {
					$sLength = $this.sGetDataValue( "sPageSize_CustomLength" );
					$sWidth = $this.sGetDataValue( "sPageSize_CustomWidth" );
					$sResponse = $sLength + "_" + $sWidth;
				} else if( $sPageSize != "" ) {
					$oAppObj = COG_AppObj::oGet_s();
					$sLength = $oAppObj.sGetPageLength( $sPageSize );
					$sWidth = $oAppObj.sGetPageWidth( $sPageSize );
					$sResponse = $sLength + "_" + $sWidth;
				};
				$sResponse = Replace($sResponse, ".", "-");
				break;

			case "sDocFontSize":
				$sResponse = "10";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sDocFontSizeForTables":
				$sResponse = "9";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sDocFontFamily":
				$sResponse = "Arial";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sTopMargin":
			case "sBottomMargin":
				$sResponse = ".75in";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sLeftMargin":
			case "sRightMargin":
				$sResponse = ".5in";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sHeaderMargin":
			case "sFooterMargin":
				$sResponse = ".5in";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sLockMargins":
				$sResponse = "true";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sTableOfContentsOptions":
			case "sHeaderFooterOptions":
				$sResponse = "Don't Show";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "sHeader":
			case "sFooter":
			case "sHeaderFirstPage":
			case "sFooterFirstPage":
				$sResponse = "";
				SetRequest( "oObjToUseForRichTextDataContext", * );
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				SetRequest( "oObjToUseForRichTextDataContext", NULL );
				##Already decoded by project getdata
				##$sResponse = sDecodeManagedDocUrl( $sResponse );
				break;

			case "sCoverPageFormat":
				$sResponse = "Standard";
				$oProject = ::oProjectCurrentlyBeingViewed();
				if ( $oProject ) $sResponse = $oProject.sGetData( $sRequest );
				break;

			case "Status Color":

				$sValue = sGetData( "sStatusColor" );

				switch ( $sValue )
				{
					case "ksGray":
						$sValue = "Gray";
						break;
					case "ksBlue":
						$sValue = "Blue";
						break;
					case "ksGreen":
						$sValue = "Green";
						break;
					case "ksYellow":
						$sValue = "Yellow";
						break;
					case "ksRed":
						$sValue = "Red";
						break;
				};
				$sResponse = $sValue;

				break;

			case "Last Modified":

				$sResponse = Item( sGetData( "sModifiedDateAndTime_formatted" ), 2, 2, eoi );
				break;

			case "Bubble Reward":
			case "Bubble Risk":
			case "Bubble Size":

				$sResponse = sGetMapValue( "S", $sRequest );
				if( $sResponse == "" )
					$sResponse = "5";
				break;

			case "Bubble Color":

				$sResponse = sGetMapValue( "S", $sRequest );
				if( $sResponse == "" )
					$sResponse = "Green";
				break;

			case "sProject":
				$sResponse = "";
				$oProject = oGetProject();
				if ( $oProject != NullObject )
				{
					$sResponse = $oProject.sGetData( "sDescription" );
				};
				break;

		case "NumberOfChanges":

				$sResponse = 0;

				$iChanges = iGetModTipsCountAuditCount();

				$sResponse = CStr( $iChanges );

				break;
			case "iItemNumber":
				if ( bReference )
				{
					$oLink = $oThis.oFindMyReference();
					if ($oLink.IsValid)
					{
						$sResponse = $oLink.iOid;

					}
					else
					{
						$sResponse = "";
					};
				}
				else
					$sResponse = iOid;
				$sResponse += EOI + $sResponse;
				break;
			case "sOwnerList":
				$oThis = *;
				$loOwners = SSC_Role::loGetByRole_s( $oThis, "OWNER" );

				$sResponse = join( $loOwners/sGetName(), EOI );
				break;
			case "bOwnedByMe":
				$sResponse = CStr(bOwnedByMe());
				break;
			case "sDescriptionWithProjectNameAndVersion":
				$oProject = oGetProject();
				$sVersionID = Item( $oProject.sVersionID, 1, 1, "--" );
				$sProjectName = $oProject.sGetDataValue( "sDescription" );
				$sDescription = sGetDataValue( "sDescription" );

				$sResponse = $sDescription + " - " + $sProjectName + " Version " + $sVersionID;
				$sResponse += EOI + $sDescription + " - <font color='green'>" + $sProjectName + " Version " + $sVersionID + " </font>";
				break;
			case "sDescriptionWithProjectName":
				$oProject = oGetProject();
				$sProjectName = $oProject.sGetDataValue( "sDescription" );
				$sDescription = sGetDataValue( "sDescription" );

				$sResponse = $sDescription + " - " + $sProjectName;
				$sResponse += EOI + $sDescription + " - <font color='green'>" + $sProjectName + " </font>";
				break;
			case "sSectionFormatColsToShow":
				$sResponse = "20";
				break;
			case "sSectionFormatRowsToShow":
				$sResponse = "15";
				break;
			case "sCurrentVersion":
				$sResponse = sGetCurrentVersionNumber();
				break;
			case "sLastDerivativeUpdate":
				$sResponse = "";
				$vResponse = vGetMapValue( "DT", "dtLastDerivateUpdate" );

				## convert this to server time
				if ( $vResponse ) {
					$dtValue = WosAseStaticHelper::dtConvertUTCtoServerTime_s( $vResponse );
					$sResponse = Format( $dtValue, "m/d/yy hh:mm:ss" );
				};
				break;
			case "sSourceVersion":
				$sResponse = "";
				$bSrcInProcess = vGetMapValueWithDefault( "B", "bSourceInProcess", False );
				$bSrcInCR = vGetMapValueWithDefault( "B", "bSourceFromCR", False );

				if ( $bSrcInCR ) {
					## in CR
					$sResponse = "From Change Request";
				} else if ( $bSrcInProcess ) {
					## in process
					$sResponse = "No Checkpoint";
				} else {
					## source version
					$sVersion = sGetMapValue( "S", "sSourceVersion" );

					## get the source object
					$oSource = oGetSource();
					if ( $oSource.IsValid )
						$sResponse = $oSource.sGetVersionNameFromNumber( $sVersion );
				};
				break;
			default:
				if ( left( $sRequest, 5 ) == "sUDA_" )
				{
					## get the registrar
					$oRegistrar = oGetLocalRegistrar();

					## check if this is a rich text uda
					$sClass = Classname;
					$oUDA = $oRegistrar.oGetAttributeFromCache_s( $sRequest, $sClass );

					if ( $oUDA != NullObject )
					{
						if( $oUDA.bIsRichText() )
						{
							## specially handle rich text
							$sChange = SSC_ChangeRequest::sGetChangeStr_s( "ATTR", "msaCustomData", $sRequest );
							$oThis = oGetThis_r( $sChange );
							$sValue = Pick( $oThis.msaCustomData, $sRequest );

							if ( $sValue != null )
								$sResponse =  sDecodeManagedDocUrl( $sValue );
							else
							{
								$sValue = $oUDA.sGetDefaultValue();

								if( $sValue != "" )
									$sResponse =  sDecodeManagedDocUrl( $sValue );
								else
									$sResponse = "";
							};
						}
						else
							## specially handle rich text
							$sResponse = sGetData_b( $sOriginal, "" );
					}
					else
						$sResponse = super::sGetSetData( $sOriginal, $bSettingValue, $Value, $bGetDisplay );
				}
				else
					$sResponse = super::sGetSetData( $sOriginal, $bSettingValue, $Value, $bGetDisplay );
		};
	};
	return $sResponse;
}
##===========================================================================
## lsGetDataList_Builtin
##      -Display Name
##      -Short Description
##		-Boolean, editable (has a set method also)
##		-integer, availability, 0 = thin, 1 = thick, 2 = both
##      -Boolean, html content
##      -Description or function of field
##===========================================================================
variant SSC_DBObj::lsGetDataList_Builtin( $sConsumer )
{
	$lsRetval = CList();

	$lsRetval << super::lsGetDataList_Builtin( $sConsumer );

	$lsRetval << "sQualifiedDescription|Qualified Description|false|2|true|Qualified description of this item";
	$lsRetval << "sItemId|Item ID|false|2|true|Qualified description of this item";
	$lsRetval << "sType|Type|true|2|true|The type of object";
	$lsRetval << "iItemNumber|Item Number|false|2|true|Raw number of the Item ID";
	$lsRetval << "sComments|Comments|true|1|false|Comments on this item";
	$lsRetval << "sOwner_name|Owner Name|false|0|false|The owner of the item";
	$lsRetval << "sAuthor|Author Name|false|1|false|The author of the item";
	$lsRetval << "sCheckedOutBy|Checked Out By|false|1|false|The person who has this item checked out";
	$lsRetval << "sWorkflowState|Workflow Status|false|1|false|The workflow state of this item";
	$lsRetval << "sItemNameNoId|Editable Description w/ Icon|false|0|false|Item ID and description";
	$lsRetval << "sItemName|Editable Description w/ ID Icon|false|0|false|Item ID and description";
	$lsRetval << "sItemNameQualified|Qualified Description w/ ID Icon|false|0|false|Item ID and description";
	$lsRetval << "sExternalURLLink|External URL|false|2|false|External URL";

	if ( $sConsumer != "search" )
	{
		$lsRetval << "sQualifiedDescriptionWithoutID|Qualified Description Without ID|false|0|true|The qualified description of the requirement without the item id. Returned as an EOI delimited value, value/display.";
		$lsRetval << "sDescriptionWithID|Description With ID|false|0|true|The description of the item including the item id. Returned as an EOI delimited value, value/display.";
		$lsRetval << "sDateCreated|Date Created|false|1|false|Creation date of this item";
		$lsRetval << "sDateModified|Date Modified|false|1|false|Last modification date of this item";
		$lsRetval << "sOwner|Owner|false|1|false|The owner of the item";
	}
	else
		##add for search
		$lsRetval << "sDetailedDescription|Detailed Description|true|0|true|Detailed description of this item";

	return $lsRetval;
}

##===========================================================================
## lsGetTableDef_Builtin
## NOTE:DataEncodings(see below)|Column header; sort params(  see below )|column style,column-level tag attrs|cell style+
##      Cellstyle Data Request( see below )|cell-level tag attrs
## Data Encodings: sRequest( or encoded request, see below ),bEditable,sValidate value + raw HTML delimeter/ another data encoding + ...
## Cellstyle Data Request: CSS Attribute= sParamRequest~sRequest, sSuffix + / another data request encoding + ...
## Encoded request = MetricType~sRequest. This will find a child object of the given metric type, and then calls the sRequest on the indirect object.
## sort params: sort order( 1 = primary sort for this column, 2 = secondary sort, -1 or blank = don't sort by this column ),sSortRequest, sSortType (N or S ), bReverseSort
##===========================================================================
variant SSC_DBObj::lsGetTableDef_Builtin( $sFormat )
{
	$lsResponse = CList();
	switch ( $sFormat )
	{
		case "Derivatives":
			$lsResponse << "sProjectLink,false,none;|Project|width:2in;text-align:left;|text-align:left;|";
			$lsResponse << "sDerivedLinkQualified,false,none|Item|width:2in;text-align:left;|text-align:left;|";
			break;

		case "DerivedFrom":
			$lsResponse << "sProjectLink,false,none;|Source Project|width:34%;text-align:left;|text-align:left;|";
			$lsResponse << "sItemLinkQualified,false,none|Source Item|width:33%;text-align:left;|text-align:left;|";
			$lsResponse << "Derived Differences Link,false,none|Actions|width:33%;text-align:left;|text-align:left;|";
			break;

		case "ReferencedObject":
			$lsResponse << "sProjectLink,false,none;|Project|width:40%;text-align:left;|text-align:left;|";
			$lsResponse << "sLinkType,false,none;|Link Type|width:20%;text-align:left;|text-align:left;|";
			$lsResponse << "sItemLinkQualified,false,none|Derived Item|width:40%;text-align:left;|text-align:left;|";
			break;

		case "Workflow State":

			## Marketing Purpose. No harm.
			$lsResponse << "sItemLink,true,none|Item|width:2in;text-align:Left;, sSortType='S'|width:2in;text-align:Left;|";
			$lsResponse << "Workflow State,true,none|Workflow State|width:1.75in;text-align:Left;,        sSortType='S'|width:1.75in;text-align:Left;|";
			$lsResponse << "Workflow Owner,true,none|Assigned To|width:1.6in;text-align:Left;,        sSortType='S'|width:1.6in;text-align:Left;|";
			$lsResponse << "Workflow Notes,true,none|Log|width:3in;text-align:Left;,        sSortType='S'|width:3n;text-align:Left;|";

			break;
		case "Attachments":
			$lsResponse << "sSearchResult,false,none|Title|width:30%|text-align:left;|";
			$lsResponse << "sVersion,false,none|Version|width:20%|text-align:left;|";
			$lsResponse << "sOwner,false,none|Owner|width:20%|text-align:left;|";
			$lsResponse << "sModifiedDateAndTime,false,none|Last Modified|width:20%|text-align:left;|";
			break;

		case "Editable":
			$lsResponse << "sEditableName,true,none|Title|width:30%|text-align:left;|";
			$lsResponse << "sOwner,true,none|Owner|width:20%|text-align:left;|";
			break;

		case "ScriptsTable":
			$lsResponse << "ReorderCol,false,none|Reorder|width:.6in|text-align:left;|";
			$lsResponse << "sDescription,true,none|Script Name||text-align:left;|";
			$lsResponse << "bExecutable,true,none|Enable/Disable||text-align:left;|";
			break;

		case "StateInformation": ## experimental
			$lsResponse << "sSearchResult,false,none||width:2in;text-align:left;font-weight:bold;||";
			$lsResponse << "sStateColumn,false,none|State|width:.35in;text-align:right;font-weight:bold;|text-align:right;|";
			break;
		case "VersionReport":
			$lsResponse << "sVersionNumber,false,none|Version|width:20%|text-align:left;|";
			$lsResponse << "sStateName,false,none|State|width:20%|text-align:left;|";
			$lsResponse << "sPersonName,false,none|By|width:20%|text-align:left;|";
			$lsResponse << "sDateCheckedIn,false,none|Date|width:20%|text-align:left;|";
			$lsResponse << "sComments,true,none|Comments|width:20%|text-align:left;|";
			$lsResponse << "sDifferenceLink,false,none|Action|width:20%|text-align:left;|";
			break;
		case "Item Name w/Indentation":
			$lsResponse << "Indent Div,false,none+sItemName,true,none+</div>|Description|text-align:Left;,sSortType='S'|text-align:Left;|";
			break;
		case "Item Name Qualified by Project Name":
			$lsResponse << "sDescriptionWithProjectName,false,none|Description|text-align:Left;,sSortType='S'|text-align:Left;|";
			break;
		case "Item Name Qualified by Project Name And Version":
			$lsResponse << "sDescriptionWithProjectNameAndVersion,false,none|Description|text-align:Left;,sSortType='S'|text-align:Left;|";
			break;
		case "Attachments Trace":
			$lsResponse << "sItemLinkQualified,false,none|Description|width:50%;text-align:Left;,    sSortType='S'|width:50%;text-align:Left;|";
			$lsResponse << "Trace" + EOI + "Attachments" + EOI + "Children" + EOI + "sItemLinkQualified" + EOI + EOI + EOI + "false,false,none|Attachments|width:50%;text-align:Left;,    sSortType='S'|width:50%;text-align:Left;|";
			break;
		case "Workflow":
			$lsResponse << "sItemLink,false,none|Item|width:20%;text-align:center;|text-align:left;|";
			$lsResponse << "sWorkflowStateAndIcon,false,none|Workflow State|width:20%;text-align:center;|text-align:left;|";
			$lsResponse << "WorkflowCommands,false,none+<br>+AssignedRoles,false,none|Commands|width:20%;text-align:center;|text-align:left;|";
			break;
		case "CRItems":
			$lsResponse << "sItemLinkQualified,false,none|Description|width:90%;text-align:Left;,sSortType='S'|width:100%;text-align:Left;|";
			$lsResponse << "RemoveFromCR:PARENTREF,false,none||width:10%;text-align:Left;,sSortType='S'|width:100%;text-align:Left;|";
			break;

		default:
			$lsResponse << super::lsGetTableDef_Builtin( $sFormat );
			break;
	};

	return $lsResponse;
}
##===========================================================================
## MS_Office_Page
##
##===========================================================================
void SSC_DBObj::MS_Office_Page( $sFile, $sExt )
{
	## the load action depends on whether we have content already
	$sLoadAction = "OpenFromDB()";
	$sJSFile = Replace( $sFile, "\", "\\" );
	#inline
	<html>
	<head>
		<script type="text/javascript" >

			function sGetUrl(url)
			{
				//Don't use sCreateMessage since no requests will make it to the server
				if (top.bLogOutCalled) return "Error: Attempt to make request after log out";
				var xmlhttp;
				// code for IE7.
				if (window.XMLHttpRequest)
				{
					try {
						xmlhttp=new XMLHttpRequest();
						xmlhttp.open("GET", sUrl, true);
						xmlhttp.send(null);
 						return xmlhttp.responseText;
					} catch (e) {
						//xmlhttp.send thows a NetworkError when the process has been killed due to logout
						if (e.name == "NetworkError" || e.name == "NETWORK_ERR") {
							top.bLogOutCalled = true;
							var sHost = location.host;
							var sNewHost = sHost.replace(top.iServerPort, top.iServicePort);
							top.window.location.href = location.protocol + "//" + sNewHost + "/" + top.sKCServerID + "/login.asp?sLoginError=Session Expired";
							return;
						}
					}
				}//if

			}


			//Doc load
			function OnLoad()
			{
				var rtn = window.setTimeout( "<%$sLoadAction%>", 100 );
			}

			//Let the user create a new file
			function NewDoc()
			{
				try
				{
					oMSOCtrl.showdialog( 0 ); //dsoDialogNew
				}
				catch( err )
				{
					alert( "Unable to Create New Object: " + err.message );
				}
			}


			//Load the Office control with a file from the KC
			function OpenFromDB()
			{
				var sFile = "<% $sJSFile %>";
				var sExt = "<% $sExt %>";

				oMSOCtrl.OpenFromWeb( document.URL, sFile, sExt );
			}

			//Required event handler script that causes the Save command (whether via the File menu,
			//the toolbar button, or Ctrl+S) to save the document back to the KC.
			function oMSOCtrl_OnFileCommand( iFileItem, ByRef bCancel )
			{
				if( iFileItem == 2 )
					history.go( -1 );
				else if( iFileItem == 3 )	//3 is the "Save" file command index
				{
					//Save to the database, not the local file
					OnSaveToDB();
					//Prevent the regular save
					bCancel = true; //NOTE: this doesn't work; the control now hard-codes this result for Save
				}
			}

			//Tell the Office control to save its contents and then upload the file to the KC.
			function OnSaveToDB()
			{
				//tell the Office control to save the document to a tmp file and get its name
				var sTempFileName = oMSOCtrl.SaveToTemp();

				if (sTempFileName != "" )
				{
					//identify the object and its attribute name that will hold the document
					var sUrl = "DoKCPortalSaveBinary?oThis=<%$this.Ref%>&sAttrName=binFile";
					var sResult = oPortalHelper.SaveData( sTempFileName, document.URL, sUrl );
				}
				else
					alert( "Save to temp file failed." );
			}

		</script>
	</head>
	<body onload="OnLoad()" scroll=no style="margin:0px" >

		<!-- install hidden document uploader ActiveX control -->
		<object id="oPortalHelper"
		classid="clsid:93785969-58A7-4AEA-BD46-62597F5DB45A" width="0%" height="0%" style="width:0%;height:0%;display:none;">
		</object>

		<!-- install Cognition's modified Microsoft Office embedded document ActiveX control -->
		<object id="oMSOCtrl" codebase="MSOCtrl.cab#Version=2,4,5,0" data="MSOCtrl.cab#Version=2,4,5,0"
		classid="clsid:e3d7f682-3cff-4663-bb9d-c44af2fa2194" width="100%" height="99%">
			<param name="BorderStyle" value="0">
			<param name="Titlebar" value="0">
			<param name="Menubar" value="1">
		</object>

	</body>
	</html>
	#endinline;
}

#*!***************************************************************************************************
 * <summary>
 * Go through the detailed description of this object and cross check it against the list
 * of specially tagged documents to find out if any image docs are no longer required
 * </summary>
 * <visibility>
 *
 * </visibility>
*****************************************************************************************************#
void SSC_DBObj::EliminateUnusedImages()
{
	$oThis = *;

	## create an empty list to store unused documents
	$loUnused = CList();

	## get connection list
	$tcDocs = tcGetRelatedObjects( "ATTACHMENTS" );

	## go through all connections looking for candidates
	$tcDocs/
	{
		$oDoc = *;
		$oCon = oGetLinkObj( $oThis, "" );

		if ( $oDoc.bIsImageDoc() )
		{
			## if there are NO consumers of this connection and it is not required for the audit log
			if ( $oCon.IsNull Or ( ($oCon.sConsumers == "") AND ( Upper($oCon.sGetMapValue("S", "bUsedInAudit")) != "TRUE") ) )
				$loUnused << $oDoc;
		};
	};

	## get rid of unused documents
	$loUnused/
	{
		$oDoc = *;
		$sRet = $oThis.sOkToUnAssociate( $oDoc, "" );
		if ( $sRet == "" )
			$oThis.UnRegister( $oDoc, "" );
	};

}

##===========================================================================
## lsGetFakeTableDef
##===========================================================================
variant SSC_DBObj::lsGetFakeTableDef($sKey)
{
	$sSubKey = "";
	if ( find( $sKey, "_" ) != -1 )
	{
		$iItemCnt = ItemCount( $sKey, "_" );
		$sSubKey = "_" + Item( $sKey, 2, $iItemCnt, "_" );
		$sKey = Item( $sKey, 1, 1, "_" );
	};

	$lsRetval = CList();
	switch($sKey)
	{
		case "Notifications":
			$lsRetval << "sNotificationType|Notification Type|width:20%;||false; sValidate='none'";
			$lsRetval << "sSchedule|Schedule|width:35%;||false; sValidate='none'";
			$lsRetval << "sNotification|Notification|width:35%;||false; sValidate='none'";
			$lsRetval << "sEdit||width:5%;||false; sValidate='none'";
			$lsRetval << "sDelete||width:5%;||false; sValidate='none'";
			break;
	    default:
			$lsRetval << super::lsGetFakeTableDef($sKey);
			break;

	};
	return $lsRetval;

}
##===========================================================================
## GetFakeSnippet_Builtin
##===========================================================================
void SSC_DBObj::GetFakeSnippet_Builtin($sRequest)
{
	$sSupData = "";

	if( find( $sRequest, EOI ) != -1 )
	{
		$sSupData = Item( $sRequest, 2, 2, EOI );
		$sRequest = Item( $sRequest, 1, 1, EOI );
	};

	$sSubRequest = "";
	if ( find( $sRequest, "_" ) != -1 )
	{
		$iItemCnt = ItemCount( $sRequest, "_" );
		$sSubRequest = "_" + Item( $sRequest, 2, $iItemCnt, "_" );
		$sRequest = Item( $sRequest, 1, 1, "_" );
	};

	switch($sRequest)
	{
		case "sSchedule":
			$oThis = *;
			$sSchedule = SSC_ScheduleNotification::sGetNotificationData_s( $oThis, $sSupData, "Schedule", false );
			$sSchedule = SSC_ScheduleNotification::sGetVerboseSchedule_s( $sSchedule );
			$sSchedule;
			break;
		case "sNotification":
			$oThis = *;
			$sNotification = SSC_ScheduleNotification::sGetNotificationData_s( $oThis, $sSupData, "Notification", false );
			$sNotification;
			break;
		case "sNotificationType":
			if( find( $sSupData, "ks" ) != -1 )
				GetGenString( $sSupData );
			else
				$sSupData;
			break;
		case "sEdit":
			#inline
			<div class="Dialog ActionLink" sShowingWhat='NotificationSettings'
				sNotificationType='<%$sSupData%>' sRef='<%$this.Ref%>' onclick="top.currBodyTable = top.oFindTableDiv( this, true );" >
				Edit</div>
			#endinline;
			break;
		case "sDelete":
			$oThis = $this;
			$sInherited = GetRequest( "bInherited" );
			if( $sInherited == NULL )
				$sInherited = SSC_ScheduleNotification::bInheritSchedule_s( $oThis, $sSupData );

			$bInherited = Lower( CStr( $sInherited ) ) != "false"? true: false;
			if( NOT $bInherited )
			{
				#inline
				<div class="ActionLink"
					sNotificationType='<%$sSupData%>' sRef='<%$this.Ref%>' onclick="top.currBodyTable = top.oFindTableDiv( this, true ); top.DeleteNotification(this);" >
					Delete</div>
				#endinline;
			};
			break;
		default:
			if( $sSupData != "" )
				$sRequest += EOI + $sSupData;

			super::GetFakeSnippet_Builtin($sRequest);
			break;
	};
}
##===========================================================================
## lsGetMatrixTableDef
##===========================================================================
variant SSC_DBObj::lsGetMatrixTableDef( $sSwitchKind, $sSwitchHeader, $sImportanceRequest, $sImportanceHeader, $sColRequest, $sColDataRequest  )
{
	return lsGetMatrixTableDef( $sSwitchKind, $sSwitchHeader, $sImportanceRequest, $sImportanceHeader, $sColRequest, $sColDataRequest , null );
}
##===========================================================================
## lsGetMatrixTableDef
##
## This overload of the function allows for passing in the object list. $sColRequest is ignored in this case.
## The list needs to be passed in in any case where the data source is not 2.
##===========================================================================
variant SSC_DBObj::lsGetMatrixTableDef( $sSwitchKind, $sSwitchHeader, $sImportanceRequest, $sImportanceHeader, $sColRequest, $sColDataRequest, $loColList )
{
	$lsResponse = CList();
	$sSwitches = "";
	$bExport = GetRequest( "sExport" ) != NULL;

	$oSection = GetThreadContext( "oCurrentSection" );

	$sDocSectionFormat = $oSection.sGetData( "sDocFormatToUse" );
	$sTableDefID = "";
	$sThemeFolder = ::sGetThemeFolder();

	if( $bExport )
	{
		$sTableDefID = GetRequest( "sTableDefID" );
		if( $sTableDefID == NULL )
		{
			$sTableDefID = "MatrixTableDef_" + WosAseStaticHelper::sCreateGUID_s();
			SetRequest( "sTableDefID", $sTableDefID );
		};
	};

	$nCount = ::iGetCount( $sTableDefID );

	if( $bExport AND $nCount != NULL )
	{
		$iNumberToFetch = GetRequest( "iMatrixTableDefColsShowPerPage" );
		$loColList = ::loGetNextObjects( $sTableDefID, $iNumberToFetch, "Next" );
	}
	else
	{
		## populate the list of columns to display if it wasn't passed in by requesting it from the section
		if( $loColList == null )
		{
			$loColList = CList();

			$oSectionToUse = $oSection;

			## get the section to use for the data src. (can not use format override
			## since that includes view definitions which do not effect the data src)
			$oSectionToUseForDataSrcOverride = $oSection.oGetSectionToUseForDataSrc();
			if ( $oSectionToUseForDataSrcOverride != null )
				$oSectionToUse = $oSectionToUseForDataSrcOverride;

			## save the current data source index so we can reset the value after
			$nDataSourceIndexRequested = $oSectionToUse.GetContext( "nDataSourceIndexRequested" );

			$oSectionToUse.SetContext( "nDataSourceIndexRequested", 2, true );

			##The custom request is a format and should come from the section.
			$sCustomRequest2 = trim( $oSection.sGetData( "sSectionFormatCustomRequest2" ) );

			if ( $sCustomRequest2 != "" )
				$loColList << $oSectionToUse.loGetObjects( "Custom", $sCustomRequest2 );
			else
				$loColList << $oSectionToUse.loGetObjects( $sColRequest, "Mine" );

			## reset the data source index to the previous value
			$oSectionToUse.SetContext( "nDataSourceIndexRequested", $nDataSourceIndexRequested, true );
		};

		## apply a specified filter
		$sSectionFormatFilter2 = $oSection.sGetData( "sSectionFormatFilter2" );
		if( find( $sSectionFormatFilter2, EOI ) != -1 )
			$sSectionFormatFilter2 = Item( $sSectionFormatFilter2, 1, Itemcount( $sSectionFormatFilter2, EOI )-1, EOI );

		if ( $sDocSectionFormat == "Adhoc Matrix" and $sSectionFormatFilter2 != "" )
		{
			$loColList = loFilterList( $loColList, GetFilter( $sSectionFormatFilter2 ), true );
		};

		if( $bExport )
		{
			::RememberObjects( "PAGE", $sTableDefID, $loColList );

			## we want to display the matrix in chunks of 10-15, depending on which
			## will result in the last table having the most number of entries
			$nCount = Count( $loColList );

			$nIncrement = 15;
			$bSetIncrement = false;

			while( $nIncrement != 10 AND NOT $bSetIncrement )
			{
				if( ( $nCount MOD $nIncrement ) > ( $nIncrement DIV 2 ) )
					$bSetIncrement = true;
				else
					$nIncrement -= 1;
			};

			$nTables = 1 + Floor( $nCount DIV $nIncrement );
			$nColumnsPerTable = Ceil( $nCount DIV $nTables );

			SetRequest( "iMatrixTableDefColsShowPerPage", $nColumnsPerTable );
			SetRequest( "iMatrixTableTotal" + $sTableDefID, $nTables );

			## fetch the first batch of the table def
			$loColList = ::loGetNextObjects( $sTableDefID, $nColumnsPerTable, "Next" );
		};
	};

	## apply a specified sort
	$sSectionFormatSorting2 = $oSection.sGetData( "sSectionFormatSorting2" );

	if( find( $sSectionFormatSorting2, EOI ) != -1 )
		$sSectionFormatSorting2 = Item( $sSectionFormatSorting2, 1, Itemcount( $sSectionFormatSorting2, EOI )-1, EOI );

	if ( $sDocSectionFormat == "Adhoc Matrix" and $sSectionFormatSorting2 != "" )
	{
		$loColList = loTableSort( $loColList, GetSort( $sSectionFormatSorting2 ) );
	};

	## override the header if requested
	$sSectionFormatTitle = trim( $oSection.sGetData( "sSectionFormatTitle" ) );
	if ( $sDocSectionFormat == "Adhoc Matrix" and $sSectionFormatTitle != "" )
		$sSwitchHeader = $sSectionFormatTitle;

	if ( Not $bExport )
		$sSwitchHeader += "<br>(click to select)";

	if( NOT $bExport )
	{
		switch( Lower( $sSwitchKind ) )
		{
			case "link":
				$sSwitches  = ""; ## let's make simple linking simple... they should just click in the cells to toggle the setting
				$sSwitchHeader = $sSectionFormatTitle;
				##$sSwitches  = "<img id=Switch iValue='0' sSetting='RatingZero' src='Images/" + $sThemeFolder + "/RatingZero_switch.gif' />";
				##$sSwitches += "<img id=Switch iValue='1' sSetting='AllocatedTo' src='Images/" + $sThemeFolder + "/AllocatedTo_switch.gif' />";
				break;
			case "rating":
				$sSwitches  = "<img id=Switch iValue='9' sSetting='High' src='Images/" + $sThemeFolder + "/High_switch.png' />";
				$sSwitches += "<img id=Switch iValue='3' sSetting='Medium' src='Images/" + $sThemeFolder + "/Medium_switch.png' />";
				$sSwitches += "<img id=Switch iValue='1' sSetting='Low' src='Images/" + $sThemeFolder + "/Low_switch.png' />";
				$sSwitches += "<img id=Switch iValue='0' sSetting='none' src='Images/" + $sThemeFolder + "/none_switch.png' />";

				$sLegend  = "<table style='width:100%;border:.75pt solid gray;border:1px solid grey;border-collapse:collapse;margin-bottom:5px;text-align:center;'><tr><td colspan=2>Values</td></tr>";
				$sLegend += "<tr><td style='border:.75pt solid gray'><img id=Switch src='Images/" + $sThemeFolder + "/High_switch.png' /></td><td style='border:.75pt solid gray'>9</td></tr>";
				$sLegend += "<tr><td style='border:.75pt solid gray'><img id=Switch src='Images/" + $sThemeFolder + "/Medium_switch.png' /></td><td style='border:.75pt solid gray'>3</td></tr>";
				$sLegend += "<tr><td style='border:.75pt solid gray'><img id=Switch src='Images/" + $sThemeFolder + "/Low_switch.png' /></td><td style='border:.75pt solid gray'>1</td></tr>";
				$sLegend += "</table>";
				break;
			case "roof":
				$sSwitches  = "<img id=Switch iValue='-2' sSetting='RatingMinusMinus' src='Images/" + $sThemeFolder + "/RatingMinusMinus_switch.png' />";
				$sSwitches += "<img id=Switch iValue='-1' sSetting='RatingMinus' src='Images/" + $sThemeFolder + "/RatingMinus_switch.png' />";
				$sSwitches += "<img id=Switch iValue='0' sSetting='RatingZero' src='Images/" + $sThemeFolder + "/RatingZero_switch.png' />";
				$sSwitches += "<img id=Switch iValue='1' sSetting='RatingPlus' src='Images/" + $sThemeFolder + "/RatingPlus_switch.png' />";
				$sSwitches += "<img id=Switch iValue='2' sSetting='RatingPlusPlus' src='Images/" + $sThemeFolder + "/RatingPlusPlus_switch.png' />";

				$sLegend  = "<table style='width:100%;border:.75pt solid gray;border-collapse:collapse;margin-bottom:5px;text-align:center;'><tr><td colspan=2>Values</td></tr>";
				$sLegend += "<tr><td style='border:.75pt solid gray'><img src='Images/" + $sThemeFolder + "/RatingMinusMinus_switch.png' /></td><td style='border:.75pt solid gray'>-2</td></tr>";
				$sLegend += "<tr><td style='border:.75pt solid gray'><img src='Images/" + $sThemeFolder + "/RatingMinus_switch.png' /></td><td style='border:.75pt solid gray'>-1</td></tr>";
				$sLegend += "<tr><td style='border:.75pt solid gray'><img src='Images/" + $sThemeFolder + "/RatingPlus_switch.png' /></td><td style='border:.75pt solid gray'> 1</td></tr>";
				$sLegend += "<tr><td style='border:.75pt solid gray'><img src='Images/" + $sThemeFolder + "/RatingPlusPlus_switch.png' /></td><td style='border:.75pt solid gray'> 2</td></tr>";
				$sLegend += "</table>";
				break;
			case "competitor":
				$sSwitches  = "<img id=Switch iValue='0' sSetting='RatingZero' src='Images/" + $sThemeFolder + "/RatingZero_switch.png' />";
				$sSwitches += "<img id=Switch iValue='5' sSetting='One_16x16' src='Images/" + $sThemeFolder + "/One_16x16_switch.png' />";
				$sSwitches += "<img id=Switch iValue='4' sSetting='Two_16x16' src='Images/Two_16x16_switch.png' />";
				$sSwitches += "<img id=Switch iValue='3' sSetting='Three_16x16' src='Images/" + $sThemeFolder + "/Three_16x16_switch.png' />";
				$sSwitches += "<img id=Switch iValue='2' sSetting='Four_16x16' src='Images/" + $sThemeFolder + "/Four_16x16_switch.png' />";
				$sSwitches += "<img id=Switch iValue='1' sSetting='Five_16x16' src='Images/" + $sThemeFolder + "/Five_16x16_switch.png' />";
				break;
		};
	}
	else{

		switch( Lower( $sSwitchKind ) )
			{
				case "rating":
					$sLegend  = "<table style='width:100%;border:.75pt solid gray;border:1px solid grey;border-collapse:collapse;margin-bottom:5px;text-align:center;'><tr><td colspan=2>Values</td></tr>";
					$sLegend += "<tr><td style='border:.75pt solid gray'>H</td><td style='border:.75pt solid gray'>9</td></tr>";
					$sLegend += "<tr><td style='border:.75pt solid gray'>M</td><td style='border:.75pt solid gray'>3</td></tr>";
					$sLegend += "<tr><td style='border:.75pt solid gray'>L</td><td style='border:.75pt solid gray'>1</td></tr>";
					$sLegend += "</table>";
					break;
				case "roof":
					$sLegend  = "<table style='width:100%;border:.75pt solid gray;border-collapse:collapse;margin-bottom:5px;text-align:center;'><tr><td colspan=2>Values</td></tr>";
					$sLegend += "<tr><td style='border:.75pt solid gray'>- -</td><td style='border:.75pt solid gray'>-2</td></tr>";
					$sLegend += "<tr><td style='border:.75pt solid gray'>-</td><td style='border:.75pt solid gray'>-1</td></tr>";
					$sLegend += "<tr><td style='border:.75pt solid gray'>+</td><td style='border:.75pt solid gray'> 1</td></tr>";
					$sLegend += "<tr><td style='border:.75pt solid gray'>+ +</td><td style='border:.75pt solid gray'> 2</td></tr>";
					$sLegend += "</table>";
					break;
				default:
					break;
			};
	};


	## override the Scoring visibility if requested
	$sSectionFormatMatrixScoring = $oSection.sGetData( "sSectionFormatMatrixScoring" );
	if ( $sDocSectionFormat == "Adhoc Matrix" AND $sSectionFormatMatrixScoring == "Off" )
		$sImportanceRequest = "";

	$iMatrixColCount = Count( $loColList );
	SetRequest( "iMatrixColCount", $iMatrixColCount );
	$iMatrixRowCount = GetRequest( "iTotalFlexRows" );

	$iHeaderQtyToShow = CInt( $oSection.sGetData( "sSectionFormatColsToShow" ) );
	$iRowQtyToShow = CInt( $oSection.sGetData( "sSectionFormatRowsToShow" ) );

	$sMatrixScrollPicker = ::sGetMatrixScrollPicker( $iMatrixColCount, $iMatrixRowCount, $iHeaderQtyToShow, $iRowQtyToShow );

	## get row data to show
	## we set a thread to force the ID because the matrix should still show it even if the
	## project setting for it had been set to not show the ID
	$sSectionFormatRowData = $oSection.sGetData( "sSectionFormatRowData" );
	$sTags = "";

	if( $sSectionFormatRowData == "Text only" )
		$sDataRequestRow = "sDescriptionMatrix";
	else if ( $sSectionFormatRowData == "Id & Text" )
	{
		$sDataRequestRow = "sDescriptionWithID";
		$thread.Context.Set( "sForceIDForDescriptionText", true );
		$sTags = " sTagAttrs='" + URLEncode( "&sForceIDForDescriptionText=true" ) + "' ";
	}
	else if ( $sSectionFormatRowData == "Icon & Text" )
		$sDataRequestRow = "sItemNameNoId";
	else if ( $sSectionFormatRowData == "Icon, Id & Text" )
	{
		$sDataRequestRow = "sItemName";
		$thread.Context.Set( "sForceIDForDescriptionText", true );
		$sTags = " sTagAttrs='" + URLEncode( "&sForceIDForDescriptionText=true" ) + "' ";
	};

	$sControlLegendTable = "<table style='width:100%;text-align:center;'><tr>";
	$sControlLegendTable += "<td style='width:25%'>" + $sLegend + "</td>";
	$sControlLegendTable += "<td style='width:75%'>" + $sSwitchHeader + "<br>" + $sSwitches + "<br><br>" + $sMatrixScrollPicker + "<br></td>";
	$sControlLegendTable += "</tr></table>";

	## get col data to show
	$sDataRequestCol = "sDescription";
	$sSectionFormatColData = $oSection.sGetData( "sSectionFormatColData" );
	$bShowColId = $sSectionFormatColData ~ "m/Id/";
	if($bShowColId)
		$sDataRequestCol = "sDescriptionWithID";

	$lsResponse << "<div id='Voice'>+" + $sDataRequestRow + ",true,none;" + $sTags + "+</div>|" + $sControlLegendTable + "|width:4in;vertical-align:bottom;text-align:center;,sSortType='-'|padding-top:2px;width:4in;vertical-align:middle;text-align:left;|";
	if( $sImportanceRequest != "" )
		$lsResponse << $sImportanceRequest + "; id='Importance' sEmptyPrompt='?'|" + $sImportanceHeader + "|width:.47in;vertical-align:bottom;text-align:center;,sSortType='N'|vertical-align:middle;text-align:center;|";

	$iMatrixColumnHeaderHeight = $me.oPerson.sGetData( "iMatrixColumnHeaderHeight" );
	$loColList/{
		$oItem=*;
		$sSafeRef = Replace( $oItem.Ref, "|", "-" );

		##$sTitle = sGetData( $sDataRequestCol );

		##if ( find( $sTitle, EOI ) != -1 )
		##	$sTitle = Item( $sTitle, 2, 2, EOI );

		$sTitle= sGetDecoratedText( $sDataRequestCol, false, "", "table" );
		$sCol = "<div id='RoofItem' sRef='" + $sSafeRef + "'";
		$sCol += " iMatrixColumnHeaderHeight='" + $iMatrixColumnHeaderHeight + "' sShowingWhat='ClippedColumnText" + eoi + $sDataRequestCol + "' >" + $sTitle + "</div>" ;
		$sCurr = $sColDataRequest +eoi+$sSafeRef+",true,none;" + $sTags + "|" + $sCol + "|";

		if( $bExport )
			$sCurr += "mso-rotate:90;";

		$sLevel = "0";
		$nLevel = *.GetContext( "Level", true );
		$bPaddingBottomOverride = false;
		if ( $nLevel != null ) {
			$sLevel = ::sIndentMargin($nLevel, 2);
			if( $bExport ) {
				$sCurr += "margin-left:" + $sLevel + "in;";
			} else {
				$bPaddingBottomOverride = true;
				$sCurr += "padding-bottom:" + $sLevel + "in;";
			};
		};

		if ( NOT $bPaddingBottomOverride ) {
			$sCurr += "padding-bottom:5px;";
		};
		$sCurr += "max-width:.33in;width:.33in;min-height:" + $iMatrixColumnHeaderHeight + "in;,sSortType='N' align=left|vertical-align:middle;text-align:center;|";
		$lsResponse << $sCurr;
	};
	return $lsResponse;
}

##===========================================================================
## GetDialog_Builtin ( $sShowingWhat, $sRequest, $sContext )
## $sShowingWhat -> Type of object (subsystem )
## $sRequest -> Filter type (Events, Voices, Reqs, Specs, Risks, Test, etc)
## $sContext -> TOC or sticky note [style type]
##===========================================================================
void SSC_DBObj::getDialog_Builtin ( $sShowingWhat, $sRequest, $sContext )
{
	$sOriginalRequest = $sShowingWhat;
	if( find( $sShowingWhat, EOI ) != -1 )
	{
		$sSubRequest = Item( $sShowingWhat, 2, Itemcount( $sShowingWhat, EOI ), EOI );
		$sShowingWhat = Item( $sShowingWhat, 1, 1, EOI );
	};
	switch( $sShowingWhat )
	{
		case "WorkflowCommandMenu":
			$bDeleted = bIsPseudoDeleted();

			## early out if the object is pseudo deleted
			if( $bDeleted )
				return;

			$oThis = *;

			## get the custom commands for this class
			$loCustom = loGetCommands( "", "" );

			## if there are some, lets get specific ones
			$loLeft = $loCustom[ sMenuLocation == "LEFT" ];
			$loMiddle = $loCustom[ sMenuLocation == "MIDDLE" ];
			$loRight = $loCustom[ sMenuLocation == "RIGHT" ];

			$sThemeFolder = ::sGetThemeFolder();

			## custom left panel
			$iTop = ::iDialogTopStart();
			$iTopOrig = $iTop;
			$iLeftIcon = ::iDialogIconStart( "left" );
			$iLeftText = ::iDialogTextStart( "left" );
			$iItemHeight = ::iDialogItemHeight();
			$loLeft/
			{
				$oCommand = *;
				$sCommandRef = Ref;
				$bAuthenticate = bSignatureRequired;
				$bHasVariables = bHasVariables();
				$sDialogSize = sGetDialogSize();

				$sIcon = $oCommand.sCommandIcon;

				##make sure we look in the images theme directory if no path
				if( $sIcon != "" )
					$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );

				$sCommandDescr = $oCommand.sDescription;

				#inline
				<span>
				#endinline;

				if ( $sIcon != "" )
				{
					$iIconTop = $iTop;
					#inline
					<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iIconTop%>px;" sShowingWhat="<%$sCommandDescr%>" sRef=<%$this.Ref%> class="HelpTip" sHelpId="Callout_StateBased_Command">
					#endinline;
				};

				#inline
				<div sRef=<%$oThis.Ref%> sCmd=<%$sCommandRef%> onclick='top.RunStateBasedCommand( this );' dynamicHelpTip=true sDialogSize="<%$sDialogSize%>"
					bHasVariables='<%$bHasVariables?"true":"false"%>'
					style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:175px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
					<%$sCommandDescr%>
				</div>
				</span>
				#endinline;

				$iTop += $iItemHeight;
			};

			## custom middle panel
			$iTop = $iTopOrig;
			$iLeftIcon = ::iDialogIconStart( "middle" );
			$iLeftText = ::iDialogTextStart( "middle" );
			$loMiddle/
			{
				$oCommand = *;
				$sCommandRef = Ref;
				$sIcon = $oCommand.sCommandIcon;
				##make sure we look in the images theme directory if no path
				if( $sIcon != "" )
					$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );

				$bAuthenticate = bSignatureRequired;
				$bHasVariables = bHasVariables();
				$sDialogSize = sGetDialogSize();

				#inline
				<span>
				#endinline;

				if ( $sIcon != "" )
				{
					$iIconTop = $iTop;
					#inline
					<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iIconTop%>px;" sShowingWhat="<%$sCommandDescr%>"
						sRef=<%$this.Ref%> class="HelpTip" sHelpId="Callout_StateBased_Command">
					#endinline;
				};

				#inline
				<div sRef=<%$oThis.Ref%> sCmd=<%$sCommandRef%> onclick='top.RunStateBasedCommand( this );'  dynamicHelpTip=true sDialogSize="<%$sDialogSize%>"
					bHasVariables='<%$bHasVariables?"true":"false"%>'
					style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:125px;height:13px;" class="HelpTip"
						sHelpId="Callout_Command<%EOI + $sCommandRef%>">
					<%$oCommand.sDescription%>
				</div>
				</span>
				#endinline;

				$iTop += $iItemHeight;
			};

			## custom right panel
			$iTop = $iTopOrig;
			$iLeftIcon = ::iDialogIconStart( "right" );
			$iLeftText = ::iDialogTextStart( "right" );
			$loRight/
			{
				$oCommand = *;
				$sCommandRef = Ref;
				$sIcon = $oCommand.sCommandIcon;
				##make sure we look in the images theme directory if no path
				if( $sIcon != "" )
					$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );
				$bAuthenticate = bSignatureRequired;
				$bHasVariables = bHasVariables();
				$sDialogSize = sGetDialogSize();

				#inline
				<span>
				#endinline;

				if ( $sIcon != "" )
				{
					$iIconTop = $iTop;
					#inline
					<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iIconTop%>px;"
						sShowingWhat="<%$sCommandDescr%>" sRef=<%$this.Ref%> class="HelpTip" sHelpId="Callout_StateBased_Command">
					#endinline;
				};

				#inline
				<div sRef=<%$oThis.Ref%> sCmd=<%$sCommandRef%> onclick='top.RunStateBasedCommand( this );' dynamicHelpTip=true sDialogSize="<%$sDialogSize%>"
					bHasVariables='<%$bHasVariables?"true":"false"%>'
					style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:100px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
					<%$oCommand.sDescription%>
				</div>
				</span>
				#endinline;

				$iTop += $iItemHeight;
			};



			#inline
				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span class="ActionLink"
					onclick="top.closeCallout();"
					onkeypress="top.closeCallout();">
						done
					</span>
				</div>
			#endinline;

			break;

		case "UploadExistingFile":
			$sRef = $this.Ref;
			##$bCanCreate = $this.bCheckAccess( "MODIFY" + EOI + "&sChange=OTHER,ATTACHMENTS" );
			$bCanCreate = $this.bCheckAccess( "MODIFY");
			if( $bCanCreate )
			{
				#inline
					<div style="position:absolute;left:30px;top:12px;width:225px;height:16px;z-index:300069" align="left">
						<h1>Upload Existing File</h1>
					</div>
					<input class="fileUploadField" id="fileToImport" type="file" sRef=<% $sRef %> sShowingWhat="file"
					style="position:absolute;left:50px;top:58px;width:368px;height:23px;" size="40" NAME="fileToImport" tabindex=100
					sUrl="<%URLEncode( "ProgressBar.ase?sInitialText=Uploading+file...&sPage=RunCommand.ase&sCommand=AttachFileNew&oThis=" + $sRef + "&bUpdateTxn=true&sDontConvertBMP=true" )%>"
					publisher="<% $sRef %>~onRefresh~">

					<div style="position:absolute;left:308px;top:160px;height:13px;" tabindex=102>
						<% ::sMarkUpBox( "Back", "back" ) %>
					</div>

					<div class="ActionLink" style="position:absolute;left:345px;top:160px;width:175px;height:13px;cursor:pointer"
					sRef=<% $sRef %> sShowingWhat="UploadExistingFile" onclick="top.bAddAnother=true; top.UploadFile( document.getElementById( 'fileToImport' ) )" >
						add another
					</div>

					<div style="position:absolute;left:425px;top:160px;width:110px;height:13px;">
						<span class="ActionLink"
						onclick="top.UploadFile( document.getElementById( 'fileToImport' ) )" onkeypress="top.UploadFile( document.getElementById( 'fileToImport' ) )"
						tabindex=101>finish</span>
					</div>


				#endinline;
			}
			else
			{
				#inline
				<div style="position:absolute;left:68px;top:49px;width:334px;height:63px;">
					<center><%  GetGenString( "ksNoPrivilege" ) %></center>
				</div>
				<span class="ActionLink" style="position:absolute;left:250px;top:158px;width:38px;height:13px;" onclick="top.closeCallout();">
					close
				</span>
				#endinline;

			};
		break;
		case "UploadUrl":
			$sRef = $this.Ref;
			$bCanCreate = $this.bCheckAccess( "MODIFYWOVERSION" );
			if( $bCanCreate )
			{
				#inline
					<div style="position:absolute;left:15px;top:12px;width:260px;height:16px;">
						<h1>Attach from url</h1>
					</div>

					<div style="position:absolute;left:28px;top:46px;width:40px;height:13px">
						Name
					</div>

					<div>
						<input class="fieldFocus" type="text" id="sName"
						  style="position:absolute;left:105px;top:46px;width:300px;font:8pt Verdana; " size="35" tabindex=101>
					</div>

					<div style="position:absolute;left:28px;top:68px;width:40px;height:13px">
						Url
					</div>
					<div>
						<input  class="" type="text" id="sUrl"
						style="position:absolute;left:105px;top:68px;width:300px;font:8pt Verdana;" size="35" tabindex=102>

					</div>

					<div style="position:absolute;left:380px;top:160px;height:13px;" tabindex=102>
						<% ::sMarkUpBox( "Back", "back" ) %>
					</div>
					<div style="position:absolute;left:420px;top:160px;width:25px;height:13px;">
						<span class="ActionLink" sRef='<%$sRef%>'
						publisher="<% $sRef %>~onRefresh~"
						onclick="top.UploadUrl(this)" onkeypress="top.UploadUrl(this)" tabindex=103>finish</span>
					</div>


				#endinline;
				}
			else
			{
				#inline
				<div style="position:absolute;left:68px;top:49px;width:334px;height:63px;">
					<center><%  GetGenString( "ksNoPrivilege" ) %></center>
				</div>
				<span style="position:absolute;left:200px;top:158px;width:38px;height:13px;">
					<% ::sMarkUpBox( "Back", "back" ) %>
				</span>
				<span class="ActionLink" style="position:absolute;left:250px;top:158px;width:38px;height:13px;" onclick="top.closeCallout();">
					close
				</span>
				#endinline;

			};
			break;
		case "Highlight":
			$sRef = $this.Ref;
			$loMarkups = $this.loGetObjects( "Markups", "Mine" )[ iType == 2 ];

			if( NOT IsEmpty( $loMarkups ) )
			{
				$oMarkup = First( $loMarkups );

				$oMarkup.getDialog_Builtin( "",$sRef,$sContext );
			}
			else
			{
				#inline
					<div style="position:absolute;left:15px;top:12px;width:160px;height:16px;">
						<h1>Highlight</h1>
					</div>

					<div style="position:absolute;left:75px;top:45px;width:292px;height:40px;">
						<table width="100%" border="1" cellpadding="0" cellspacing="1">
							<tr>
								<td bgcolor="#FFC0CB" width="20" height="20" style="cursor:pointer" value=1 tabindex=101
								sRef='<%$sRef%>' class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iColor" bGetDBsave=true>&nbsp;</td>
								<td bgcolor="#FFD700" width="20" height="20" style="cursor:pointer" value=2 tabindex=102
								sRef='<%$sRef%>' class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iColor" bGetDBsave=true>&nbsp;</td>
								<td bgcolor="#FFFF00" width="20" height="20" style="cursor:pointer" value=3 tabindex=103
								sRef='<%$sRef%>' class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iColor" bGetDBsave=true>&nbsp;</td>
								<td bgcolor="#00FF00" width="20" height="20" style="cursor:pointer" value=4 tabindex=104
								sRef='<%$sRef%>' class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iColor" bGetDBsave=true>&nbsp;</td>
								<td bgcolor="#40E0D0" width="20" height="20" style="cursor:pointer" value=5 tabindex=105
								sRef='<%$sRef%>' class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iColor" bGetDBsave=true>&nbsp;</td>
								<td bgcolor="#C0FFFF" width="20" height="20" style="cursor:pointer" value=6 tabindex=106
								sRef='<%$sRef%>' class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iColor" bGetDBsave=true>&nbsp;</td>
							</tr>
						</table>
					</div>
					<div style="position:absolute;left:30px;top:90px;height:13px;">
						Comment:
					</div>
					<div>
						<textarea firstField="true" class="dialogField" id="sText" style="position:absolute;left:30px;top:105px;width:410px;height:47px;"
						sRef='<%$sRef%>' value = ''
						rows="4" cols="38" tabindex=135 sRequest=<% $sShowingWhat %> bGetDBsave=true></textarea>
					</div>
					<div style="position:absolute;left:380px;top:160px;height:13px;"  tabindex=138>
						<%::sMarkUpBox( "Back", "back" )%>
					</div>
					<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
						<span class="ActionLink" onclick="top.saveDialogData(); top.closeCallout();"
						onkeypress="top.saveDialogData(); top.closeCallout();" tabindex=137>finish</span>
					</div>
				#endinline;
			};
			break;
		case "Strike":
			$sRef = $this.Ref;
			$loMarkups = $this.loGetObjects( "Markups", "Mine" )[ iType == 1 ];

			if( NOT IsEmpty( $loMarkups ) )
			{
				$oMarkup = First( $loMarkups );

				$oMarkup.getDialog_Builtin( "",$sRef,$sContext  );
			}
			else
			{
				#inline
					<div style="position:absolute;left:15px;top:12px;width:160px;height:16px;">
						<h1>Strikethrough</h1>
					</div>

					<div style="position:absolute;left:30px;top:40px;height:13px;">
						Comment:
					</div>
					<div>
						<textarea firstField="true" class="dialogField" id="sText" style="position:absolute;left:30px;top:55px;width:410px;height:95px;" rows="4"
						sRef='<%$sRef%>' value = ''
						cols="38" tabindex=135 sRequest=<% $sShowingWhat %> bGetDBsave=true></textarea>
					</div>
					<div style="position:absolute;left:380px;top:160px;height:13px;"  tabindex=138>
						<%::sMarkUpBox( "Back", "back" )%>
					</div>
					<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
						<span class="ActionLink" onclick="top.saveDialogData(); top.closeCallout();"
						onkeypress="top.saveDialogData(); top.closeCallout();" tabindex=137>finish</span>
					</div>
				#endinline;
			};
			break;
		case "Comment":
			$sRef = $this.Ref;
			$sThemeFolder = ::sGetThemeFolder();
			#inline
				<div style="position:absolute;left:15px;top:12px;width:160px;height:16px;">
					<h1>Tag</h1>
				</div>

				<div style="position:absolute;left:52px;top:25px;width:354px;height:30px;">
					<table width="100%" border="0">
						<tr>
							<td align="center" value="1"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>'><img src="images/<% $sThemeFolder %>/calloutIcons/1.png" ></td>
							<td align="center" value="2"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/2.png" ></td>
							<td align="center" value="3"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/3.png" ></td>
							<td align="center" value="4"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/4.png" ></td>
							<td align="center" value="5"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/5.png" ></td>
							<td align="center" value="6"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/6.png" ></td>
							<td align="center" value="7"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/7.png" ></td>
							<td align="center" value="8"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/8.png" ></td>
							<td align="center" value="9"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/9.png" ></td>
							<td align="center" value="10"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/10.png" ></td>
							<td align="center" value="11"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/11.png" ></td>
							<td align="center" value="12"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/12.png" ></td>
						</tr>
						<tr>
							<td align="center" value="13"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/13.png" ></td>
							<td align="center" value="14"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/14.png" ></td>
							<td align="center" value="15"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/15.png" ></td>
							<td align="center" value="16"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/16.png" ></td>
							<td align="center" value="17"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/17.png" ></td>
							<td align="center" value="18"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/18.png" ></td>
							<td align="center" value="19"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/19.png" ></td>
							<td align="center" value="20"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/20.png" ></td>
							<td align="center" value="21"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/21.png" ></td>
							<td align="center" value="22"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/22.png" ></td>
							<td align="center" value="23"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/23.png" ></td>
							<td align="center" value="24"	class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/24.png" ></td>
						</tr>
						<tr>
							<td align="center" value="25" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/25.png" ></td>
							<td align="center" value="26" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/26.png" ></td>
							<td align="center" value="27" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/27.png" ></td>
							<td align="center" value="28" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/28.png" ></td>
							<td align="center" value="29" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/29.png" ></td>
							<td align="center" value="30" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/30.png" ></td>
							<td align="center" value="31" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/31.png" ></td>
							<td align="center" value="32" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/32.png" ></td>
							<td align="center" value="33" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/33.png" ></td>
							<td align="center" value="34" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/34.png" ></td>
							<td align="center" value="35" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/35.png" ></td>
							<td align="center" value="36" class="CalloutIcon" sRequest=<% $sShowingWhat %> id="iIcon" bGetDBsave=true sRef='<%$sRef%>' ><img src="images/<% $sThemeFolder %>/calloutIcons/36.png" ></td>
						</tr>
					</table>
				</div>

				<img src="images/<% $sThemeFolder %>/_help.png"	title="Help" width="14" height="14" style="position:absolute;left:413px;top:12px;width:14px;height:14px">

				<div style="position:absolute;left:30px;top:95px;width:410px;height:55px;">
					Comment
				</div>
				<div>
					<textarea firstField="true" class="dialogField" id="sText" style="position:absolute;left:30px;top:110px;width:410px;height:42px;"
					value = ''
					rows="4" cols="38" tabindex=135 sRequest=<% $sShowingWhat %> bGetDBsave=true sRef='<%$sRef%>' ></textarea>
				</div>
				<div style="position:absolute;left:380px;top:160px;height:13px;"  tabindex=138>
					<%::sMarkUpBox( "Back", "back" )%>
				</div>
				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span class="ActionLink" onclick="top.saveDialogData(); top.closeCallout();"
					onkeypress="top.saveDialogData(); top.closeCallout();" tabindex=137>finish</span>
				</div>
			#endinline;
			break;
		case "AttachFile":
			$bCanCreate = $this.bCheckAccess( "MODIFYWOVERSION" );
			$sRef = $this.Ref;

			$sCurrentLayout = GetRequest( "sCurrentLayout" );
			if( $sCurrentLayout == NULL )
				$sCurrentLayout = "";

			if( $bCanCreate )
			{
				#inline
					<div style="position:absolute;left:30px;top:12px;width:160px;height:16px;z-index:300069" align="left">
						<h1>Attach File</h1>
					</div>
					<div class="Dialog ActionLink" style="position:absolute;left:30px;top:55px;width:125px;height:13px; cursor:pointer"
					sRef=<% $sRef %> sShowingWhat="UploadExistingFile">
						Upload local file
					</div>
					<div class="Dialog ActionLink" style="position:absolute;left:30px;top:75px;width:125px;height:13px; cursor:pointer"
					sRef=<% $sRef %> sShowingWhat="UploadUrl">
						Attach from Url
					</div>
				#endinline;

					if( $sCurrentLayout != "Organization" )
					{
						#inline
						<div class="rightPopoutButton ActionLink" style="position:absolute;left:30px;top:95px;width:225px;height:13px;cursor:pointer"
						sParentClass = '<%*.classname%>' sRef = '<%$sRef%>' sRequest = 'Attachments' sType = "LINK" sLinkerParams = 'Child' onclick="top.closeCallout();">
							Add From Current Project
						</div>
						#endinline;
					};

				#inline
					<div style="position:absolute;left:420px;top:160px;height:13px;"  tabindex=105>
						<%::sMarkUpBox( "Back", "back" )%>
					</div>
				#endinline;
			}
			else
			{
				#inline
				<div style="position:absolute;left:68px;top:49px;width:334px;height:63px;">
					<center><%  GetGenString( "ksNoPrivilege" ) %></center>
				</div>
				<span style="position:absolute;left:200px;top:158px;width:38px;height:13px;">
					<% ::sMarkUpBox( "Back", "back" ) %>
				</span>
				<span class="ActionLink" style="position:absolute;left:250px;top:158px;width:38px;height:13px;" onclick="top.closeCallout();">
					close
				</span>
				#endinline;
			};
		break;
		case "Create_Notifications":
			$lsNotificationTypes = $this.lsGetNotificationTypeKeys();
			$sRef = $this.Ref;
			#inline
			<div style="position:absolute;left:15px;top:12px;width:360px;height:16px;">
					<h1>Chose a notification type:</h1>
				</div>
				<div id="NotificationCollection"
					style="position:absolute;left:30px;top:40px;width:410px;height:111px; border: 2px solid LightSteelBlue; background-color:white;
					overflow:auto; font-family:verdana;">

			#endinline;
				$lsNotificationTypes/
				{
					$sKey = Item( *, 1, 1, "|" );
					$sDisplay = Item( *, 2, 2, "|" );

					#inline
					<div id=Notification>
						<input type='radio' value='<%$sKey%>' name='Notifications' <%$iternum == 0? "checked":""%> />
						<span style='font:8pt verdana;'><%$sDisplay%></span>
					</div>
					#endinline;

				};


			#inline
				</div>
				<div style="position:absolute;left:370px;top:160px;width:25px;height:13px;">
					<% ::sMarkUpBox( "Back", "back" ) %>
				</div>
				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span class="ActionLink" onclick="top.NewNotification( this );" sRef='<%$sRef%>'
					onkeypress="top.NewNotification( this );" tabindex=103>
						next
					</span>
				</div>
			#endinline;
			break;
		case "NotificationSettings":
			$bIsProject = $this.classname == "SSC_Project" ? true: false;
			$sNotificationType = GetRequest( "sNotificationType" );

			$sInheritedSchedule = GetRequest( "sInheritedSchedule" );
			if( $sInheritedSchedule == NULL )
				$sInheritedSchedule = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "Schedule", true );

			$sInheritedScheduleDisplay = GetRequest( "sInheritedScheduleDisplay" );
			if( $sInheritedScheduleDisplay == NULL )
			{
				$sInheritedScheduleDisplay = SSC_ScheduleNotification::sGetVerboseSchedule_s( $sInheritedSchedule );
				if( $sInheritedScheduleDisplay == "" )
					$sInheritedScheduleDisplay = "<No schedule>";
			};

			$sInheritedNotificationText = GetRequest( "sInheritedNotificationText" );
			if( $sInheritedNotificationText == NULL )
				$sInheritedNotificationText = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "Notification", true );

			$sInheritedChildCanInherit = GetRequest( "bInheritedChildCanInherit" );
			if( $sInheritedChildCanInherit == NULL )
				$sInheritedChildCanInherit = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "ApplyToChildren", true );

			$bInheritedChildCanInherit = Lower( CStr( $sInheritedChildCanInherit ) ) != "false"? true: false;

			$sInherited = GetRequest( "bInherited" );
			if( $sInherited == NULL )
			{
				if( $bIsProject )
					$sInherited = "false";
				else
					$sInherited = SSC_ScheduleNotification::bInheritSchedule_s( $this, $sNotificationType );
			};


			$bInherited = Lower( CStr( $sInherited ) ) != "false"? true: false;

			$sIndependantSchedule = GetRequest( "sIndependantSchedule" );
			if( $sIndependantSchedule == NULL )
				if( NOT $bInherited )
					$sIndependantSchedule = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "Schedule", false );
				else
					$sIndependantSchedule = "";

			$sIndependantScheduleDisplay = GetRequest( "sIndependantScheduleDisplay" );
			if( $sIndependantScheduleDisplay == NULL )
				if( NOT $bInherited )
					$sIndependantScheduleDisplay = SSC_ScheduleNotification::sGetVerboseSchedule_s( $sIndependantSchedule );
				else
					$sIndependantScheduleDisplay = "<No schedule>";

			$sIndependantNotification = GetRequest( "sIndependantNotification" );
			if( $sIndependantNotification == NULL )
				if( NOT $bInherited )
					$sIndependantNotification = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "Notification", false );
				else
					$sIndependantNotification = "";

			$sIndependantChildCanInherit = GetRequest( "bIndependantChildCanInherit" );
			if( $sIndependantChildCanInherit == NULL )
				if( NOT $bInherited )
					$sIndependantChildCanInherit = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "ApplyToChildren", false );
				else
					$sIndependantChildCanInherit = "true";

			$bIndependantChildCanInherit = Lower( CStr( $sIndependantChildCanInherit ) ) != "false"? true: false;

			$sRef = $this.Ref;

			#inline
			<div style="position:absolute;left:15px;top:12px;width:260px;height:16px;">
				<h1>Item Notification Setting</h1>
			</div>

			<input type=hidden id='sNotificationType' value='<%$sNotificationType%>'/>
			<input type=hidden id='bInherited' value='<%$bInherited%>'/>
			<input type=hidden id='sInheritedSchedule' value='<%htmlencode($sInheritedSchedule)%>'/>
			<input type=hidden id='sInheritedScheduleDisplay' value='<%htmlencode($sInheritedScheduleDisplay)%>'/>
			<input type=hidden id='sInheritedNotificationText' value='<%htmlencode($sInheritedNotificationText)%>'/>
			<input type=hidden id='bInheritedChildCanInherit' value='<%$bInheritedChildCanInherit%>'/>

			#endinline;

			if( NOT $bIsProject )
			{
				#inline
				<div style="position:absolute;left:10px;top:25px;width:200px;height:16px;">
					<input type='radio' name='NotificationSetting' <%$bInherited? "checked":"" %> tabindex=101
					onclick='top.swapObjectDisplayById( this, "InheritedValues", "IndependantValues" ); this.ownerDocument.getElementById( "bInherited" ).value= "true";'/>
					<span style='font:8pt verdana;'> Inherit schedule from parent </span>
				</div>

				<div style="position:absolute;left:210px;top:25px;width:360px;height:16px;">
					<input type='radio' name='NotificationSetting' <%$bInherited? "" : "checked" %> tabindex=102
					onclick='top.swapObjectDisplayById( this, "IndependantValues", "InheritedValues" ); this.ownerDocument.getElementById( "bInherited" ).value= "false";'	/>
					<span style='font:8pt verdana;'> Use an independent schedule or none</span>
				</div>
				#endinline;
			};

			#inline
			<div id='InheritedValues' style='display: <%$bInherited? "block":"none"%>;'>
				<div style="position:absolute;left:15px;top:48px;width:70px;height:16px;">
					<span style='font:8pt verdana;width:70px;'> Schedule:</span>
				</div>
				<textarea style="position:absolute;left:75px;top:48px;width:375px;height:28px;font:8pt verdana;" disabled><%$sInheritedScheduleDisplay%></textarea>
				<div style="position:absolute;left:15px;top:82px;width:230px;height:16px;">
					<span style='font:8pt verdana;width:70px;'> Allow this schedule to be inherited:</span>
				</div>
				<div style="position:absolute;left:235px;top:80px;width:55px;height:40px;">
					<input type='radio' name='InheritedChildCanInherit'
						<%$bInheritedChildCanInherit? "checked" : "" %> disabled/>
					<span style='font:8pt verdana;'>Yes</span>
				</div>
				<div style="position:absolute;left:285px;top:80px;width:55px;height:40px;">
					<input type='radio' name='InheritedChildCanInherit'
						<%$bInheritedChildCanInherit? "" : "checked" %> disabled/>
					<span style='font:8pt verdana;'>No</span>
				</div>
				<div style="position:absolute;left:15px;top:98px;width:170px;height:16px;">
					<span style='font:8pt verdana;width:70px;'> Notification Text:</span>
				</div>
				<textarea style="position:absolute;left:15px;top:118px;width:435px;height:40px;font:8pt verdana;" disabled> <%$sInheritedNotificationText%> </textarea>
			</div>

			<div id='IndependantValues' style='display: <%$bInherited? "none":"block"%>;'>
				<input type='hidden' id='sIndependantSchedule' value='<%htmlencode( $sIndependantSchedule ); %>'/>
				<input type='hidden' id='sIndependantScheduleDisplay' value='<%htmlencode( $sIndependantScheduleDisplay ); %>'/>
				<div style="position:absolute;left:15px;top:<%$bIsProject? 28:48%>px;width:70px;height:15px;">
					<span style='font:8pt verdana;width:70px;'> Schedule:</span>
				</div>
				<textarea  style="position:absolute;left:75px;top:<%$bIsProject? 28:48%>px;width:375px;height:<%$bIsProject? 48:28%>px;font:8pt verdana;" disabled><%$sIndependantScheduleDisplay%></textarea>
				<div style="position:absolute;left:15px;top:<%$bIsProject? 42:62%>px;width:70px;height:16px;">
					<input type='button' onclick='top.SetSchedule( this, "<%$sRef%>" );'
						style='font:8pt verdana;' value='Set' tabindex=103>
				</div>
				<div style="position:absolute;left:15px;top:82px;width:230px;height:16px;">
					<span style='font:8pt verdana;width:70px;'> Allow this schedule to be inherited:</span>
				</div>
				<input type='hidden' id='bIndependantChildCanInherit' value='<%$bIndependantChildCanInherit? "true" : "false" %>'/>
				<div style="position:absolute;left:235px;top:80px;width:55px;height:40px;">
					<input type='radio' name='IndependantChildCanInherit' <%$bIndependantChildCanInherit? "checked" : "" %>
						onclick='this.ownerDocument.getElementById( "bIndependantChildCanInherit" ).value= "true";' tabindex=104/>
					<span style='font:8pt verdana;'>Yes</span>
				</div>
				<div style="position:absolute;left:285px;top:80px;width:55px;height:40px;">
					<input type='radio' name='IndependantChildCanInherit' <%$bIndependantChildCanInherit? "" : "checked" %>
						onclick='this.ownerDocument.getElementById( "bIndependantChildCanInherit" ).value= "false";' tabindex=105/>
					<span style='font:8pt verdana;'>No</span>
				</div>
				<div style="position:absolute;left:15px;top:98px;width:170px;height:16px;">
					<span style='font:8pt verdana;width:70px;'> Notification Text:</span>
				</div>
				<textarea id='sIndependantNotification' tabindex=106
						style="position:absolute;left:15px;top:118px;width:435px;height:40px;font:8pt verdana;"><%$sIndependantNotification%></textarea>
			</div>

			<div style="position:absolute;left: 380px;top:165px;height:13px;" tabindex = 600>
				<%::sMarkUpBox( "Back", "back" )%>
			</div>

			<div style="position:absolute;left: 420px;top:165px;height:13px;" tabindex = 500>
				<span class="ActionLink" sAction="Done" sRef='<%$sRef%>'
					onclick='top.submitNotification(this);'
					onkeypress='top.submitNotification(this);'>
					done
				</span>
			</div>
			#endinline;

			break;
		case "NotificationSchedule":
			$sNotificationType = GetRequest( "sNotificationType" );

			$sInheritedSchedule = GetRequest( "sInheritedSchedule" );
			if( $sInheritedSchedule == NULL )
				$sInheritedSchedule = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "Schedule", true );

			$sInheritedScheduleDisplay = GetRequest( "sInheritedScheduleDisplay" );
			if( $sInheritedScheduleDisplay == NULL )
			{
				$sInheritedScheduleDisplay = SSC_ScheduleNotification::sGetVerboseSchedule_s( $sInheritedSchedule );
				if( $sInheritedScheduleDisplay == "" )
					$sInheritedScheduleDisplay = "<No schedule>";
			};

			$sInheritedNotificationText = GetRequest( "sInheritedNotificationText" );
			if( $sInheritedNotificationText == NULL )
				$sInheritedNotificationText = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "Notification", true );

			$sInheritedChildCanInherit = GetRequest( "bInheritedChildCanInherit" );
			if( $sInheritedChildCanInherit == NULL )
				$sInheritedChildCanInherit = SSC_ScheduleNotification::sGetNotificationData_s( $this, $sNotificationType, "ApplyToChildren", true );

			$bInheritedChildCanInherit = Lower( CStr( $sInheritedChildCanInherit ) ) != "false"? true: false;

			$sInherited = GetRequest( "bInherited" );
			if( $sInherited == NULL )
				$sInherited = SSC_ScheduleNotification::bInheritSchedule_s( $this, $sNotificationType );

			$bInherited = Lower( CStr( $sInherited ) ) != "false"? true: false;

			$sIndependantNotification = GetRequest( "sIndependantNotification" );
			if( $sIndependantNotification == NULL )
				$sIndependantNotification = "";

			##Encode this to save it on the tag
			$sIndependantNotification = $sIndependantNotification;

			$bIndependantChildCanInherit = GetRequest( "bIndependantChildCanInherit" );
			if( $bIndependantChildCanInherit == NULL )
				$bIndependantChildCanInherit = true;

			$sIndependantScheduleDisplay = GetRequest( "sIndependantScheduleDisplay" );
			if( $sIndependantScheduleDisplay == NULL )
				$sIndependantScheduleDisplay = "";

			$sScheduleType = GetRequest( "ScheduleType" );
			if( $sScheduleType == NULL )
				$sScheduleType = "ksTaskMonthly";
			else
				$sScheduleType = CStr( $sScheduleType );

			$sStartDate = GetRequest( "StartDate" );
			if( $sStartDate == NULL )
				$sStartDate = Format(now(), "yyyy-mm-dd");
			else
				$sStartDate = Replace( $sStartDate, "#", "" );

			$sScheduleSubType = GetRequest( "ScheduleSubType" );
			if( $sScheduleSubType == NULL )
				$sScheduleSubType = "";
			else
				$sScheduleSubType = CStr( $sScheduleSubType );

			$nEveryNDaysValue = GetRequest( "EveryNDaysValue" );
			if( $nEveryNDaysValue == NULL )
				$nEveryNDaysValue = 1;
			else
				$nEveryNDaysValue = CInt( $nEveryNDaysValue );

			$nEveryNWeeks = GetRequest( "EveryNWeeks" );
			if( $nEveryNWeeks == NULL )
				$nEveryNWeeks = 1;
			else
				$nEveryNWeeks = CInt( $nEveryNWeeks );

			##for weekly setting
			$sDaysOfWeek = GetRequest( "DaysOfWeek" );
			if( $sDaysOfWeek == NULL )
				$sDaysOfWeek = "";
			else
				$sDaysOfWeek = CStr( $sDaysOfWeek );

			$lsDaysOfWeek = split( $sDaysOfWeek, "," );
			$ssDaysOfWeek = CSet( $lsDaysOfWeek );

			$nDayOfMonth = GetRequest( "DayOfMonth" );
			if( $nDayOfMonth == NULL )
				$nDayOfMonth = 1;
			else
				$nDayOfMonth = CInt( $nDayOfMonth );

			$nWeekOfMonth = GetRequest( "WeekOfMonth" );
			if( $nWeekOfMonth == NULL )
				$nWeekOfMonth = 1;
			else
				$nWeekOfMonth = CInt( $nWeekOfMonth );

			## for monthly setting
			$nDayOfWeek = GetRequest( "DayOfWeek" );
			if( $nDayOfWeek == NULL )
				$nDayOfWeek = 2;
			else
				$nDayOfWeek = CInt( $nDayOfWeek );

			$sPlusDays = GetRequest( "PlusDays" );
			if( $sPlusDays == NULL )
				$sPlusDays = "";
			else
				$sPlusDays = CStr( $sPlusDays );

			$nPlusDays = 0;
			if( $sPlusDays != "" )
				$nPlusDays = CInt( $sPlusDays );

			$ssMonths = CSet();

			$sMonthsOfYear = GetRequest( "MonthsOfYear" );
			if( $sMonthsOfYear == NULL )
			{
				$nCount = 1;
				while( $nCount != 13 )
				{
					$ssMonths << CStr( $nCount );
					$nCount = $nCount + 1;
				};

			}
			else
			{
				$sMonthsOfYear = CStr( $sMonthsOfYear );
				$ssMonths = CSet( split( $sMonthsOfYear, ";" ) );
			};

			$sIndependantSchedule = GetRequest( "sIndependantSchedule" );
			if( $sIndependantSchedule == NULL )
				$sIndependantSchedule = "";

			$sRef = $this.Ref;
			$sThemeFolder = ::sGetThemeFolder();

			#inline
			<div style="position:absolute;left:15px;top:12px;width:260px;height:16px;">
				<h1>Schedule</h1>
			</div>

			<input type='hidden' id='bIndependantChildCanInherit' value='<%$bIndependantChildCanInherit%>' />
			<input type='hidden' id='sIndependantNotification' value='<%htmlencode($sIndependantNotification)%>'/>
			<input type='hidden' id='sIndependantSchedule' value='<%htmlencode($sIndependantSchedule)%>'/>
			<input type='hidden' id='sIndependantScheduleDisplay' value='<%htmlencode($sIndependantScheduleDisplay)%>'/>
			<input type='hidden' id='sNotificationType' value='<%$sNotificationType%>'/>
			<input type='hidden' id='bInherited' value='<%$bInherited%>'/>
			<input type='hidden' id='sInheritedSchedule' value='<%htmlencode($sInheritedSchedule)%>'/>
			<input type='hidden' id='sInheritedScheduleDisplay' value='<%htmlencode($sInheritedScheduleDisplay)%>'/>
			<input type='hidden' id='sInheritedNotificationText' value='<%htmlencode($sInheritedNotificationText)%>'/>
			<input type='hidden' id='bInheritedChildCanInherit' value='<%$bInheritedChildCanInherit%>'/>

			<div style="position:absolute;left:20px;top:30px;width:140px;height:16px;">
				<span style='font:8pt verdana;'> Perform this task: </span>
			</div>
			<div id='ScheduleFrequency' >
				<div style="position:absolute;left:140px;top:25px;width:80px;height:16px;">
					<input type='radio' name='ScheduleFrequency' value='ksTaskDaily' <%$sScheduleType == "ksTaskDaily"? "checked":""%>
						onclick='top.ShowScheduleSettingsOptions( this );' tabindex=101 />
					<span style='font:8pt verdana;'>Daily</span>
				</div>
				<div style="position:absolute;left:200px;top:25px;width:70px;height:16px;">
					<input type='radio' name='ScheduleFrequency' value='ksTaskWeekly' <%$sScheduleType == "ksTaskWeekly"? "checked":""%>
						onclick='top.ShowScheduleSettingsOptions( this );' tabindex=102/>
					<span style='font:8pt verdana;'>Weekly</span>
				</div>
				<div style="position:absolute;left:270px;top:25px;width:70px;height:16px;">
					<input type='radio' name='ScheduleFrequency' value='ksTaskMonthly' <%$sScheduleType == "ksTaskMonthly"? "checked":""%>
						onclick='top.ShowScheduleSettingsOptions( this );' tabindex=103/>
					<span style='font:8pt verdana;'>Monthly</span>
				</div>
				<div style="position:absolute;left:350px;top:25px;width:80px;height:16px;">
					<input type='radio' name='ScheduleFrequency' value='ksTaskOneTime' <%$sScheduleType == "ksTaskOneTime"? "checked":""%>
						onclick='top.ShowScheduleSettingsOptions( this );' tabindex=104/>
					<span style='font:8pt verdana;'>One Time</span>
				</div>
			</div>

			<div id='SettingsDiv' >
				<div id='ksTaskDailySettings' style='display:<%$sScheduleType == "ksTaskDaily"? "block":"none"%>;' >
					<div id='DailyScheduleSetting'>
						<div style="position:absolute;left:20px;top:55px;width:300px;height:16px;">
							<input type='radio' name='DailyScheduleSetting' <%$sScheduleSubType == "EveryDay" OR $sScheduleSubType == ""? "checked":""%> tabindex=105 value='EveryDay'
								onclick='this.ownerDocument.getElementById( "DailyDayNumberSelect" ).disabled = true;'>
							<span style='font:8pt verdana;'>Every Day</span>
						</div>
						<div style="position:absolute;left:20px;top:75px;width:300px;height:16px;">
							<input type='radio' name='DailyScheduleSetting' tabindex=106 value='Weekdays' <%$sScheduleSubType == "Weekdays"? "checked":""%>
								onclick='this.ownerDocument.getElementById( "DailyDayNumberSelect" ).disabled = true;'>
							<span style='font:8pt verdana;'>Weekdays</span>
						</div>
						<div style="position:absolute;left:20px;top:95px;width:300px;height:16px;">
							<input type='radio' name='DailyScheduleSetting' tabindex=107 value='EveryNDays' <%$sScheduleSubType == "EveryNDays"? "checked":""%>
								onclick='this.ownerDocument.getElementById( "DailyDayNumberSelect" ).disabled = false;'>
							<span style='font:8pt verdana;width:50px;'>Every</span>
							<select id='DailyDayNumberSelect' style='width:70px;font:8pt verdana;' <%$sScheduleSubType == "EveryNDays"? "":"disabled"%>  >
				#endinline;
							$nCount = 1;

							while( $nCount != 366 )
							{
								#inline
								<option value='<%$nCount%>' <%$nEveryNDaysValue == $nCount? "selected" : "" %> ><%$nCount%></option>
								#endinline;
								$nCount = $nCount + 1;
							};


				#inline
								<option value='366' <%$nEveryNDaysValue == 366? "selected" : "" %> >anually</option>
							</select>
							<span style='font:8pt verdana;width:50px;'>Days</span>
						</div>
					</div>
					<div style="position:absolute;left:20px;top:125px;width:300px;height:16px;">
							<span style='font:8pt verdana;width:80px;'>Start Date:</span>
							<input  sDate="true" sValue='' sShowingWhat="Date" type="text" id="DailyStartDate" value="<% $sStartDate %>" size="20"
								style='font: 8pt verdana;' tabindex=109>
							<image src="images/<% $sThemeFolder %>/cal.png" style="width:16px;height:16px;cursor:pointer;"
							onclick="displayCalendar(document.getElementById('DailyStartDate'),'yyyy-mm-dd',this,true,null,event);">

					</div>

				</div>

				<div id='ksTaskWeeklySettings'  style='display:<%$sScheduleType == "ksTaskWeekly"? "block":"none"%>;' >
					<div style="position:absolute;left:20px;top:55px;width:190px;height:16px;">
						<span style='font:8pt verdana;width:50px;'>Every</span>
						<select id='WeeklyDayNumberSelect' style='width:40px;font:8pt verdana;' tabindex=101 >
			#endinline;
						$nCount = 1;

						while( $nCount != 52 )
						{
							#inline
							<option value='<%$nCount%>' <%$nEveryNWeeks == $nCount? "selected" : "" %>  ><%$nCount%></option>
							#endinline;
							$nCount = $nCount + 1;
						};


			#inline
						</select>
						<span style='font:8pt verdana;width:50px;'>Weeks</span>
					</div>
					<div style="position:absolute;left:225px;top:55px;width:280px;height:16px;">
							<span style='font:8pt verdana;width:80px;'>Start Date:</span>
							<input  sDate="true" sValue='' sShowingWhat="Date" type="text" id="WeeklyStartDate" value="<% $sStartDate %>" size="20"
								style='font: 8pt verdana;' tabindex=103>
							<image src="images/<% $sThemeFolder %>/cal.png" style="width:16px;height:16px;cursor:pointer;"
							onclick="displayCalendar(document.getElementById('WeeklyStartDate'),'yyyy-mm-dd',this,true,null,event);">

					</div>
					<div style="position:absolute;left:20px;top:95px;width:300px;height:16px;">
						<span style='font:8pt verdana;width:50px;'>For the day(s) of:</span>
					</div>
					<div id='WeeklyWeekdayCheckboxes'>
						<div style="position:absolute;left:20px;top:115px;width:80px;height:16px;">
							<input type='checkbox' tabindex=104 value='1' <% $ssDaysOfWeek  contains "1"? "checked": ""%>/>
							<span style='font:8pt verdana;width:50px;'>Sunday</span>
						</div>
						<div style="position:absolute;left:110px;top:115px;width:90px;height:16px;">
							<input type='checkbox' tabindex=106 value='3' <% $ssDaysOfWeek  contains "3"? "checked": ""%>/>
							<span style='font:8pt verdana;width:50px;'>Tuesday</span>
						</div>
						<div style="position:absolute;left:220px;top:115px;width:80px;height:16px;">
							<input type='checkbox' tabindex=108 value='5' <% $ssDaysOfWeek  contains "5"? "checked": ""%>/>
							<span style='font:8pt verdana;width:50px;'>Thursday</span>
						</div>
						<div style="position:absolute;left:310px;top:115px;width:80px;height:16px;">
							<input type='checkbox' tabindex=110 value='7' <% $ssDaysOfWeek  contains "7"? "checked": ""%>/>
							<span style='font:8pt verdana;width:50px;'>Saturday</span>
						</div>
						<div style="position:absolute;left:20px;top:135px;width:80px;height:16px;">
							<input type='checkbox' tabindex=105 value='2' <% $ssDaysOfWeek  contains "2"? "checked": ""%>/>
							<span style='font:8pt verdana;width:50px;'>Monday</span>
						</div>
						<div style="position:absolute;left:110px;top:135px;width:90px;height:16px;">
							<input type='checkbox' tabindex=107 value='4' <% $ssDaysOfWeek  contains "4"? "checked": ""%>/>
							<span style='font:8pt verdana;width:90px;'>Wednesday</span>
						</div>
						<div style="position:absolute;left:220px;top:135px;width:80px;height:16px;">
							<input type='checkbox' tabindex=109 value='6' <% $ssDaysOfWeek  contains "6"? "checked": ""%>/>
							<span style='font:8pt verdana;width:50px;'>Friday</span>
						</div>
					</div>
				</div>

				<div id='ksTaskMonthlySettings'  style='display:<%$sScheduleType == "ksTaskMonthly"? "block":"none"%>;'>
					<div id='MonthlyScheduleSetting'>
						<div style="position:absolute;left:20px;top:55px;width:300px;height:16px;">
							<input type='radio' name='MonthlyScheduleSetting' tabindex=101 value='MonthlyDay' <%$sScheduleSubType == "MonthlyDay" OR $sScheduleSubType == ""? "checked":""%>
								onclick='this.ownerDocument.getElementById( "MonthlyDayNumberSelect" ).disabled = false;'>
							<span style='font:8pt verdana;width:60px;'>Day</span>
							<select id='MonthlyDayNumberSelect' style='width:45px;font:8pt verdana;' <%$sScheduleSubType == "MonthlyDay" OR $sScheduleSubType == ""? "":"disabled"%> >
				#endinline;
							$nCount = 1;

							while( $nCount != 32 )
							{
								#inline
								<option value='<%$nCount%>' <%$nDayOfMonth == $nCount? "selected":""%> ><%$nCount%></option>
								#endinline;
								$nCount = $nCount + 1;
							};


				#inline
								<option value='32' <%$nDayOfMonth == 32? "selected":""%> >last</option>
							</select>
						</div>
						<div style="position:absolute;left:20px;top:78px;width:400px;height:16px;">
							<input type='radio' name='MonthlyScheduleSetting' tabindex=102 value='MonthlyWeek' <%$sScheduleSubType == "MonthlyWeek"? "checked":""%>
								onclick='this.ownerDocument.getElementById( "MonthlyWeekSelect" ).disabled = false;this.ownerDocument.getElementById( "MonthlyDaySelect" ).disabled = false;this.ownerDocument.getElementById( "MonthlyPlusOrMinusSelect" ).disabled = false;this.ownerDocument.getElementById( "MonthlyDayOffsetSelect" ).disabled = false;'>
							<span style='font:8pt verdana;width:70px;'>The</span>
							<select id='MonthlyWeekSelect' style='width:65px;font:8pt verdana;' <%$sScheduleSubType == "MonthlyWeek"? "":"disabled"%> >
								<option value='1' <%$nWeekOfMonth == 1? "selected":""%> >first</option>
								<option value='2' <%$nWeekOfMonth == 2? "selected":""%>>second</option>
								<option value='3' <%$nWeekOfMonth == 3? "selected":""%>>third</option>
								<option value='4' <%$nWeekOfMonth == 4? "selected":""%>>fourth</option>
								<option value='5' <%$nWeekOfMonth == 5? "selected":""%>>last</option>
							</select>
							<select id='MonthlyDaySelect' style='width:95px;font:8pt verdana;' <%$sScheduleSubType == "MonthlyWeek"? "":"disabled"%> >
								<option value='1' <%$nDayOfWeek == 1? "selected":""%> >Sunday</option>
								<option value='2' <%$nDayOfWeek == 2? "selected":""%> >Monday</option>
								<option value='3' <%$nDayOfWeek == 3? "selected":""%>>Tuesday</option>
								<option value='4' <%$nDayOfWeek == 4? "selected":""%>>Wednesday</option>
								<option value='5' <%$nDayOfWeek == 5? "selected":""%>>Thursday</option>
								<option value='6' <%$nDayOfWeek == 6? "selected":""%>>Friday</option>
								<option value='7' <%$nDayOfWeek == 7? "selected":""%>>Saturday</option>
							</select>
							<select id='MonthlyPlusOrMinusSelect' style='width:65px;font:8pt verdana;' <%$sScheduleSubType == "MonthlyWeek"? "":"disabled"%> >
								<option value='Plus' <%$nPlusDays >= 0? "selected":""%> >Plus</option>
								<option value='Minus'<%$nPlusDays < 0? "selected":""%> >Minus</option>
							</select>
							<select id='MonthlyDayOffsetSelect' style='width:45px;font:8pt verdana;' <%$sScheduleSubType == "MonthlyWeek"? "":"disabled"%> >
								<option value='0' <%Abs($nPlusDays) == 0? "selected":""%> > </option>
				#endinline;
							$nCount = 1;

							while( $nCount != 7 )
							{
								#inline
								<option value='<%$nCount%>' <%Abs($nPlusDays ) == $nCount ? "selected":""%> ><%$nCount%></option>
								#endinline;
								$nCount = $nCount + 1;
							};


				#inline

							</select>
							<span style='font:8pt verdana;width:70px;'>day(s)</span>
						</div>
					<div style="position:absolute;left:18px;top:100px;width:300px;height:16px;">
						<span style='font:8pt verdana;width:50px;'>For the Month(s):</span>
					</div>
					<div id='MonthlyMonthCheckboxes'>
						<div style="position:absolute;left:15px;top:115px;width:80px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "1"? "checked":""%> tabindex=103 value='1'/>
							<span style='font:8pt verdana;width:70px;'>January</span>
						</div>
						<div style="position:absolute;left:95px;top:115px;width:65px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "3"? "checked":""%> tabindex=105 value='3'/>
							<span style='font:8pt verdana;width:55px;'>March</span>
						</div>
						<div style="position:absolute;left:160px;top:115px;width:50px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "5"? "checked":""%> tabindex=107 value='5'/>
							<span style='font:8pt verdana;width:40px;'>May</span>
						</div>
						<div style="position:absolute;left:215px;top:115px;width:65px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "7"? "checked":""%> tabindex=109 value='7'/>
							<span style='font:8pt verdana;width:60px;'>July</span>
						</div>
						<div style="position:absolute;left:280px;top:115px;width:90px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "9"? "checked":""%> tabindex=111 value='9'/>
							<span style='font:8pt verdana;width:80px;'>September</span>
						</div>
						<div style="position:absolute;left:370px;top:115px;width:90px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "11"? "checked":""%> tabindex=113 value='11'/>
							<span style='font:8pt verdana;width:80px;'>November</span>
						</div>
						<div style="position:absolute;left:15px;top:135px;width:80px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "2"? "checked":""%> tabindex=104 value='2'/>
							<span style='font:8pt verdana;width:70px;'>February</span>
						</div>
						<div style="position:absolute;left:95px;top:135px;width:65px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "4"? "checked":""%> tabindex=106 value='4'/>
							<span style='font:8pt verdana;width:55px;'>April</span>
						</div>
						<div style="position:absolute;left:160px;top:135px;width:50px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "1"? "checked":""%> tabindex=108 value='6'/>
							<span style='font:8pt verdana;width:40px;'>June</span>
						</div>
						<div style="position:absolute;left:215px;top:135px;width:65px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "8"? "checked":""%> tabindex=110 value='8'/>
							<span style='font:8pt verdana;width:60px;'>August</span>
						</div>
						<div style="position:absolute;left:280px;top:135px;width:90px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "10"? "checked":""%> tabindex=112 value='10'/>
							<span style='font:8pt verdana;width:80px;'>October</span>
						</div>
						<div style="position:absolute;left:370px;top:135px;width:90px;height:16px;">
							<input type='checkbox' <%$ssMonths contains "12"? "checked":""%> tabindex=114 value='12'/>
							<span style='font:8pt verdana;width:80px;'>December</span>
						</div>
					</div>
					</div>
				</div>

				<div id='ksTaskOneTimeSettings'  style='display:<%$sScheduleType == "ksTaskOneTime"? "block":"none"%>;'>
					<div style="position:absolute;left:20px;top:55px;width:280px;height:16px;">
							<span style='font:8pt verdana;width:80px;'>Start Date:</span>
							<input  sDate="true" sValue='' sShowingWhat="Date" type="text" id="OneTimeStartDate" value="<% $sStartDate %>" size="20"
								style='font: 8pt verdana;' tabindex=101>
							<image src="images/<% $sThemeFolder %>/cal.png" style="width:16px;height:16px;cursor:pointer;"
							onclick="displayCalendar(document.getElementById('OneTimeStartDate'),'yyyy-mm-dd',this,true,null,event);">

					</div>
				</div>
			</div>

			<div style="position:absolute;left: 370px;top:160px;height:13px;" tabindex = 600>
				<span class="ActionLink" sAction="Done"
					onclick='top.submitSchedule( this, "<%$sRef%>", false );'
					onkeypress='top.submitSchedule( this, "<%$sRef%>", false );'>
					cancel
				</span>
			</div>

			<div style="position:absolute;left: 420px;top:160px;height:13px;" tabindex = 500>
				<span class="ActionLink" sAction="Done"
					onclick='top.submitSchedule( this, "<%$sRef%>", true );'
					onkeypress='top.submitSchedule( this, "<%$sRef%>", true );'>
					done
				</span>
			</div>
			#endinline;
			break;

		case "Versioning":
			$sRef = $this.Ref;
			$oThis = *;
			$sRef = Ref;
			$nAuthenticationFlag = $oThis.nGetAuthenticationFlag( "VERSIONING", $sRequest );

			$bDone = ( $sRequest == "ksCheckIn" OR $sRequest == "ksCheckpoint" ) AND $nAuthenticationFlag > 0? false:true;

			if ( (($sRequest == "ksCheckpoint") And (Classname == "SSC_Project")) Or
				 ( $sRequest == "ksCheckIn" And ( Classname == "SSC_Project" Or Classname == "SSC_ExtDocument" Or * KindOf "SSC_ExternalAppObj" ) ) )
			{
				## Need to get the object name for the dialog prompt
				if ( Classname == "SSC_Project" )
				{
				    $sObjectName = GetGenString( "ksProject" );
				    $sVersionNumber = sVersionID;
				}
				else if ( Classname == "SSC_ExtDocument" )
                {
				    $sObjectName = GetGenString( "ksDocument" );
				    $sVersionNumber = iGetLatestVersion();
				}
				else if ( $oThis KindOf "SSC_ExternalAppObj" )
				{
				    $sObjectName = GetGenString( "ksApplication" );
				    $sVersionNumber = iGetLatestVersion();
                }
                else
                {
                    $sObjectName = "";
                    $sVersionNumber = "0.0";
                };

                $sLabel = GetGenString( $sRequest ) + " " + $sObjectName + " " + GetGenString("ksVersion") + " " + $sVersionNumber;
				#inline
    				<div style="position:absolute;left:30px;top:12px;width:400px;height:16px;z-index:300069" align="left">
	    				<h1><% $sLabel %></h1>
		    		</div>
					<div style="position:absolute;left:28px;top:46px;width:93px;height:16px;">
						Name:
					</div>
					<div>
						<input class="fieldFocus" tabindex=101 firstField=true type="text" id="VersioningName" style="position:absolute;left:110px;top:44px;width:300px;"
							size="22" sRequest=<% $sShowingWhat %>
							onkeypress="if( event.keyCode == 13 ) top.SubmitVersioningCommand<%$sContext == "Body"?"_Table":""%>( '<% $sRequest %>', '<% $sRef %>' ); " >
					</div>
					<div style="position:absolute;left:28px;top:70px;width:410px;height:55px;">
						Description:
					</div>
					<div>
						<textarea tabindex=102 id="VersioningText" style="position:absolute;left:28px;top:90px;width:410px;height:55px;" rows="4" cols="38"></textarea>
					</div>
				#endinline;
			}
			else
			{
				$sDateFormat = COG_AppObj::sGetDateFormat_s( "S" );
				$sDateAndTime = $sDateFormat + " hh:nn";
				#inline
    				<div style="position:absolute;left:30px;top:12px;width:160px;height:16px;z-index:300069" align="left">
	    				<h1><% GetGenString( $sRequest ) %></h1>
		    		</div>
					<div style="position:absolute;left:28px;top:46px;width:93px;height:16px;">
						Status Date:
					</div>
					<div>
						<input class="fieldFocus" tabindex=102 sDate="true" type="text" id="VersioningDate" style="position:absolute;left:110px;top:44px;width:220px;"
							size="22" sRequest=<% $sShowingWhat %> value=<% Format( Now(), $sDateFormat ) %>>
						<image tabindex=103 src="images/<% ::sGetThemeFolder() %>/cal.png" style="position:absolute;left:340px;top:46px;width:16px;height:16px;cursor:pointer;"
							onclick="displayCalendar(document.getElementById('VersioningDate'),'<%$sDateAndTime%>',this,true,null,event)">
					</div>
				#endinline;
			};

			if (( Classname != "SSC_Project" ) )
			{
				#inline
					<div style="position:absolute;left:28px;top:70px;width:410px;height:55px;">
						Comments:
					</div>
					<div>
						<textarea tabindex=102 id="VersioningText" style="position:absolute;left:28px;top:90px;width:410px;height:55px;" rows="4" cols="38"></textarea>
					</div>
				#endinline;
			};

			#inline
				<div style="position:absolute;left:380px;top:160px;height:13px;"  tabindex=105>
					<%::sMarkUpBox( "Back", "back" )%>
				</div>
				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span class="ActionLink"
					onclick="top.SubmitVersioningCommand<%$sContext == "Body"?"_Table":""%>( '<% $sRequest %>', '<% $sRef %>', '<%$nAuthenticationFlag%>' ); "
					onkeypress="top.SubmitVersioningCommand<%$sContext == "Body"?"_Table":""%>( '<% $sRequest %>', '<% $sRef %>', '<%$nAuthenticationFlag%>' ); "
					 tabindex=103><%$bDone?"finish":"next"%></span>
				</div>

			#endinline;

		break;
		case "Versioning_MultipleItems":
			#inline
				<div style="position:absolute;left:30px;top:12px;width:160px;height:16px;z-index:300069" align="left">
					<h1><% GetGenString( $sRequest ) %></h1>
				</div>
			#endinline;

			switch( $sRequest )
			{
				case "ksCreateMasterVersion":
				case "ksCreateWorkingVersion":
				case "ksCheckIn":
					#inline
						<div style="position:absolute;left:28px;top:46px;width:93px;height:16px;">
							Name:
						</div>
						<div>
							<input tabindex=101 class="dialogField" firstField=true type="text" id="VersioningName" style="position:absolute;left:110px;top:44px;width:220px;"
								size="22" sRequest=<% $sShowingWhat %>>
						</div>
					#endinline;
				break;
				default:
					#inline
						<div style="position:absolute;left:28px;top:46px;width:93px;height:16px;">
							Status Date:
						</div>
						<div>
							<input tabindex=102 sDate="true" class="dialogField"  type="text" id="VersioningDate" style="position:absolute;left:110px;top:44px;width:220px;" size="22"
								sRequest=<% $sShowingWhat %> value=<% Format( Now(), "Short Date" ) %>>
							<image tabindex=103 src="images/<% ::sGetThemeFolder() %>/cal.png" style="position:absolute;left:340px;top:46px;width:16px;height:16px;cursor:pointer;"
								onclick="displayCalendar(document.getElementById('VersioningDate'),'mm/dd/yyyy hh:nn',this,true,null,event)">
						</div>
					#endinline;
			};

			#inline
				<div style="position:absolute;left:28px;top:70px;width:410px;height:55px;">
					Comments:
				</div>
				<div>
					<textarea tabindex=102 class="dialogField"  id="VersioningText" style="position:absolute;left:28px;top:90px;width:410px;height:55px;" rows="4" cols="38"></textarea>
				</div>
				<div style="position:absolute;left:380px;top:160px;height:13px;"  tabindex=105>
					<%::sMarkUpBox( "Back", "back" )%>
				</div>
				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span class="ActionLink"
					onclick="top.SubmitVersioningCommand( '<% $sRequest %>', null ); "
					onkeypress="top.SubmitVersioningCommand( '<% $sRequest %>', null ); " tabindex=103>finish</span>
				</div>

			#endinline;

		break;
		case "StandardRapidAdderDialog":
			$bSingle = GetRequest( "bSingle" );
			if( $bSingle == NULL )
				$bSingle = false;

			$sAddType = GetRequest( "sAddType" );
			if( $sAddType == NULL )
				$sAddType = "link";
			else
				$sAddType = Lower($sAddType);

			if( $sAddType == "copy" )
			{
				$sAddSubItemType = GetRequest( "sAddSubItemType" );
				if( $sAddSubItemType != NULL )
				{
					$sAddSubItemType = Lower($sAddSubItemType);
					if( $sAddSubItemType != "none" )
						$sAddType += " (" + $sAddSubItemType + " sub-items)";
				};
			};
			$sThemeFolder = ::sGetThemeFolder();

			#inline
			<div style="position:absolute;left:15px;top:12px;width:300px;height:16px;font: 8pt verdana;">
					<h1>Choose items to <%$sAddType%>:</h1>
			</div>
			<span class='fakelink' style='position:absolute;left:375px;width:70px;top:14px;' onclick='top.LoadRapidAdderDialog( top.oCurrentObject, "<%$sRequest%>", true )'>
				Refresh list
			</span>
			<div    style="position:absolute;left:460px;top:10px;width:131px;height:22px;cursor:text;">
				<img src="images/<% $sThemeFolder %>/img00004.gif" border="0" width="131" height="22">
				<input class="fieldFocus" oninput="top.filter( document.getElementById('oObjectDiv'), this.value )" type="text" id="filterBox" style="position:absolute;left:25px;top:2px;width:100px;border:0px #000000 solid;font-family:Courier New;font-size:12px;" size="16" NAME="filterBox">
				<img src="images/<% $sThemeFolder %>/filter_back.GIF" id="filterBack" border="0" style="position:absolute;left:8px;top:2px;">
				<script> document.getElementById('filterBox').focus(); </script>
			</div>
			<div id="oObjectDiv" style="position:absolute;padding-left:2px;left:30px;top:40px;width:570px;height:340px; border-style:solid; border-width:1px; background-color:white; border-color:LightSteelBlue; overflow:auto;">
			</div>
			#endinline;

			if( NOT $bSingle )
			{
				#inline
				<div style="position:absolute;left:570px;top:390px;width:50px;height:13px;">
					<span class="ActionLink" sAction="Done"
						onclick="top.SubmitRapidAdderDialog(this);"
						onkeypress="top.SubmitRapidAdderDialog(this);" tabindex=106>
						done
					</span>
				</div>
				#endinline;
			};
			break;
		case "Adhoc FMEA":
			$ssExclusions = CSet( { "Status" } );
			getDialogTemplate_Top( "table", $ssExclusions );
			$oThis = *;
			$lsFormDef = lsGetFormDef( "FMEA" );

			## if there are custom commands, show that option
			## get the custom commands for this class
			$loCustom = loGetCommands( "", "" );

			if ( Not IsEmpty( $loCustom ) )
			{
				$iTop = ::iDialogWorkflowTop();
				#inline
				<span class="Dialog" sRef=<% $this.Ref %> sShowingWhat="CustomCommandMenu" style="cursor:pointer;">
					<div style="position:absolute;left:35px;top:<%$iTop%>px;width:175px;height:13px;" sShowingWhat="CustomCommandMenu"
						sRef=<% $this.Ref %> class="HelpTip" sHelpId="Callout_Custom_Command">
							Workflow
					</div>
				</span>
				#endinline;
			};

			$sRef = Ref;

			#inline
				<div style="position:absolute;left:30px;top:55px;width:292px;height:40px;">
					<table style="font-family:verdana;color:black;border:none;text-align:left;">
			#endinline;

			$nItemcount = Itemcount( $sSubRequest, EOI );

			$sSectionRef = Item( $sSubRequest, $nItemcount, $nItemcount, EOI );

			$sKeyword = Item( $sRequest, 1, 1, EOI );
			$sFMEAName = Item( $sRequest, 2, 2, EOI );

			$oSection = CObj( $sSectionRef );
			$lsFMEADef = $oSection.lsGetFMEADef( $sFMEAName );

			$bSingleFMEAColumn = $oSection.bSingleFMEAColumn( $sFMEAName, $lsFMEADef, $sKeyword );

			$bShowEdit = NOT $bSingleFMEAColumn;

			$lsFormDef/
			{
				$lsCurr = split(*,"|");

				$sTitle = first( $lsCurr );

				$sDataRequest = pick($lsCurr,1);
				SetRequest( "bMakeEditable", false );
				SetRequest( "sTags", "" );
				#inline
				<tr>
					<td style="width:130px;"><% $sTitle %>:</td>
					<td><%$oThis.GetSnippet($sDataRequest);%></td>
				</tr>
				#endinline;

			};
			#inline
					</table>
				</div>
			#endinline;

			$bCheckpointedDoc = false;
			$bReviewsAllowEdit = true;

			if( $sSectionRef != NULL AND  $sSectionRef != "")
			{
				$oSection = CObj( $sSectionRef );
				$bReviewsAllowEdit = $oSection.bReviewsAllowEdit();

				$oDocument = $oSection.oGetPrimaryGroup();
				$bCheckpointedDoc = $oDocument.bIsItemCheckPointed();
			};

			$bCanRemove = bCanRemove();
			$sModifyError = sModifyError();
			$bCanModify = $sModifyError == ""?true:false;

			if( $bShowEdit AND $bCanModify AND NOT $bCheckpointedDoc AND $bReviewsAllowEdit )
			{
				#inline
				<span onclick='top.OnReloadFMEARow( this.getAttribute("sRef"), this.getAttribute("sSectionRef") );' sRef='<%$sRef%>' sSectionRef='<%$sSectionRef%>'
					style='cursor:pointer;position:absolute;left:351px;top:75px;width:110px;height:13px;' >
					<%GetGenString( "Edit" )%>...
				</span>
				#endinline;
			};

			if ( $bCanRemove )
			{
				if( $bCanModify )
				{
					## no need to check for modify access on this item, parent matters more
					$sAction = "top.RemoveFromListWidget( top.oCurrentObject, false );";
				}
				else
					$sAction = "alert( top.URLDecode('" + URLEncode( $sModifyError ) + "') );";

				#inline
					<span onclick="<%$sAction%>" style="cursor:pointer;">
						<img src="images/<% ::sGetThemeFolder() %>/empty.gif" width="18" height="18" style="position:absolute;left:326px;top:92px;" class="HelpTip" sHelpId="Callout_Remove...">
						<div style="position:absolute;left:351px;top:95px;width:110px;height:13px;" class="HelpTip" sHelpId="Callout_Remove...">
							Remove...
						</div>
					</span>
				#endinline;
			};
			break;
		case "FMEA":
		case "FMEA_NoEdit":
			$bShowEdit = true;
			if( $sShowingWhat == "FMEA_NoEdit" )
				$bShowEdit = false;

			$ssExclusions = CSet( { "Status" } );
			getDialogTemplate_Top( "table", $ssExclusions );
			$oThis = *;
			$lsFormDef = lsGetFormDef( "FMEA" );

			## if there are custom commands, show that option
			## get the custom commands for this class
			$loCustom = loGetCommands( "", "" );

			if ( Not IsEmpty( $loCustom ) )
			{
				$iTop = ::iDialogWorkflowTop();
				#inline
				<span class="Dialog" sRef=<% $this.Ref %> sShowingWhat="CustomCommandMenu" style="cursor:pointer;">
					<div style="position:absolute;left:35px;top:<%$iTop%>px;width:175px;height:13px;" sShowingWhat="CustomCommandMenu"
						sRef=<% $this.Ref %> class="HelpTip" sHelpId="Callout_Custom_Command">
							Workflow
					</div>
				</span>
				#endinline;
			};

			$sRef = Ref;

			#inline
				<div style="position:absolute;left:30px;top:55px;width:292px;height:40px;">
					<table style="font-family:verdana;color:black;border:none;text-align:left;">
			#endinline;

			$sSectionRef = $sSubRequest;

			$lsFormDef/
			{
				$lsCurr = split(*,"|");

				$sTitle = first( $lsCurr );

				$sDataRequest = pick($lsCurr,1);
				SetRequest( "bMakeEditable", false );
				SetRequest( "sTags", "" );
				#inline
				<tr>
					<td style="width:130px;"><% $sTitle %>:</td>
					<td><%$oThis.GetSnippet($sDataRequest);%></td>
				</tr>
				#endinline;

			};
			#inline
					</table>
				</div>
			#endinline;

			$bCheckpointedDoc = false;
			$bReviewsAllowEdit = true;

			if( $sSectionRef != NULL AND  $sSectionRef != "")
			{
				$oSection = CObj( $sSectionRef );

				$bReviewsAllowEdit = $oSection.bReviewsAllowEdit();

				$oDocument = $oSection.oGetPrimaryGroup();
				$bCheckpointedDoc = $oDocument.bIsItemCheckPointed();
			};

			$bCanRemove = bCanRemove();
			$sModifyError = sModifyError();
			$bCanModify = $sModifyError == ""?true:false;

			if( $bShowEdit AND $bCanModify AND NOT $bCheckpointedDoc AND $bReviewsAllowEdit )
			{
				#inline
				<span onclick='top.OnReloadFMEARow( this.getAttribute("sRef"), this.getAttribute("sSectionRef") );' sRef='<%$sRef%>' sSectionRef='<%$sSectionRef%>'
					style='cursor:pointer;position:absolute;left:351px;top:75px;width:110px;height:13px;' >
					<%GetGenString( "Edit" )%>...
				</span>
				#endinline;
			};

			if ( $bCanRemove )
			{
				if( $bCanModify )
				{
					## no need to check for modify access on this item, parent matters more
					$sAction = "top.RemoveFromListWidget( top.oCurrentObject, false );";
				}
				else
					$sAction = "alert( top.URLDecode('" + URLEncode( $sModifyError ) + "') );";

				#inline
					<span onclick="<%$sAction%>" style="cursor:pointer;">
						<img src="images/<% ::sGetThemeFolder() %>/empty.gif" width="18" height="18" style="position:absolute;left:326px;top:92px;" class="HelpTip" sHelpId="Callout_Remove...">
						<div style="position:absolute;left:351px;top:95px;width:110px;height:13px;" class="HelpTip" sHelpId="Callout_Remove...">
							Remove...
						</div>
					</span>
				#endinline;
			};
			break;
		case "ActionItemDetailed":
			$sRef = $this.Ref;
			$voPossibleOwners << CVector( /'Data Vault 1/'/COG_Person&[Not bDeleted][ oLoginAccount != NULLOBJECT ] );
			$nNumberOfOwners = Count( $voPossibleOwners );

			$sText = "";
			if( $sContext == "Markup" AND $sRequest != "table"  )
				$sText = $sRequest;
			#inline
				<div style="position:absolute;left:15px;top:12px;width:160px;height:16px;">
					<h1>Action Item</h1>
				</div>

				<div style="position:absolute;left:28px;top:45px;width:40px;height:13px">
					Action
				</div>
				<div>
					<input class="dialogField" type="text" id="sDescription" firstField="true" value='<%$sText%>'
					style="position:absolute;left:82px;top:43px;width:350px;font-family:verdana;font-size:8pt;" size="35" sRequest=<% $sShowingWhat %>
					tabindex=100>
				</div>

				<div style="position:absolute;left:28px;top:70px;width:40px;height:13px">
					Who
				</div>
				<div>
					<select style="position:absolute;left:82px;top:68px;cursor:pointer;font-family:verdana;font-size:8pt;font:8pt Verdana;width:356px"
							sItem='sAssignee' sRef=<% $sRef  %>  name="sAssignee" id="sAssignee" tabindex=101>
					#endinline;
					$sMyDescription = $me.oPerson.sGetData( "sDescription" );
					$UserChoices = split( GetChoices( "UsersInTheProjectWithLoginRights" ), "|" );
					$UserChoices/
					{
						if( * != "@" )
						{
							$bSelected = * == $sMyDescription? true:false;

							if( find( *, EOI ) != -1 )
							{
								$sDisplay = Item( *, 1, 1, EOI );
								$sValue = Item( *, 2, 2, EOI );
							}
							else
							{
								$sDisplay = *;
								$sValue = *;
							};

							#inline
								<option value='<%$sValue%>' <%$bSelected? "selected":""%> ><% $sDisplay %></option>
							#endinline;
						};
					};
					"<option value=''> -----------------</option>";
					$ssPeople = split( GetChoices( "LoginUsers" ), "|" );
					$ssPeople = $ssPeople -- CSet( $UserChoices );
					$ssPeople/
					{
						$bSelected = * == $sMyDescription? true:false;

						if( find( *, EOI ) != -1 )
						{
							$sDisplay = Item( *, 1, 1, EOI );
							$sValue = Item( *, 2, 2, EOI );
						}
						else
						{
							$sDisplay = *;
							$sValue = *;
						};

						#inline
							<option value='<%$sValue%>' <%$bSelected? "selected":""%> ><% $sDisplay %></option>
						#endinline;
					};
				#inline
					</select>
				</div>

				<div style="position:absolute;left:28px;top:95px;width:40px;height:13px">
					When
				</div>
				<div>
					<input  sDate="true" sValue='' sShowingWhat="Date" type="text" id="sDueDate" value="<% now(); %>"
					style="position:absolute;left:82px;top:93px;width:160px;font-family:verdana;font-size:8pt;" size="20"
					sRequest=<% $sShowingWhat %>  tabindex=102>
					<image src="images/<% ::sGetThemeFolder() %>/cal.png" style="position:absolute;left:255px;top:93px;width:16px;height:16px;cursor:pointer;"
					onclick="displayCalendar(document.getElementById('sDueDate'),'yyyy/mm/dd hh:nn',this,true,null,event); document.getElementById( 'sEffort' ).style.width=111;"  tabindex=103>
				</div>

				<div style="position:absolute;left:284px;top:95px;width:70px;height:13px">
					Importance
				</div>
				<div>
					<select sItem='sImportance' sRef=<% $sRef  %>  name="sImportance" id="sImportance" style="cursor:pointer;position:absolute;left:364px;top:93px;font:8pt Verdana;width:74px" tabindex=104>
					#endinline;
						$lsChoices = split( GetChoices( "Importance" ), "|" );
						$lsChoices/
						{
							if( find( *, EOI ) != -1 )
							{
								$sDisplay = Item( *, 1, 1, EOI );
								$sValue = Item( *, 2, 2, EOI );
							}
							else
							{
								$sDisplay = *;
								$sValue = *;
							};

							#inline
								<option value='<%$sValue%>'><% $sDisplay %></option>
							#endinline;
						};
					#inline
					</select>
				</div>

				<div style="position:absolute;left:28px;top:120px;width:100px;height:20px;">
					Expected Effort
				</div>
				<div>
					<select sItem='sEffort' sRef=<% $sRef  %>  name="sEffort" id="sEffort" style="cursor:pointer;position:absolute;left:136px;top:118px;font:8pt Verdana;width:302px" tabindex=105 >
						#endinline;
							$lsChoices = split( GetChoices( "Effort" ), "|" );
							$lsChoices/
							{
								if( find( *, EOI ) != -1 )
								{
									$sDisplay = Item( *, 1, 1, EOI );
									$sValue = Item( *, 2, 2, EOI );
								}
								else
								{
									$sDisplay = *;
									$sValue = *;
								};

								#inline
									<option value='<%$sValue%>'><% $sDisplay %></option>
								#endinline;
							};
						#inline
					</select>
				</div>
				#endinline;
				if( $sContext != "table" )
				{
					#inline
						<div style="position:absolute;left:380px;top:160px;height:13px;" tabindex = 107>
							<%::sMarkUpBox( "Back", "back" )%>
						</div>
					#endinline;
				};

				#inline
				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span class="ActionLink" sRef = '<%$sRef%>'
						onclick="top.submitNewActionItem( this, '<%$sContext%>' );"
						onkeypress="top.submitNewActionItem( this, '<%$sContext%>');" tabindex=106>
						done
					</span>
				</div>
			#endinline;
		break;
		case "AddAsTemplateCategory":
			$sRef = Ref;
			$sTemplate = "";

			$sChildrenToExport = GetRequest( "sChildrenToExport" );
			$sChildrenToExport = $sChildrenToExport == NULL ? "null" : "'" + $sChildrenToExport + "'";

			$sType = GetRequest( "sType" );

			$sFile = GetRequest( "sFile" );
			if ( $sFile == null )
				$sFile = "";
			else
				$sFile = JSStr($sFile);

			$sThemeFolder = ::sGetThemeFolder();
			#inline
				<div style="position:absolute;left:30px;top:12px;width:225px;height:16px;z-index:300069" align="left">
					<h1>Add as Template</h1>
				</div>
				<img src="images/<% $sThemeFolder %>/_help.png" title="Help" width="14" height="14" style="position:absolute;left:413px;top:12px;width:14px;height:14px;">
				<div    style="position:absolute;left:278px;top:10px;width:131px;height:22px;cursor:text;">
					<img src="images/<% $sThemeFolder %>/img00004.gif" border="0" width="131" height="22">
					<input class="fieldFocus" tabindex=100 oninput="top.filter( document.getElementById('categoryListing'), this.value )" type="text" id="filterBox" style="position:absolute;left:25px;top:2px;width:100px;border:0px #000000 solid;font-family:Courier New;font-size:12px; " size="16" NAME="filterBox">
					<img src="images/<% $sThemeFolder %>/filter_back.GIF" id="filterBack" border="0" style="position:absolute;left:8px;top:2px;">
					<script> document.getElementById('filterBox').focus(); </script>
				</div>
				<div id="categoryListing" style="position:absolute;left:15px;top:40px;width:435px;height:85px; border:2px solid LightSteelBlue; background-color:white; overflow:auto;">
			#endinline;

			$vsCategories = SSC_AppObj::vsGetTemplateCategories_s( $sType );

			$vsCategories/
			{
				$sCategory = *;
				#inline
				<div tabindex=<% $iternum+101 %> class="ActionLink" bFilterable=1
					onkeypress="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', '<%$sCategory%>', '<%$sTemplate%>', <% $sChildrenToExport %> );"
					onclick="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', '<%$sCategory%>', '<%$sTemplate%>', <% $sChildrenToExport %> );" ><%htmlencode($sCategory)%></div>
				#endinline;
			};

			#inline
				</div>
				<div style="position:absolute;left:15px;top:136px;width:100px;height:13px">
					New Category
				</div>
				<div>
					<input class="dialogField fieldFocus" type="text" id="sCategory" firstField="true" value=''
					style="position:absolute;left:106px;top:134px;width:342px;font-family:verdana;font-size:8pt;"
					size="35" sRequest=<% $sShowingWhat %> tabindex=100>
				</div>
				<div style="position:absolute;left:360px;top:160px;height:13px;" tabindex=102>
					<% ::sMarkUpBox( "Back", "back" ) %>
				</div>
				<div style="position:absolute;left:400px;top:160px;width:25px;height:13px;">
					<span class="ActionLink" sRef="<%Ref%>" sName='AddTemplate' sType='group'
					      onclick="top.OnNewTemplate( this, '<%$sFile%>', '<%$sType%>', null, <% $sChildrenToExport %> );" onkeypress="top.OnNewTemplate( this, '<%$sFile%>', '<%$sType%>, null, <% $sChildrenToExport %>' );"
					      tabindex=101>Next</span>
				</div>

			#endinline;
			break;

		case "AddAsTemplateName":
			$sCategory = GetRequest( "sCategory" );
			$sRef = Ref;
			$sType = GetRequest( "sType" );
			$sChildrenToExport = GetRequest( "sChildrenToExport" );
			$sChildrenToExport = $sChildrenToExport == NULL ? "null" : "'" + $sChildrenToExport + "'";
			$sThemeFolder = ::sGetThemeFolder();

			$sFile = GetRequest( "sFile" );
			if ( $sFile == null )
				$sFile = "";
			else
				$sFile = JSStr($sFile);

			#inline
				<div style="position:absolute;left:30px;top:12px;width:225px;height:16px;z-index:300069" align="left">
					<h1>Template Name</h1>
				</div>
				<img src="images/<% $sThemeFolder %>/_help.png" title="Help" width="14" height="14" style="position:absolute;left:413px;top:12px;width:14px;height:14px;">
				<div    style="position:absolute;left:278px;top:10px;width:131px;height:22px;cursor:text;">
					<img src="images/<% $sThemeFolder %>/img00004.gif" border="0" width="131" height="22">
					<input class="fieldFocus" tabindex=100 oninput="top.filter( document.getElementById('templateListing'), this.value )" type="text" id="filterBox" style="position:absolute;left:25px;top:2px;width:100px;border:0px #000000 solid;font-family:Courier New;font-size:12px; " size="16" NAME="filterBox">
					<img src="images/<% $sThemeFolder %>/filter_back.GIF" id="filterBack" border="0" style="position:absolute;left:8px;top:2px;">
					<script> document.getElementById('filterBox').focus(); </script>
				</div>
				<div id="templateListing" style="position:absolute;left:15px;top:40px;width:435px;height:85px; border:2px solid LightSteelBlue; background-color:white; overflow:auto;">
			#endinline;

			$vsNames = SSC_AppObj::vsGetTemplateNames_s( $sType, $sCategory );

			$vsNames/
			{
				$sTemplate = *;
				#inline
				<div tabindex=<% $iternum+101 %> class="ActionLink" bFilterable=1
						onkeypress="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', '<%$sCategory%>', '<%$sTemplate%>', <% $sChildrenToExport %> );"
						onclick="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', '<%$sCategory%>', '<%$sTemplate%>', <% $sChildrenToExport %> );" ><%htmlencode($sTemplate)%></div>
				#endinline;
			};

			#inline
				</div>
				<div style="position:absolute;left:15px;top:136px;width:100px;height:13px">
					New Template
				</div>
				<div>
					<input class="dialogField fieldFocus" type="text" id="sTemplate" firstField="true" value=''
					style="position:absolute;left:106px;top:134px;width:342px;font-family:verdana;font-size:8pt;"
					size="35" sRequest=<% $sShowingWhat %> tabindex=100>
				</div>
				<div style="position:absolute;left:360px;top:160px;height:13px;" tabindex=102>
					<% ::sMarkUpBox( "Back", "back" ) %>
				</div>
				<div style="position:absolute;left:400px;top:160px;width:25px;height:13px;">
					<span class="ActionLink" sRef="<%Ref%>" sName='AddTemplate' sType='group'
					      publisher='<%$sRef%>~onRefresh~Templates<%$sType%>'
					      onclick="top.OnNewTemplate( this, '<%$sFile%>', '<%$sType%>', '<%$sCategory%>', <% $sChildrenToExport %> );"
					      onkeypress="top.OnNewTemplate( this, '<%$sFile%>', '<%$sType%>', '<%$sCategory%>', <% $sChildrenToExport %> );"
					      tabindex=101>Done</span>
				</div>

			#endinline;
			break;

		case "PickTemplateCategory":
			$sRef = Ref;
			$sType = GetRequest( "sType" );
			$sDescription = GetRequest( "sDescription" );
			if ( $sDescription == null ) $sDescription = "";
			$sChildrenToExport = GetRequest( "sChildrenToExport" );
			$sChildrenToExport = $sChildrenToExport == NULL ? "null" : "'" + $sChildrenToExport + "'";
			$sThemeFolder = ::sGetThemeFolder();

			$sHints = GetRequest( "sUrlHints" );
			if( $sHints == NULL )
				$sHints = "";

			#inline
				<div style="position:absolute;left:15px;top:12px;width:200px;height:16px;">
					<h1>Select Template Category</h1>
				</div>
				<img src="images/<% $sThemeFolder %>/_help.png" title="Help" width="14" height="14" style="position:absolute;left:413px;top:12px;width:14px;height:14px;">
				<div    style="position:absolute;left:278px;top:10px;width:131px;height:22px;cursor:text;">
					<img src="images/<% $sThemeFolder %>/img00004.gif" border="0" width="131" height="22">
					<input class="fieldFocus" tabindex=100 oninput="top.filter( document.getElementById('categoryListing'), this.value )" type="text" id="filterBox" style="position:absolute;left:25px;top:2px;width:100px;border:0px #000000 solid;font-family:Courier New;font-size:12px; " size="16" NAME="filterBox">
					<img src="images/<% $sThemeFolder %>/filter_back.GIF" id="filterBack" border="0" style="position:absolute;left:8px;top:2px;">
					<script> document.getElementById('filterBox').focus(); </script>
				</div>
				<div id="categoryListing" style="position:absolute;left:15px;top:40px;width:435px;height:111px; border:2px solid LightSteelBlue; background-color:white; overflow:auto;">
			#endinline;

			$vsCategories = SSC_AppObj::vsGetTemplateCategories_s( $sType );

			$vsCategories/
			{
				$sCategory = *;
				#inline
				<div tabindex=<% $iternum+101 %> class="ActionLink" sValue="<%htmlencode($sCategory)%>" bFilterable=1
					sDescription="<%$sDescription%>"
					onkeypress="top.OnNewItemFromTemplate( '<%$sRef%>', '<%$sType%>', this.getAttribute('sDescription'), '<%$sCategory%>', null,  <%$sHints != ""? "'" + $sHints + "'": "null"%>, <% $sChildrenToExport %> );"
					onclick="top.OnNewItemFromTemplate( '<%$sRef%>', '<%$sType%>', this.getAttribute('sDescription'), '<%$sCategory %>', null,  <%$sHints != ""? "'" + $sHints + "'": "null"%>, <% $sChildrenToExport %> );" >
						<%htmlencode($sCategory)%></div>
				#endinline;
			};

			#inline
				</div>
				<div style="position:absolute;left:420px;top:160px;height:13px;" tabindex = 107>
						<%::sMarkUpBox( "Back", "back" )%>
				</div>
			#endinline;
			break;

		case "PickTemplateName":
			$sRef = Ref;
			$sCategory = GetRequest( "sCategory" );
			$sType = GetRequest( "sType" );
			$sDescription = GetRequest( "sDescription" );
			if ( $sDescription == null ) $sDescription = "";
			$sChildrenToExport = GetRequest( "sChildrenToExport" );
			$sChildrenToExport = $sChildrenToExport == NULL ? "null" : "'" + $sChildrenToExport + "'";
			$sThemeFolder = ::sGetThemeFolder();

			$sHints = GetRequest( "sUrlHints" );
			if( $sHints == NULL )
				$sHints = "";

			#inline
				<div style="position:absolute;left:15px;top:12px;width:200px;height:16px;">
					<h1>Select Template Name</h1>
				</div>
				<img src="images/<% $sThemeFolder %>/_help.png" title="Help" width="14" height="14" style="position:absolute;left:413px;top:12px;width:14px;height:14px;">
				<div    style="position:absolute;left:278px;top:10px;width:131px;height:22px;cursor:text;">
					<img src="images/<% $sThemeFolder %>/img00004.gif" border="0" width="131" height="22">
					<input class="fieldFocus" tabindex=100 oninput="top.filter( document.getElementById('templateListing'), this.value )" type="text" id="filterBox" style="position:absolute;left:25px;top:2px;width:100px;border:0px #000000 solid;font-family:Courier New;font-size:12px; " size="16" NAME="filterBox">
					<img src="images/<% $sThemeFolder %>/filter_back.GIF" id="filterBack" border="0" style="position:absolute;left:8px;top:2px;">
					<script> document.getElementById('filterBox').focus(); </script>
				</div>
				<div id="templateListing" style="position:absolute;left:15px;top:40px;width:435px;height:111px; border:2px solid LightSteelBlue; background-color:white; overflow:auto;">
			#endinline;

			$vsNames = SSC_AppObj::vsGetTemplateNames_s( $sType, $sCategory );

			$vsNames/
			{
				$sName = *;
				#inline
				<div tabindex=<% $iternum+101 %> class="ActionLink" sValue="<%htmlencode($sName)%>" bFilterable=1
					sDescription="<%$sDescription%>"
					onkeypress="top.OnNewItemFromTemplate( '<%$sRef%>', '<%$sType%>', this.getAttribute('sDescription'), '<%$sCategory%>', '<%$sName%>',  <%$sHints != ""? "'" + $sHints + "'": "null"%>, <% $sChildrenToExport %> );"
					onclick="top.OnNewItemFromTemplate( '<%$sRef%>', '<%$sType%>', this.getAttribute('sDescription'), '<%$sCategory%>', '<% $sName %>',  <%$sHints != ""? "'" + $sHints + "'": "null"%>, <% $sChildrenToExport %> );" >
					<%htmlencode($sName)%></div>
				#endinline;
			};

			#inline
				</div>
				<div style="position:absolute;left:420px;top:160px;height:13px;" tabindex = 107>
						<%::sMarkUpBox( "Back", "back" )%>
				</div>
			#endinline;
			break;
		case "PickTemplateMode":
			$sRef = Ref;
			$sFile = GetRequest( "sFile" );
			if ( $sFile == null )
			{
				$sFile = "";
			}
			else
			{
				$sFile = JSStr( $sFile );
			};

			$sType = GetRequest( "sType" );
			#inline
			<div style="position:absolute;left:30px;top:12px;width:225px;height:16px;z-index:300069" align="left">
				<h1>Template Mode</h1>
			</div>
			<div style="position:absolute;left:170px;top:80px;width:225px;height:13px;">
				<span class="ActionLink" sRef="<%Ref%>" sName='PickTemplate' sType='group'
						onclick="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', null, null, 'DEFAULT' );" onkeypress="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', null, null, 'DEFAULT' );"
						tabindex="104">Default</span>
				<span class="ActionLink" sRef="<%Ref%>" sName='PickTemplate' sType='group'
						onclick="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>' );" onkeypress="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>' );"
						tabindex="104">Custom</span>
			</div>
			<div style="position:absolute;left:360px;top:160px;height:13px;" tabindex="103">
				<% ::sMarkUpBox( "Back", "back" ) %>
			</div>
			#endinline;
			break;
		case "PickTemplateChildren":
			$sFile = GetRequest( "sFile" );
			if ( $sFile == null )
			{
				$sFile = "";
			}
			else
			{
				$sFile = JSStr( $sFile );
			};

			$sType = GetRequest( "sType" );

			DrawExportTree( $sFile, $sType );
			break;
		case "ChangeWorkflowState":
			$sRef = $this.Ref;

			$nAuthenticationFlag = nGetAuthenticationFlag( "WORKFLOW", "sWorkflowState" );
			#inline
				<div style="position:absolute;left:15px;top:12px;width:160px;height:16px;">
					<h1>Change Workflow State</h1>
				</div>

				<div style="position:absolute;left:28px;top:45px;width:40px;height:13px">
					State
				</div>
				<div>
					<select style="position:absolute;left:82px;top:43px;width:350px;font-family:verdana;font-size:8pt;"
							sItem='sWorkflowState' sRef=<% $sRef  %>  name="sWorkflowState" id="sWorkflowState" tabindex=101>
					#endinline;
					$sCurrentState = sGetData( "sWorkflowState" );
					$lsChoices = split( GetChoices( "sWorkflowState" ), "|" );
					$lsChoices/
					{
						if( * != "@" )
						{
							$sName = Item( *, 2, 2, EOI );
							$sDisplay = Item( *, 1, 1, EOI );
							$bSelected = * == $sCurrentState? true:false;
							#inline
								<option value='<%$sName%>' <%$bSelected? "selected":""%> ><% $sDisplay %></option>
							#endinline;
						};
					};
				#inline
					</select>
				</div>

				<div style="position:absolute;left:28px;top:65px;width:160px;height:16px;">Comments:</div>
				<div style="position:absolute;left:28px;top:85px;width:445px;height:16px;">
					<textarea sItem='sComments' rows="4" cols="20" name="sComments" style="width: 90%;" ></textarea>
			    </div>

				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span sclass="ActionLink" sRef = '<%$sRef%>'
						onclick="top.changeWorkflowState( this );" nAuthenticationFlag='<%$nAuthenticationFlag%>'
						publisher='<%$sRef%>~onRefresh~' sRefreshMethods='top.RefreshBody();'
						onkeypress="top.changeWorkflowState( this );" tabindex=102>
						<%$nAuthenticationFlag > 0? "next":"done"%>
					</span>
				</div>
			#endinline;
			break;
		case "CommandPrompts":

			## NOTE: This dialog has a complicated flow so I'm going to outline it here for future reference.
			##
			##	Step 1:		Dialog loads, user fills out values, hits submit. This will post to a hidden iFrame on the
			##				dialog and display it while simultaneously hiding the prompt div.
			##
			##				As of 02/07/2012 and later, this now supports multiple pages of prompts. The dialog will not
			##				proceed to Step 3 until all the prompt pages are processed. After each page, ProcessCommandVariables
			##				is run on the current page.
			##
			##
			##	Step 2:		Submit redirects to ProcessCommandVariables in RunCommand on SSC_AppObj. If a variable
			##				requires a value and one hasn't been set, the prompt variable will redisplay with the
			##				missing values highlighted and throw a prompt error. The user can then fix the dialog and
			##				resubmit.
			##
			##	Step 3:	    If the command requires a signature, ProcessCommandVariables will redirect to
			## (optional)   display the signature prompt dialog.
			##
			##	Step 4:		The dialog redirects to CustomCommand in RunCommand on SSC_AppObj. If this hits an error it will
			##				display a large scrolling text box for the error. Otherwise, the dialog will close and any necessary publishers
			##				for the command will run.
			##
			##

			$oThis = GetRequest( "oThis" );
			$sRef = $oThis.Ref;
			$oCommand = GetRequest( "oCommand" );
			$nAuthenticationFlag = GetRequest( "nAuthenticationFlag" );

			if( $sRequest == null )
			{
				$iPage = 1;

				## forces a cache reload on the first run of this command
				$iLastPromptPage = $oCommand.iLastPromptPage( true );
			}
			else
			{
				$iPage = CInt( $sRequest );

				$iLastPromptPage = $oCommand.iLastPromptPage();
			};

			$iContentTop = 26;
			$iContentLeft = 15;
			$iContentHeight = 128;
			$iContentWidth = 435;
			$iLinkTop = 160;
			$iLinkLeft = 380;
			$sDialogSize = $oCommand.sGetDialogSize();
			if( Upper($sDialogSize) == "LARGE" ) {
				$iContentTop = 38;
				$iContentLeft = 15;
				$iContentHeight = 340;
				$iContentWidth = 608;
				$iLinkTop = 384;
				$iLinkLeft = 549;
			};


			#inline
			<div  id="CalloutMainDiv"  >
				<div id="variableListing" style="position:absolute;left:<%$iContentLeft%>px;top:<%$iContentTop%>px;width:<%$iContentWidth%>px;height:<%$iContentHeight%>px; border: 2px solid LightSteelBlue; background-color:white; overflow:auto;">
					<form id='Variables' onsubmit='setTimeout( function(){ return true; }, 10 )'
							target='calloutMsgFrame' method='post' action='RunCommand.ase' >
						<input type='hidden' name='nAuthenticationFlag' value='<%$nAuthenticationFlag%>'/>
						<input type='hidden' name='sCommand' value='ProcessCommandVariables'/>
						<input type='hidden' name='oCommand' value='<%$oCommand.Ref%>'/>
						<input type='hidden' name='oThis' value='<%$sRef%>'/>
						<input type='hidden' name='iPage' value='<%$iPage%>'/>
						<input type='hidden' name='iLastPromptPage' value='<%$iLastPromptPage%>'/>
						<table style='font:8pt verdana;table-layout:fixed;width:<%$iContentWidth-20%>px;'>
							<colgroup>
								<col style='width:20px'>
								<col style='width:<%$iContentWidth-20-20%>px'>
							</colgroup>
			#endinline;


				$loVariables = $oCommand.loGetCommandPrompts( $iPage );
				$bHasRequiredVariable = false;

				$iTabIndex = 100;
				$thread.Context.Set( "iStartTabIndex", $iTabIndex );

				$loVariables/
				{
					$iTabIndex = $thread.Context.Get( "iStartTabIndex" );

					$sVariable = sGetData( "sVariableName" );
					$sPrompt = sGetData( "sVariablePrompt" );
					$iType = vGetMapValue( "I", "iPromptType" );
					$bRequired = vGetMapValue( "B", "bRequired" );

					$bHasFilter = bHasFilterBoxForPrompt();

					#inline
					<tr>
						<td colspan=2 >
					#endinline;

						if( $bHasFilter )
						{
							$sTags = "";
							if( $iternum == 0 ) $sTags += " firstField='true' ";
							FilterField( $sTags, "sId_" + $iTabIndex, "float:right" );
						};

					#inline
							<span id='<%$sVariable%>' sFieldId='sId_<%$iTabIndex%>' >
								<%$sPrompt%>
							</span>
					#endinline;

						if( $bRequired )
						{
							#inline
							<span style='color:red;'>
								*
							</span>
							#endinline;

							$bHasRequiredVariable = true;
						};

					#inline
						</td>
					</tr>
					<tr>
						<td></td>
						<td>
							<%
							$Value = GetRequest( $sVariable );
							if( $Value != null )
								$sValue = CStr( $Value );
							else
								$sValue = null;

							DisplayVariablePrompt( $oThis, $iTabIndex, $sValue, $sDialogSize );
							%>
						</td>
					</tr>
					#endinline;
				};
				if( $bHasRequiredVariable )
				{
					#inline
					<tr>
						<td colspan=2>
							<!-- * requires a value  -->
							<%GetGenString( "ksLabelRequiredVariablePrompt" )%>
						</td>
					</tr>
					#endinline;
				};
			#inline
						</table>
					</form>

				</div>
				<div style="position:absolute;left:<%$iLinkLeft%>px;top:<%$iLinkTop%>px;height:13px;" tabIndex='<%$iTabIndex + 1%>' >
					<%::sMarkUpBox( "Back", "back" )%>
				</div>
				<div style="position:absolute;left:<%$iLinkLeft+40%>px;top:<%$iLinkTop%>px;width:50px;height:13px;">
					<span class="ActionLink" tabIndex='<%$iTabIndex%>'
						onclick='document.getElementById("CalloutMainDiv").style.display = "none";document.getElementById("calloutMsgFrame").style.display = "block";document.getElementById("Variables").submit();'
						onkeypress='document.getElementById("CalloutMainDiv").style.display = "none";document.getElementById("calloutMsgFrame").style.display = "block";document.getElementById("Variables").submit();' tabindex=103>
						<%$nAuthenticationFlag >0 OR ( $iPage != $iLastPromptPage )? "next":"finish"%>
						</span>
				</div>
			</div>
			<iframe id="calloutMsgFrame"  src='blank.htm' frameborder=0 scrolling=no name="calloutMsgFrame"
					style="position:absolute;left:<%$iContentLeft+2%>px;top:<%$iContentTop%>px;display:none;" width="<%$iContentWidth%>px" height="<%$iContentHeight%>px"
					></iframe>
			#endinline;

			$thread.Context.Set( "iStartTabIndex", null );
		break;
		case "CustomCommandMenu":
			$oThis = *;
			$sRef = Ref;

			## get the custom commands for this class
			$loCustom = loGetCommands( "", "" );

			## if there are some, lets get specific ones
			$loLeft = $loCustom[ sMenuLocation == "LEFT" ];
			$loMiddle = $loCustom[ sMenuLocation == "MIDDLE" ];
			$loRight = $loCustom[ sMenuLocation == "RIGHT" ];

			$sThemeFolder = ::sGetThemeFolder();

			## custom left panel
			$iTop = ::iDialogTopStart();
			$iTopOrig = $iTop;
			$iLeftIcon = ::iDialogIconStart( "left" );
			$iLeftText = ::iDialogTextStart( "left" );
			$iItemHeight = ::iDialogItemHeight();
			$loLeft/
			{
				$oCommand = *;
				$sCommandRef = Ref;
				$bAuthenticate = bSignatureRequired;
				$bHasVariables = bHasVariables();
				$sDialogSize = sGetDialogSize();

				$sIcon = sCommandIcon;

				##make sure we look in the images theme directory if no path
				if( $sIcon != "" )
					$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );

				#inline
				<span>
				#endinline;

					if ( $sIcon != "" )
					{
						#inline
						<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" class="HelpTip" sHelpId="Callout_StateBased_Command">
						#endinline;
					};

				#inline
				<div sRef=<%$oThis.Ref%> sCmd=<%$oCommand.Ref%> onclick='top.RunStateBasedCommand( this );' sDialogSize="<%$sDialogSize%>"
					bHasVariables='<%$bHasVariables?"true":"false"%>'
					style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:175px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
					<%$oCommand.sDescription%>
				</div>
				</span>
				#endinline;

				$iTop += $iItemHeight;
			};

			## custom middle panel
			$iTop = $iTopOrig;
			$iLeftIcon = ::iDialogIconStart( "middle" );
			$iLeftText = ::iDialogTextStart( "middle" );
			$loMiddle/
			{
				$oCommand = *;
				$sCommandRef = Ref;

				$bAuthenticate = bSignatureRequired;
				$bHasVariables = bHasVariables();
				$sDialogSize = sGetDialogSize();

				$sIcon = sCommandIcon;

				##make sure we look in the images theme directory if no path
				if( $sIcon != "" )
					$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );

				#inline
				<span>
				#endinline;

					if ( $sIcon != "" )
					{
						#inline
						<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" class="HelpTip" sHelpId="Callout_StateBased_Command">
						#endinline;
					};

				#inline
				<div sRef=<%$oThis.Ref%> sCmd=<%$oCommand.Ref%> onclick='top.RunStateBasedCommand( this );' sDialogSize="<%$sDialogSize%>"
					bHasVariables='<%$bHasVariables?"true":"false"%>'
					style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:125px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
					<%$oCommand.sDescription%>
				</div>
				</span>
				#endinline;

				$iTop += $iItemHeight;
			};

			## custom right panel
			$iTop = $iTopOrig;
			$iLeftIcon = ::iDialogIconStart( "right" );
			$iLeftText = ::iDialogTextStart( "right" );
			$loRight/
			{
				$oCommand = *;
				$sCommandRef = Ref;
				$bAuthenticate = bSignatureRequired;
				$bHasVariables = bHasVariables();
				$sDialogSize = sGetDialogSize();

				$sIcon = sCommandIcon;

				##make sure we look in the images theme directory if no path
				if( $sIcon != "" )
					$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );

				#inline
				<span>
				#endinline;

					if ( $sIcon != "" )
					{
						#inline
						<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" class="HelpTip" sHelpId="Callout_StateBased_Command">
						#endinline;
					};

				#inline
				<div sRef=<%$oThis.Ref%> sCmd=<%$oCommand.Ref%> onclick='top.RunStateBasedCommand( this );' sDialogSize="<%$sDialogSize%>"
					bHasVariables='<%$bHasVariables?"true":"false"%>'
					style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:100px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
					<%$oCommand.sDescription%>
				</div>
				</span>
				#endinline;

				$iTop += $iItemHeight;
			};



			#inline
				<div style="position:absolute;left:420px;top:160px;width:50px;height:13px;">
					<span class="ActionLink"
					onclick="top.closeCallout();"
					onkeypress="top.closeCallout();">
						done
					</span>
				</div>
			#endinline;

			break;

		case "ConfirmRemove":

			$oProject = oGetProject();

			## check privilege
			$bCanDelete = bCheckAccess( "DELETE" );

			if( $bCanDelete )
			{
				$sPassword = GetRequest( "sPassword" );
				$sComments = GetRequest( "sSignatureComments" );

				#inline
					<div style="position:absolute;left:68px;top:49px;width:334px;height:63px;">
						<center><% $sRequest %></center>
					</div>
				#endinline;

				if( $sContext == "table" )
				{
					#inline
					<span class="ActionLink" style="font-size:12pt;position:absolute;left:170px;top:158px;width:38px;height:13px;"
						  onclick="top.RemoveFromTable( top.currTableItem, true );top.closeCallout();">
						Yes
					</span>
					#endinline;
				}
				else if( $sContext == "TableDataSrc" )
				{
					#inline
					<span class="ActionLink" style="font-size:12pt;position:absolute;left:170px;top:158px;width:38px;height:13px;"
						  onclick="top.RemoveFromTable( top.currTableItem, true, true );top.closeCallout();">
						Yes
					</span>
					#endinline;
				}
				else if( $sContext == "ListWidget" )
				{
					#inline
					<span class="ActionLink" style="font-size:12pt; position:absolute;left:170px;top:158px;width:38px;height:13px;"
						  onclick="top.RemoveFromListWidget( top.oCurrLineItem, true );top.closeCallout();">
						Yes
					</span>
					#endinline;
				}
				else
				{
					#inline
						<span class="ActionLink" style="font-size:12pt; position:absolute;left:170px;top:158px;width:38px;height:13px;"
							 onclick="top.Start_FT_Remove( null, true <% $sPassword != NULL? ",'" + $sPassword + "'" : "" %><% $sComments != NULL? ",'" + jsstr($sComments) + "'" : "" %> );">
							Yes
						</span>
					#endinline;
				};

				#inline
					<span style="font-size:12pt; position:absolute;left:240px;top:159px;width:38px;height:13px;">
						<% ::sMarkUpBox( "Back", "No", "", "", "font-size:12pt;" ) %>
					</span>
				#endinline;
			}
			else
			{
				#inline
					<div style="position:absolute;left:68px;top:49px;width:334px;height:63px;">
						<center><%GetGenString( "ksError_NoDeletePrivilegeForRemoval" ); %></center>
					</div>
				#endinline;
			};
		break;

		case "DifferencesPrintHelp":
			#inline
				<div style="position:absolute;left:15px;top:12px;width:425px;height:100px;">
					In order for differencing highlighting to appear when printing, the browser must be set to print backgrounds. If they are not appearing:
				<br/>
			#endinline;
			$sBrowser = GetDaoContext( "sBrowser" );
			if ( $sBrowser == "Internet Explorer" )
			{
				#inline
					<ol>
						<li>Open Internet Explorer's <b>File</b> menu</li>
						<li>Choose <b>Page setup</b></li>
						<li>Make sure the <b>Print Background Colors and Images</b> option is checked</li>
					</ol>
				#endinline;

			}
			else if ( $sBrowser == "Chrome" )
			{
				#inline
					<ul>
						<li>Make sure the <b>Background graphics</b> option is checked in the left hand toolbar of the print screen</li>
					</ul>
				#endinline;
			}
			else if ( $sBrowser == "Safari" )
			{
				#inline
					<ul>
						<li>Make sure the <b>Print backgrounds</b> option is checked on the print screen</li>
					</ul>
				#endinline;
			};

			## is it side by side differencing vs inline
			if ( Lower($sSubRequest) == "true" )
			{
				#inline
					<div>
						In order for side-by-side differences to format nicely, the print <b>Page Size</b> should be at least 11 inches wide, i.e. tabloid.
					</div>
					<br/>
				#endinline;
			};
			#inline
					<div>
						*Warning: Tables may be forced to resize to fit page.
					</div>
				</div>
			#endinline;
			break;

		default:
			super::getDialog_Builtin ( $sOriginalRequest, $sRequest, $sContext );
			break;
	};
}
##===========================================================================
## GetHistoryActions
##===========================================================================
void SSC_DBObj::GetHistoryActions( $oHItem, $sLatestVersion, $sCurrentVersion, $sNextVersion )
{

	## Only display differences if next version is not blank and is not the current version
	if ( $sNextVersion != "" And $sNextVersion != $sCurrentVersion )
	{
		## if a history item is passed in, get the controlled item from it
		## else use the passed in item
		if ( $oHItem.Classname == "SSC_HistoryItem" )
		{
			$oHM = oGetHistoryManager( false );
			$oBaseObj = $oHItem.oControlledItem;
		}
		else
		{
			$oBaseObj = $oHItem;
		};

		$sDiffReport = URLEncode( "OnVersionCommandExecute.ase?oThis="+Ref + "&oPrevHItem=" + $oHItem.Ref + "&sRequest=DifferencesReport" );
		#inline
		<span sRef=<%Ref%>
				onclick='top.window.open( "Run.ase?sLayout=JustBody&sHeaderType=NoHead&sBody=<%$sDiffReport%>", "_blank", "directories=no,location=no,menubar=no,status=no,titlebar=no,toolbar=no,resizable=yes,width=700px,top=0,left=0" );'
				class="ActionLink" style="margin-left:10px;" >Differences</span>
		#endinline;
	}
	else
	{
		$sClassname = $oHItem.Classname;
        ## Don't think this should be here so I disabled it. DTG - 1/19/12
		if ( false AND $sClassname != "SSC_HistoryItem" And $sClassname != "SSC_HistoryManager" )
		{
			$sDiffReport = URLEncode( "OnVersionCommandExecute.ase?oThis="+Ref + "&oPrevHItem=" + $oHItem.Ref + "&sRequest=DifferencesReport" );
			#inline
			<span sRef=<%Ref%>
					onclick='top.window.open( "Run.ase?sLayout=JustBody&sHeaderType=NoHead&sBody=<%$sDiffReport%>", "_blank", "directories=no,location=no,menubar=no,status=no,titlebar=no,toolbar=no,resizable=yes,width=700px,top=0,left=0" );'
					class="ActionLink" style="margin-left:10px;" >Differences</span>
			#endinline;
		}
		else
		{
			#inline
			None
			#endinline;
		};
	};



}

##===========================================================================
## GetReport_Builtin
##===========================================================================
void SSC_DBObj::GetReport_Builtin( $sShowingWhat )
{
	$oThis = *;
	$iPage = GetRequest("iPage");

	$iRequirementDisplay = GetDaoContext( "RequirementDisplayMode" );

	$nDataSrc = GetRequest( "nDataSrc" ); ## any cases below that want to use this should have the caller send it via the report link
	if ( $nDataSrc )
		$this.SetContext( "nDataSourceIndexRequested", $nDataSrc, true );

	switch($sShowingWhat)
	{
		case "RequirementsSummaryReport":
			switch( $iPage )
			{
				case 0:
					GetReportHeadingLinks( "Requirements Summary Report" );
					GetSection($sShowingWhat);
					break;
				case 1:
					$sUrl = "ProgressBar.ase?oThis=" + $this.Ref + "&sShowingWhat=" + $sShowingWhat + "&sColor=white&sInitialText=Generating+report...";
					$sUrl += "&sPage=GetReport.ase&iPage=0";
					::Redirect( $sUrl );
					break;
			};
			break;
		case "TieredScorecard":
			$MyRef = Ref;
			switch( $iPage )
			{
				case 0:
					GetReportHeadingLinks( "Tiered Scorecard" );
					if( GetRequest( "sExport" ) == NULL )
					{
						#inline
						<div style="font-family:verdana;text-align:center;color:#666666;" class='noprint'>
							<span class="ActionLink" style = "cursor:pointer;font-family:verdana;text-align:center;text-decoration:underline;"
								sUrl='GetReport.ase?oThis=<% $MyRef %>&sShowingWhat=<%$sShowingWhat%>&iPage=1'
								onClick = "window.location = this.getAttribute('sUrl');">Edit Scorecard Settings</span>
						</div>
						<br>
						#endinline;
					};

					$bExport = GetRequest( "sExport" ) != NULL;

					if( NOT $bExport )
					{
						#inline
						<div id='loadingMessage' class='noprint' style='font-family:verdana;font-size:8pt;'>
							<center>
						#endinline;
							::AddJSProgressBar(  "Loading scorecard...", "loadingMessage", "mainDiv", true );
						#inline
							</center>
						</div>
						<div id='mainDiv' style="margin-left:20px;display:none;font-family:verdana;">
						#endinline;
					}
					else
					{
						#inline
						<div id='mainDiv' style="margin-left:20px;display:block;font-family:verdana;">
						#endinline;
					};

					ProcessScorecardSettings();

					##Get the preferred saved values
					$sGoal = $me.oPerson.sGetPersonalPref( "PREF_ScorecardGoal" );
					$sSections = $me.oPerson.sGetPersonalPref( "PREF_ScorecardSections" );

					##Put goal first so it gets drawn first
					$lsSections = CList( $sGoal );
					$lsSections << Split( $sSections, "|" );

					##First, try the value sent on the request
					$bShowSubGroups = GetRequest( "bShowSubGroups" );
					if( $bShowSubGroups == NULL )
					{
						##Next check the personal preference
						$sShowSubGroups = $me.oPerson.sGetPersonalPref( "PREF_ScorecardShowSubGroups" );
						if( $sShowSubGroups != "" )
						{
							$bShowSubGroups = $sShowSubGroups == "True"? true:false;
						}
						## default
						else
							$bShowSubGroups = true;
					};

					##Save the value
					$bSaved = $me.oPerson.bSetPersonalPref( "PREF_ScorecardShowSubGroups", $bShowSubGroups );

					##First, try the value sent on the request
					$bShowSubItems = GetRequest( "bShowSubItems" );
					if( $bShowSubItems == NULL )
					{
						##Next check the personal preference
						$sShowSubItems = $me.oPerson.sGetPersonalPref( "PREF_ScorecardShowSubItems" );
						if( $sShowSubItems != "" )
						{
							$bShowSubItems = $sShowSubItems == "True"? true:false;
						}
						## default
						else
							$bShowSubItems = false;
					};

					##Save the value
					$bSaved = $me.oPerson.bSetPersonalPref( "PREF_ScorecardShowSubItems", $bShowSubItems );

					GetScorecardHeader();

					GetScorecard( $lsSections, $sGoal, $bShowSubGroups, $bShowSubItems, true );

					"</div>";
					#inline
					</body>
					<script>
						top.DoScorecardCalculations(document.getElementById('scorecard'));
						var oDescriptionWidth = document.getElementById( "nDescriptionWidth" );

					</script>
					#endinline;

					##contexts for the progress bar are set regardless, and this clears them
					::StopProgressBar();
					if( NOT $bExport )
					{
						::CloseJSProgressBar();
					};
					break;
				case 1:
					$MyRef = Ref;

					$lsColumns = CList();
					$sColumns = $me.oPerson.sGetPersonalPref( "PREF_ScorecardColumns" );
					$bDefault = false;
					if( $sColumns )
						$lsColumns = Split( $me.oPerson.sGetPersonalPref( "PREF_ScorecardColumns" ), "|" );
					else
						$bDefault = true;

					GetReportPromptHeadingLinks( "Tiered Scorecard" );
					#inline
					<br>
					<div style = "margin-left:20px;">
						<form action="GetReport.ase" class="reportForm" onsubmit="return top.validateScorecardForm( this );">
							<input name="oThis" type=hidden value='<%Ref%>'>
							<input name="iPage" type=hidden value='0'>
							<input name="sShowingWhat" type=hidden value="<%$sShowingWhat%>">
							<input name="sSections" id="sSections" type=hidden value="">
							<input name="sColumns" id="sColumns" type=hidden value="">
							<input name="sSubItems" id="sSubItems" type=hidden value="">
							<input name="sGoal" id="sGoal" type=hidden value="">
							<input name="bTiered" id="bTiered" type=hidden value="true">
							<input name="bShowSubGroups" id="bShowSubGroups" type=hidden value="true">
							<input name="bShowSubItems" id="bShowSubItems" type=hidden value="false">
							<input name='bUpdateTxn' id='bUpdateTxn' type='hidden' value='true'/>

							<table width=100% style='font-family:verdana;'><tr><td style='width:50%' valign=top>
							<span style="text-decoration:underline;font-weight:bold">General</span><br>
								<div style="margin-left:20px;margin-top:10px; margin-bottom:15px">
									<input type=checkbox name=sColName value="S"	<% ( $bDefault ) ? "checked" : ( $lsColumns contains "S" ) ? "checked" : "" %> >Metric<br>
									<input type=checkbox name=sColName value="O"	<% ( $bDefault ) ? "checked" : ( $lsColumns contains "O" ) ? "checked" : "" %> >Owner<br>
									<input type=checkbox name=sColName value="TF"	<% ( $bDefault ) ? "checked" : ( $lsColumns contains "TF" ) ? "checked" : "" %> >Transfer Function<br>
									<input type=checkbox name=sColName value="U"	<% ( $bDefault ) ? "checked" : ( $lsColumns contains "U" ) ? "checked" : "" %> >Units<br>
									<input type=checkbox name=sColName value="CGI"	<% ( $bDefault ) ? "checked" : ( $lsColumns contains "CGI" ) ? "checked" : "" %> >CGI<br>
									<input type=checkbox name=sColName value="COV"	<% ( $bDefault ) ? "checked" : ( $lsColumns contains "COV" ) ? "checked" : "" %> >COV<br>
									<input type=checkbox name=sColName value="SampleSize"
										<% ( $bDefault ) ? "checked" : ( $lsColumns contains "SampleSize" ) ? "checked" : "" %> >Sample Size<br>
									<input type=checkbox name=sColName value="GageRR"
										<% ( $bDefault ) ? "" : ( $lsColumns contains "GageRR" ) ? "checked" : "" %> >Gage R&R<br>
									<input type=checkbox name=sColName value="PTRatio"
										<% ( $bDefault ) ? "" : ( $lsColumns contains "PTRatio" ) ? "checked" : "" %> >P/T Ratio <br>
									<input type=checkbox name=sColName value="CP"	<% ( $bDefault ) ? "" : ( $lsColumns contains "CP" ) ? "checked" : "" %> >Display CP
								</div>
						#endinline;


										GetScorecardSectionsPrompt();

				"</td>";

				$sShowSubGroups = $me.oPerson.sGetPersonalPref( "PREF_ScorecardShowSubGroups" );

				if( $sShowSubGroups == NULL )
					$bShowSubGroups = true;
				else
					$bShowSubGroups = Lower( $sShowSubGroups ) == "true"? true:false;

				$sShowSubItems = $me.oPerson.sGetPersonalPref( "PREF_ScorecardShowSubItems" );

				if( $sShowSubItems == NULL )
					$bShowSubItems = false;
				else
					$bShowSubItems = Lower( $sShowSubItems ) == "true"? true:false;


				#inline
					<td style='width:50%' valign=top>
						<span style="text-decoration:underline;font-weight:bold">Levels to Show</span><br>
						<div style="margin-left:20px;margin-top:10px; margin-bottom:15px">
							<input type='checkbox' name='sShowSubGroups' value='true' id='sShowSubGroups' <%$bShowSubGroups? "checked" : "" %>/>
								<span style='margin-left:5px'>Include all sub-groups</span> <br/>
							<input type='checkbox' name='sShowSubItems' value='true' id='sShowSubItems' <%$bShowSubItems? "checked" : "" %>/>
								<span style='margin-left:5px'> Include all sub requirements</span>
						</div>
					</td>
				</tr>
				</table>
					<input name="submit" type="submit" value="Submit" />
					</form>
				</div>
				#endinline;
				break;
			};

			break;
		case "TieredStatusSummary":
			switch( $iPage )
			{
				case 0:
					$bShowSubGroups = GetRequest( "bShowSubGroups" );
					$bShowSubSpecs = GetRequest( "bShowSubItems" );
					$bEditable = GetRequest( "bEditable" );

					GetReportHeadingLinks( "Tiered Requirements Status" );
					##Gather objects for display in report.

					GetStatusSummaryStyle();
					GetStatusSummaryPage( CList(), $bShowSubGroups, $bShowSubSpecs, 0, true, $bEditable );

					## contexts are set regardless, and this clears it
					::StopProgressBar();
					if( GetRequest( "sExport" ) == NULL )
					{
						::CloseJSProgressBar();
					};
					break;
				case 1:
					$bIsRequirement = $this.classname == "SSC_SysReq"? true:false;

					GetReportPromptHeadingLinks( "Tiered Requirements Status" );
					#inline
					<br>
					<div style = "margin-left:20px;">
						<center>
							<form action="GetReport.ase" class="reportForm" onsubmit="top.validateTieredStatusSummary( this )">
								<input name="oThis" type=hidden value='<%Ref%>'>
								<input name="iPage" type=hidden value='2'>
								<input name="sShowingWhat" type=hidden value="<%$sShowingWhat%>">
					#endinline;
							if( $bIsRequirement )
							{
								#inline
								<input name="bShowSubGroups" id="bShowSubGroups" type=hidden value='false'>
								<input name="bShowSubItems" id="bShowSubItems" type=hidden value='true'>
								#endinline;
							};

					#inline
								<span style="text-decoration:underline;font-weight:bold">Levels to Show</span><br>
								<div style="margin-left:20px;margin-top:10px; margin-bottom:15px">
									<div style="margin-left:20px;margin-top:10px; margin-bottom:15px">
										<table style='font-family:verdana;color:#666666;'>
					#endinline;

						if( NOT $bIsRequirement )
						{
							#inline
											<tr>
											<td>
												<input type='checkbox' name='bShowSubGroups' value='true' id='bShowSubGroups' checked/>
													<span style='margin-left:5px'>Include all sub-groups</span> <br/>
											</td>
											</tr>
											<tr>
											<td>
												<input type='checkbox' name='bShowSubItems' value='true' id='bShowSubItems' />
													<span style='margin-left:5px'> Include all sub requirements</span>
											</td>
											</tr>
							#endinline;
						};
								#inline
											<tr>
											<td>
												<input type='checkbox' name='bEditable' value='true' id='bEditable' />
													<span style='margin-left:5px'> Make the report editable</span>
											</td>
											</tr>
										</table>
									</div>
								</div>

								<input name="submit" type="submit" value="Submit" />
							</form>
						</center>
					</div>
				#endinline;
				break;
				case 2:
					##Gather objects for display in report.

					$bShowSubGroups = GetRequest( "bShowSubGroups" );
					$bShowSubSpecs = GetRequest( "bShowSubItems" );
					$bEditable = GetRequest( "bEditable" );
					$bConfirmed = GetRequest( "bConfirmed" );
					if( $bShowSubGroups AND $bConfirmed == NULL )
					{
						## we need to check to make sure the table will not be super large first
						## if it is, we need a confirmation box before displaying the report.
						##Trace("Calling bCheckTieredTableSize...");
						## 50 levels maximum & 200 lines
						$bLarge = bCheckTieredTableSize( "Requirements", "SCORECARD", $bShowSubGroups, $bShowSubSpecs, 50, 200 );
						if( $bLarge )
							$bConfirmed = false;
						else
							$bConfirmed = true;
					}
					else
						$bConfirmed = true;


					#inline
					<form id='oForm' action="GetReport.ase" class="reportForm">
						<input name="oThis" type=hidden value='<%Ref%>'>
						<input name="iPage" type=hidden value='0'>
						<input name="sShowingWhat" type=hidden value="<%$sShowingWhat%>">
						<input type='hidden' name='bShowSubGroups' value='<%$bShowSubGroups? "true":"false"%>' id='bShowSubGroups'/>
						<input type='hidden' name='bEditable' value='<%$bEditable? "true":"false"%>' id='bEditable'/>
						<input type='hidden' name='bShowSubItems' value='<%$bShowSubSpecs? "true":"false"%>' id='bShowSubItems'/>
						<input type='hidden' name='bConfirmed' value='true' id='bConfirmed'/>
					</form>
					<script>
					#endinline;

					if( $bConfirmed )
					{
						#inline
						var bConfirm = true;
						#endinline;
					}
					else
					{
						#inline
							var bConfirm = window.confirm( "This report is more than 200 lines long and will take a long time to render. Okay to continue?" );
						#endinline;
					};

					#inline
						if( bConfirm )
						{
							document.getElementById( "oForm" ).submit();
						}
						else
							top.link( "GetBodyPage.ase?oThis=<%$this.Ref%>&sShowingWhat=Reports", "body" );
					</script>
					#endinline;

					break;
			};

			break;

		case "TestsToRequirementsTrace":
			switch ( $iPage )
			{

				case 0:
					TraceReportHeader( "Tests to Requirements Trace" );
					TraceReport( "Tests", "Requirements", "Parents", "Tests", "Requirements " );
					break;
			};

			break;

		case "ReqToSpecTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Sub Requirements Trace" );
					TraceReport( "Requirements", "Requirements", "Children", "Requirements", "Sub Requirements" );
					break;
			};

			break;

		case "ReqToParentReqsTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Sub Requirements Trace" );
					TraceReport( "Requirements", "Requirements", "Parents", "Requirements", "Parent Requirements" );
					break;
			};

			break;

		case "ReqToVOCTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Voices Trace" );
					TraceReport( "Requirements", "Voices", "Parents", "Requirements", "Voices" );
					break;
			};

			break;

		case "RisksToMitigations":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Mitigations Trace" );
					TraceReport( "Risks", "Mitigations", "Mine", "Risks", "Mitigations" );
					break;
			};

			break;
		Case "ReqsAndSpecsToRisks":

			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Risks Trace" );
					TraceReport( "Requirements", "Risks", "Children", "Requirements", "Risks" );
					break;
			};

			break;

		case "VOCToReqTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Voices to Requirements Trace" );
					TraceReport( "Voices", "Requirements", "Children", "Voices", "Requirements" );
					break;
			};

			break;


		case "VOCToVOCInputTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Voices to Voice Inputs Trace" );
					TraceReport( "Voices", "Inputs", "Parents", "Voices", "Voice Inputs" );
					break;
			};

			break;


		case "ReqToSubsystemTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Groups Trace" );
					## this needs improvement because reqs not in folders will not show their parent subsystems. MLH.
					TraceReport( "Requirements", "Groups", "Parents", "Requirements", "Groups" );
					break;
			};

			break;
		case "ReqToDocumentTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Documentation Trace" );
					## this needs improvement because reqs not in folders will not show their parent subsystems. MLH.
					TraceReport( "Requirements", "Documents", "Parents", "Requirements", "Documentation" );
					break;
			};

			break;

		case "VoiceToDocumentTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Voices to Documentation Trace" );
					## this needs improvement because reqs not in folders will not show their parent subsystems. MLH.
					TraceReport( "Voices", "Documents", "Parents", "Voices", "Documentation" );
					break;
			};

			break;

		case "RiskToDocumentTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Risks to Documentation Trace" );
					## this needs improvement because reqs not in folders will not show their parent subsystems. MLH.
					TraceReport( "Risks", "Documents", "Parents", "Risks", "Documentation" );
					break;
			};

			break;

		case "MitigationsToDocumentTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Mitigations to Documentation Trace" );
					## this needs improvement because reqs not in folders will not show their parent subsystems. MLH.
					TraceReport( "Mitigations", "Documents", "Parents", "Mitigations", "Documentation" );
					break;
			};

			break;

		case "TestsToDocumentTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Tests to Documentation Trace" );
					## this needs improvement because reqs not in folders will not show their parent subsystems. MLH.
					TraceReport( "Tests", "Documents", "Parents", "Tests", "Documentation" );
					break;
			};

			break;

		case "ReqToBreakdownTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Breakdown Trace" );
					## this needs improvement because reqs not in folders will not show their parent subsystems. MLH.
					TraceReport( "Requirements", "Breakdowns", "Parents", "Requirements", "Breakdowns" );
					break;
			};

			break;

		case "SpecToTestTrace":
			switch ( $iPage )
			{
				case 0:
					TraceReportHeader( "Requirements to Test Trace" );
					TraceReport( "Requirements", "Tests", "Children", "Requirements", "Tests" );
					break;
			};

			break;

		default:
			super::GetReport_Builtin( $sShowingWhat );
			break;
	};

}

##===========================================================================
## bCheckTieredTableSize
##
## Counts the lines in a tiered scorecard or status table and returns if a cutoff is reached
##
## nCutoff -- stop and return false when reaching this count
## bSubGroups -- include sub groups
## bSubItems -- include sub items
## nDepth -- maximum depth to search
##
##===========================================================================
variant SSC_DBObj::bCheckTieredTableSize( $sRequest, $sScope, $bSubGroups, $bSubItems, $nDepth, $nCutoff )
{
	$nCount = nTieredTableSize( $sRequest, $sScope, $bSubGroups, $bSubItems, $nDepth, $nCutoff );
	if( $nCount > $nCutoff )
		return true;
	return false;
}
##===========================================================================
## nTieredTableSize
## Counts the table size up to the cutoff, using the scope "Tree"
##===========================================================================
variant SSC_DBObj::nTieredTableSize( $sRequest, $sScope, $bSubGroups, $bSubItems, $nDepth, $nCutoff)
{
	return nTieredTableSize( $sRequest, $sScope, $bSubGroups, $bSubItems, $nDepth, $nCutoff, 0, 0);
}
##===========================================================================
## nTieredTableSize
##===========================================================================
variant SSC_DBObj::nTieredTableSize( $sRequest, $sScope, $bSubGroups, $bSubItems, $nDepth, $nCutoff, $nCount, $nLevel )
{
	$sClassName = $this.ClassName;

	## If reached the level, don't look deeper
	$nLevel += 1;
	if ($nLevel > $nDepth) return $nCount;

	$loObjects = CList();

	## Always include the objects if category or group
	if ( $this KindOf "SSC_ItemGroup" )
	{
		$sClass = SSC_AppObj::sGetClassNameFromRequest( $sRequest );

		## get type from this
		$sRelation = sGetRelationType( $sClass, NullObject );

		$loObjects << tcGetRelatedObjects( $sRelation );
	};

	## Get the subgroups and subitems as requested
	if ( $bSubGroups )
	{
		## Only meaningful for a subsystem
		if ( $sClassName == "SSC_SubSystem" )
		{
			$loObjects << tcGetRelatedObjects( "GROUPS" );
		};

		if( $sClassName == "SSC_Project" )
			$loObjects << loSubSystems;
	};

	## count me and my reqs
	$nCount += Count( $loObjects ) + 1;

	if( $nCutoff != NULL AND $nCount > $nCutoff )
		return $nCount;
	else
	{
		$loObjects/
		{
			$oItem = *;
			## If an ItemGroup or getting subitems, go onto the next item
			if ( ( $oItem KindOf "SSC_ItemGroup" ) OR $bSubItems )
			{
				## count the values for all of my sub groups
				$nCount = $oItem.nTieredTableSize( $sRequest, $sScope, $bSubGroups, $bSubItems, $nDepth, $nCutoff, $nCount, $nLevel );
				if( $nCutoff != NULL AND $nCount > $nCutoff )
					return $nCount;
			};
		};
	};
	return $nCount;
}

##===========================================================================
## nGetRatingScoreMax
##
## NOTE: This is expensive, so only call it once per table
##===========================================================================
variant SSC_DBObj::nGetRatingScoreMax()
{
	$loReqs = loGetObjects( "Requirements", "Below" );
	return nGetRatingScoreMax( $loReqs );
}
#*!***************************************************************************************************
 * <summary>
 * 	Return the highest rating for a group of requirements
 * </summary>
 * <visibility>
 * 	Advanced
 * </visibility>
 * <param name="$loReqs" type="WOS List of Object">List of requirements</param>
 * <returns>Integer</returns>
*****************************************************************************************************#
variant SSC_DBObj::nGetRatingScoreMax( $loReqs )
{
	$nMax = 0;
	$oParent = $this;
	$bIsVOC = $oParent.classname == "SSC_VOC";

	if( $bIsVOC )
		$sRequest = "iFirstHOQScore";
	else
		$sRequest = "iHOQScore";

	$loReqs/
	{
		$nCurr = CReal( sGetData( $sRequest ) );
		if( $nCurr > $nMax )
			$nMax = $nCurr;
	};

	return $nMax;
}
##===========================================================================
## lsGetFormDef_Builtin
##===========================================================================
variant SSC_DBObj::lsGetFormDef_Builtin( $sRequest )
{
	$lsRetval = CList();

	switch ( $sRequest )
	{
		case "Comments":
			$lsRetval << "Comments|sComments|true|sEmptyPrompt='Comments here...' ";
			break;
		case "NumberFormat":
			$lsRetval << "Type|sNumberFormatType|true|sEmptyPrompt='...'";
			$lsRetval << "Precision|sNumberFormatPrecision|true|sEmptyPrompt='...'";
			break;
		case "FMEA":
			## do nothing
			break;
		case "Status":
			$lsRetval = CList();
			$lsRetval << "Workflow_State|sWorkflowState|true|sEmptyPrompt='...' ";
			$lsRetval << "Version_State|CheckoutStatus|false|sEmptyPrompt='State here...'";
			$lsRetval << "Last Modified|sModifiedDateAndTime|false|sEmptyPrompt='Modified here...'";

			break;

		case "StatusForCommandMenu":
			$lsRetval = CList();
			$lsRetval << "Last Modified|sModifiedDateAndTime|false|sEmptyPrompt='Modified here...'";
			$lsRetval << "Workflow_State|WorkflowForCommandMenu|false|sEmptyPrompt='...' ";
			$lsRetval << "Checkout Status|CheckoutStatus|false|sEmptyPrompt='State here...'";

			break;
		case "DefaultCustomPageSizeSettings":
			$lsRetval << "Page Length|sDefaultPageSizeCustomLength|true|sEmptyPrompt='11in' ";
			$lsRetval << "Page Width|sDefaultPageSizeCustomWidth|true|sEmptyPrompt='8.5in' ";
			break;
		default:
			$lsRetval << super::lsGetFormDef_Builtin($sRequest);
	};

	return $lsRetval;
}

##===========================================================================
## sGetFMEAFormat
##===========================================================================
variant SSC_DBObj::sGetFMEAFormat()
{
	$oSection = GetThreadContext( "oCurrentSection" );
	if( $oSection )
	{
		$oViewDef = $oSection.oGetCurrViewDef( true );
		if( $oViewDef And $oViewDef != NULLOBJECT )
			$oSection = $oViewDef;

		$bMOD	=  $oSection.sGetData( "FMEA_Col_Show_Group Name" ) == "1";
		$bDF	=  $oSection.sGetData( "FMEA_Col_Show_Function Name" ) == "1";
		$bPF	=  $oSection.sGetData( "FMEA_Col_Show_Failure Modes" ) == "1";
		$bPE	=  $oSection.sGetData( "FMEA_Col_Show_Effects" ) == "1";
		$bS		=  $oSection.sGetData( "FMEA_Col_Show_Severity" ) == "1";
		$bPC	=  $oSection.sGetData( "FMEA_Col_Show_Causes" ) == "1";
		$bO		=  $oSection.sGetData( "FMEA_Col_Show_Occurrence" ) == "1";
		$bCM	=  $oSection.sGetData( "FMEA_Col_Show_Current Mitigations" ) == "1";
		$bD		=  $oSection.sGetData( "FMEA_Col_Show_Detection" ) == "1";
		$bRPN	=  $oSection.sGetData( "FMEA_Col_Show_RPN" ) == "1";
		$bSxO	=  $oSection.sGetData( "FMEA_Col_Show_SxO" ) == "1";
		$bFF	=  $oSection.sGetData( "FMEA_Col_Show_FF" ) == "1";
		$bNM	=  $oSection.sGetData( "FMEA_Col_Show_New Mitigations" ) == "1";
		$bNMSO	=  $oSection.sGetData( "FMEA_Col_Show_Mitigation Benefit (S,O)" ) == "1";
		$bNMSOD	=  $oSection.sGetData( "FMEA_Col_Show_Mitigation Benefit (S,O,D)" ) == "1";
		$bNMRSP =  $oSection.sGetData( "FMEA_Col_Show_Mitigation Owner" ) == "1";
		$bNMSTA =  $oSection.sGetData( "FMEA_Col_Show_Mitigation Status" ) == "1";
		$bRSOR	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,SxO)" ) == "1";
		$bRSODR	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,D,RPN)" ) == "1";
		$bRSODF	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,D,FF)" ) == "1";
		$bRRPN	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (RPN)" ) == "1";
		$bRSxO	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (SxO)" ) == "1";
		$bRFF	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (FF)" ) == "1";

		$sFMEAFormat = "";
		if ( $bMOD )
		{
			$sFMEAFormat += "_MOD_";
		};
		if ( $bDF )
		{
			$sFMEAFormat += "_DF_";
		};
		if ( $bPF )
		{
			$sFMEAFormat += "_PF_";
		};
		if ( $bPE )
		{
			$sFMEAFormat += "_PE_";
		};
		if ( $bS )
		{
			$sFMEAFormat += "_S_";
		};
		if ( $bPC )
		{
			$sFMEAFormat += "_PC_";
		};
		if ( $bO )
		{
			$sFMEAFormat += "_O_";
		};
		if ( $bCM )
		{
			$sFMEAFormat += "_CM_";
		};
		if ( $bD )
		{
			$sFMEAFormat += "_D_";
		};
		if ( $bRPN )
		{
			$sFMEAFormat += "_RPN_";
		};
		if ( $bSxO )
		{
			$sFMEAFormat += "_SxO_";
		};
		if ( $bFF )
		{
			$sFMEAFormat += "_FF_";
		};
		if ( $bNM )
		{
			$sFMEAFormat += "_NM_";
		};
		if ( $bNMSO )
		{
			$sFMEAFormat += "_NMSO_";
		};
		if ( $bNMSOD )
		{
			$sFMEAFormat += "_NMSOD_";
		};
		if ( $bNMRSP )
		{
			$sFMEAFormat += "_NMRSP_";
		};
		if ( $bNMSTA )
		{
			$sFMEAFormat += "_NMSTA_";
		};
		if ( $bRSOR )
		{
			$sFMEAFormat += "_RSOR_";
		};
		if ( $bRSODR )
		{
			$sFMEAFormat += "_RSODR_";
		};
		if ( $bRSODF )
		{
			$sFMEAFormat += "_RSODF_";
		};
		if ( $bRRPN )
		{
			$sFMEAFormat += "_RRPN_";
		};
		if ( $bRSxO )
		{
			$sFMEAFormat += "_RSxO_";
		};
		if ( $bRFF )
		{
			$sFMEAFormat += "_RFF_";
		};
		SetRequest( "sFMEAFormat", $sFMEAFormat );
	}
	else
	{
		$sClassname = $this.classname;
		switch( $sClassname )
		{
			case "SSC_SubSystem":
				$sFMEAFormat = "_MOD__DF__PF__PE__S__PC__O__CM__D__RPN__NM__NMSOD__NMRSP__NMSTA__RSODR_";
				break;
			case "SSC_SysReq":
				$sFMEAFormat = "_DF__PF__PE__S__PC__O__CM__D__RPN__NM__NMSOD__NMRSP__NMSTA__RSODR_";
				break;
			case "SSC_Risk":
##				$sFMEAFormat = "_PF__PE__S__PC__O__CM__D__RPN__NM__NMRSP__NMSTA__RSODR_"; ## shows rpn stuff
				$sFMEAFormat = "_PF__PE__S__PC__O__CM__D__SxO__NM__NMSO__NMRSP__NMSTA__RSOR_";		## shows sxo stuff
				break;
			case "SSC_Mitigation":
				$sFMEAFormat = "_NM__NMSOD__NMRSP__NMSTA_";
				break;
		};
	};

	return $sFMEAFormat;
}
##===========================================================================
## FMEAHeader
##===========================================================================
void SSC_DBObj::FMEAHeader()
{
	$oSection = GetThreadContext( "oCurrentSection" );

	$sSectionRef = "";
	if( $oSection != NULL )
		$sSectionRef = $oSection.Ref;

	if( $oSection )
	{
		$bMOD	=  $oSection.sGetData( "FMEA_Col_Show_Group Name" ) == "1";
		$bDF	=  $oSection.sGetData( "FMEA_Col_Show_Function Name" ) == "1";
		$bPF	=  $oSection.sGetData( "FMEA_Col_Show_Failure Modes" ) == "1";
		$bPE	=  $oSection.sGetData( "FMEA_Col_Show_Effects" ) == "1";
		$bS		=  $oSection.sGetData( "FMEA_Col_Show_Severity" ) == "1";
		$bPC	=  $oSection.sGetData( "FMEA_Col_Show_Causes" ) == "1";
		$bO		=  $oSection.sGetData( "FMEA_Col_Show_Occurrence" ) == "1";
		$bCM	=  $oSection.sGetData( "FMEA_Col_Show_Current Mitigations" ) == "1";
		$bD		=  $oSection.sGetData( "FMEA_Col_Show_Detection" ) == "1";
		$bRPN	=  $oSection.sGetData( "FMEA_Col_Show_RPN" ) == "1";
		$bSxO	=  $oSection.sGetData( "FMEA_Col_Show_SxO" ) == "1";
		$bFF	=  $oSection.sGetData( "FMEA_Col_Show_FF" ) == "1";
		$bNM	=  $oSection.sGetData( "FMEA_Col_Show_New Mitigations" ) == "1";
		$bNMSO	=  $oSection.sGetData( "FMEA_Col_Show_Mitigation Benefit (S,O)" ) == "1";
		$bNMSOD	=  $oSection.sGetData( "FMEA_Col_Show_Mitigation Benefit (S,O,D)" ) == "1";
		$bNMRSP =  $oSection.sGetData( "FMEA_Col_Show_Mitigation Owner" ) == "1";
		$bNMSTA =  $oSection.sGetData( "FMEA_Col_Show_Mitigation Status" ) == "1";
		$bRSOR	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,SxO)" ) == "1";
		$bRSODR	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,D,RPN)" ) == "1";
		$bRSODF	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,D,FF)" ) == "1";
		$bRRPN	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (RPN)" ) == "1";
		$bRSxO	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (SxO)" ) == "1";
		$bRFF	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (FF)" ) == "1";
	}
	else
	{
		$sFMEAFormat = GetRequest( "sFMEAFormat" );
		if( $sFMEAFormat == NULL )
			$sFMEAFormat = sGetFMEAFormat();

		$bShow = $sFMEAFormat ~ "m/_MOD_/";

		$bMOD	= $sFMEAFormat ~ "m/_MOD_/";
		$bDF	= $sFMEAFormat ~ "m/_DF_/";
		$bPF	= $sFMEAFormat ~ "m/_PF_/";
		$bPE	= $sFMEAFormat ~ "m/_PE_/";
		$bS		= $sFMEAFormat ~ "m/_S_/";
		$bPC	= $sFMEAFormat ~ "m/_PC_/";
		$bO		= $sFMEAFormat ~ "m/_O_/";
		$bCM	= $sFMEAFormat ~ "m/_CM_/";
		$bD		= $sFMEAFormat ~ "m/_D_/";
		$bRPN	= $sFMEAFormat ~ "m/_RPN_/";
		$bSxO	= $sFMEAFormat ~ "m/_SxO_/";
		$bFF	= $sFMEAFormat ~ "m/_FF_/";
		$bNM	= $sFMEAFormat ~ "m/_NM_/";
		$bNMSO	= $sFMEAFormat ~ "m/_NMSO_/";
		$bNMSOD	= $sFMEAFormat ~ "m/_NMSOD_/";
		$bNMRSP = $sFMEAFormat ~ "m/_NMRSP_/";
		$bNMSTA = $sFMEAFormat ~ "m/_NMSTA_/";
		$bRSOR	= $sFMEAFormat ~ "m/_RSOR_/";
		$bRSODR	= $sFMEAFormat ~ "m/_RSODR_/";
		$bRSODF	= $sFMEAFormat ~ "m/_RSODF_/";
		$bRRPN	= $sFMEAFormat ~ "m/_RRPN_/";
		$bRSxO	= $sFMEAFormat ~ "m/_RSxO_/";
		$bRFF	= $sFMEAFormat ~ "m/_RFF_/";

	};

	## Locale can be a real pain. We need users to type the width values using . and then
	## we will convert here if necessary for any math calculations.
	$sTest = Format( 1.5, "Fixed" );
	$bConvert = find( $sTest, "," ) > 0;

	$sFMEAFormat = "";
	$rTableWidth = 0;
	$nColCount = 0;
	if ( $bMOD )
	{
		$sFMEAFormat += "_MOD_";
		$sMOD	= $oSection == null ? "Module" : $oSection.sGetData( "FMEA_Col_Title_Group Name" );
		$nMOD	= $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Group Name" );
		$rMOD = $bConvert ? replace( $nMOD, ".", "," ) : $nMOD;
		$rMOD = CReal( $rMOD );
		$rTableWidth += $rMOD;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sMOD", $sMOD );
		SetRequest( "nMOD", $nMOD );
	};
	if ( $bDF )
	{
		$sFMEAFormat += "_DF_";
		$sDF	= $oSection == null ? "Design Function" : $oSection.sGetData( "FMEA_Col_Title_Function Name" );
		$nDF	= $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Function Name" );
		$rDF = $bConvert ? replace( $nDF, ".", "," ) : $nDF;
		$rDF = CReal( $rDF );
		$rTableWidth += $rDF;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sDF", $sDF );
		SetRequest( "nDF", $nDF );
	};
	if ( $bPF )
	{
		$sFMEAFormat += "_PF_";
		$sPF	= $oSection == null ? "Potential Failure Mode(s)" : $oSection.sGetData( "FMEA_Col_Title_Failure Modes" );
		$nPF	= $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Failure Modes" );
		$rPF = $bConvert ? replace( $nPF, ".", "," ) : $nPF;
		$rPF = CReal( $rPF );
		$rTableWidth += $rPF;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sPF", $sPF );
		SetRequest( "nPF", $nPF );
	};
	if ( $bPE )
	{
		$sFMEAFormat += "_PE_";
		$sPE	= $oSection == null ? "Potential Effect(s) of Failure" : $oSection.sGetData( "FMEA_Col_Title_Effects" );
		$nPE	= $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Effects" );
		$rPE = $bConvert ? replace( $nPE, ".", "," ) : $nPE;
		$rPE = CReal( $rPE );
		$rTableWidth += $rPE;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sPE", $sPE );
		SetRequest( "nPE", $nPE );
	};
	if ( $bS )
	{
		$sFMEAFormat += "_S_";
		$sS		= $oSection == null ? "S<br>E<br>V" : $oSection.sGetData( "FMEA_Col_Title_Severity" );
		$nS		= ".25";
		$rS = $bConvert ? replace( $nS, ".", "," ) : $nS;
		$rS = CReal( $rS );
		$rTableWidth += $rS;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sS", $sS );
		SetRequest( "nS", $nS );
	};
	if ( $bPC )
	{
		$sFMEAFormat += "_PC_";
		$sPC	= $oSection == null ? "Potential Cause(s) of Failure" : $oSection.sGetData( "FMEA_Col_Title_Causes" );
		$nPC	= $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Causes" );
		$rPC = $bConvert ? replace( $nPC, ".", "," ) : $nPC;
		$rPC = CReal( $rPC );
		$rTableWidth += $rPC;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sPC", $sPC );
		SetRequest( "nPC", $nPC );
	};
	if ( $bO )
	{
		$sFMEAFormat += "_O_";
		$sO		= $oSection == null ? "O<br>C<br>C" : $oSection.sGetData( "FMEA_Col_Title_Occurrence" );
		$nO		= ".25";
		$rO = $bConvert ? replace( $nO, ".", "," ) : $nO;
		$rO = CReal( $rO );
		$rTableWidth += $rO;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sO", $sO );
		SetRequest( "nO", $nO );
	};
	if ( $bCM )
	{
		$sFMEAFormat += "_CM_";
		$sCM	= $oSection == null ? "Current Detection / Prevention Methods" : $oSection.sGetData( "FMEA_Col_Title_Current Mitigations" );
		$nCM	= $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Current Mitigations" );
		$rCM = $bConvert ? replace( $nCM, ".", "," ) : $nCM;
		$rCM = CReal( $rCM );
		$rTableWidth += $rCM;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sCM", $sCM );
		SetRequest( "nCM", $nCM );
	};
	if ( $bD )
	{
		$sFMEAFormat += "_D_";
		$sD		= $oSection == null ? "D<br>E<br>T" : $oSection.sGetData( "FMEA_Col_Title_Detection" );
		$nD		= ".25";
		$rD = $bConvert ? replace( $nD, ".", "," ) : $nD;
		$rD = CReal( $rD );
		$rTableWidth += $rD;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sD", $sD );
		SetRequest( "nD", $nD );
	};
	if ( $bRPN )
	{
		$sFMEAFormat += "_RPN_";
		$sRPN	= $oSection == null ? "R<br>P<br>N" : $oSection.sGetData( "FMEA_Col_Title_RPN" );
		$nRPN	= ".4";
		$rRPN = $bConvert ? replace( $nRPN, ".", "," ) : $nRPN;
		$rRPN = CReal( $rRPN );
		$rTableWidth += $rRPN;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sRPN", $sRPN );
		SetRequest( "nRPN", $nRPN );
	};
	if ( $bSxO )
	{
		$sFMEAFormat += "_SxO_";
		$sSxO	= $oSection == null ? "S<br>x<br>O" : $oSection.sGetData( "FMEA_Col_Title_SxO" );
		$nSxO	= ".4";
		$rSxO = $bConvert ? replace( $nSxO, ".", "," ) : $nSxO;
		$rSxO = CReal( $rSxO );
		$rTableWidth += $rSxO;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sSxO", $sSxO );
		SetRequest( "nSxO", $nSxO );
	};
	if ( $bFF )
	{
		$sFMEAFormat += "_FF_";
		$sFF	= $oSection == null ? "Failure<br>Freq." : $oSection.sGetData( "FMEA_Col_Title_FF" );
		$nFF	= ".50";
		$rFF	= $bConvert ? replace( $nFF, ".", "," ) : $nFF;
		$rFF	= CReal( $rFF );
		$rTableWidth += $rFF;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sFF", $sFF );
		SetRequest( "nFF", $nFF );
	};
	if ( $bNM )
	{
		$sFMEAFormat += "_NM_";
		$sNM	= $oSection == null ? "Risk Control Measure(s)" : $oSection.sGetData( "FMEA_Col_Title_New Mitigations" );
		$nNM	= $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_New Mitigations" );
		$rNM = $bConvert ? replace( $nNM, ".", "," ) : $nNM;
		$rNM = CReal( $rNM );
		$rTableWidth += $rNM;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sNM", $sNM );
		SetRequest( "nNM", $nNM );
	};
	if ( $bNMSO )
	{
		$sFMEAFormat += "_NMSO_";
		$sNMSO	= $oSection == null ? "Benefit" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Benefit (S,O)" );
		$nNMSO	= ".5";
		$rNMSO = $bConvert ? replace( $nNMSO, ".", "," ) : $nNMSO;
		$rNMSO = CReal( $rNMSO );
		$rTableWidth += $rNMSO;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sNMSO", $sNMSO );
		SetRequest( "nNMSO", $nNMSO );
	};
	if ( $bNMSOD )
	{
		$sFMEAFormat += "_NMSOD_";
		$sNMSOD	= $oSection == null ? "Benefit" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Benefit (S,O,D)" );
		$nNMSOD	= ".75";
		$rNMSOD = $bConvert ? replace( $nNMSOD, ".", "," ) : $nNMSOD;
		$rNMSOD = CReal( $rNMSOD );
		$rTableWidth += $rNMSOD;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sNMSOD", $sNMSOD );
		SetRequest( "nNMSOD", $nNMSOD );
	};
	if ( $bNMRSP )
	{
		$sFMEAFormat += "_NMRSP_";
		$sNMRSP = $oSection == null ? "Responsibility" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Owner" );
		$nNMRSP = $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Mitigation Owner" );
		$rNMRSP = $bConvert ? replace( $nNMRSP, ".", "," ) : $nNMRSP;
		$rNMRSP = CReal( $rNMRSP );
		$rTableWidth += $rNMRSP;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sNMRSP", $sNMRSP );
		SetRequest( "nNMRSP", $nNMRSP );
	};
	if ( $bNMSTA )
	{
		$sFMEAFormat += "_NMSTA_";
		$sNMSTA = $oSection == null ? "Status" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Status" );
		$nNMSTA = $oSection == null ? "1" : $oSection.sGetData( "FMEA_Col_Width_Mitigation Status" );
		$rNMSTA = $bConvert ? replace( $nNMSTA, ".", "," ) : $nNMSTA;
		$rNMSTA = CReal( $rNMSTA );
		$rTableWidth += $rNMSTA;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sNMSTA", $sNMSTA );
		SetRequest( "nNMSTA", $nNMSTA );
	};
	if ( $bRSOR )
	{
		$sFMEAFormat += "_RSOR_";
		$sRSOR	= $oSection == null ? "Residual Risk" : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (S,O,SxO)" );
		$nRSOR	= ".90";
		$rRSOR = $bConvert ? replace( $nRSOR, ".", "," ) : $nRSOR;
		$rRSOR = CReal( $rRSOR );
		$rTableWidth += $rRSOR;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sRSOR", $sRSOR );
		SetRequest( "nRSOR", $nRSOR );
	};
	if ( $bRSODR )
	{
		$sFMEAFormat += "_RSODR_";
		$sRSODR	= $oSection == null ? "Residual Risk" : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (S,O,D,RPN)" );
		$nRSODR	= "1.15";
		$rRSODR = $bConvert ? replace( $nRSODR, ".", "," ) : $nRSODR;
		$rRSODR = CReal( $rRSODR );
		$rTableWidth += $rRSODR;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sRSODR", $sRSODR );
		SetRequest( "nRSODR", $nRSODR );
	};
	if ( $bRSODF )
	{
		$sFMEAFormat += "_RSODF_";
		$sRSODF	= $oSection == null ? "Residual Risk" : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (S,O,D,FF)" );
		$nRSODF	= "1.25";
		$rRSODF	= $bConvert ? replace( $nRSODF, ".", "," ) : $nRSODF;
		$rRSODF	= CReal( $rRSODF );
		$rTableWidth += $rRSODF;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sRSODF", $sRSODF );
		SetRequest( "nRSODF", $nRSODF );
	};
	if ( $bRRPN )
	{
		$sFMEAFormat += "_RRPN_";
		$sRRPN	= $oSection == null ? "Res." : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (RPN)" );
		$nRRPN	= ".4";
		$rRRPN = $bConvert ? replace( $nRRPN, ".", "," ) : $nRRPN;
		$rRRPN = CReal( $rRRPN );
		$rTableWidth += $rRRPN;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sRRPN", $sRRPN );
		SetRequest( "nRRPN", $nRRPN );
	};
	if ( $bRSxO )
	{
		$sFMEAFormat += "_RSxO_";
		$sRSxO	= $oSection == null ? "Res." : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (SxO)" );
		$nRSxO	= ".4";
		$rRSxO = $bConvert ? replace( $nRSxO, ".", "," ) : $nRSxO;
		$rRSxO = CReal( $rRSxO );
		$rTableWidth += $rRSxO;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sRSxO", $sRSxO );
		SetRequest( "nRSxO", $nRSxO );
	};
	if ( $bRFF )
	{
		$sFMEAFormat += "_RFF_";
		$sRFF	= $oSection == null ? "Res." : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (FF)" );
		$nRFF	= ".5";
		$rRFF = $bConvert ? replace( $nRFF, ".", "," ) : $nRFF;
		$rRFF = CReal( $rRFF );
		$rTableWidth += $rRFF;
		$nColCount += 1;
		## cache for later!
		SetRequest( "sRFF", $sRFF );
		SetRequest( "nRFF", $nRFF );
	};
	$nTableWidth = CStr( $rTableWidth );

	$nTableWidth = $bConvert ? replace( $nTableWidth, ",", "." ) : $nTableWidth;

	SetRequest( "sFMEAFormat", $sFMEAFormat );

	$bFloatingHeaders = false;
	$sFloatingHeaders = $oSection == null ? "false" : $oSection.sGetDataValue( "sFloatingHeaders" );
	if( $sFloatingHeaders == "true" )
		$bFloatingHeaders = true;

	#inline
	<table cellpadding=0 cellspacing=0 style="empty-cells:show;table-layout:fixed;width:<%$nTableWidth%>in;text-align:left;vertical-align:top;border:1px solid black;border-collapse:collapse;margin-top:-1px" class='FMEA_Table' <%$bFloatingHeaders? "bFloatingHeaders=true":""%> >
		<thead>
			<tr style="height:.70in;background-color:#D3D3D3;font-weight:bold;text-align:center;">
				#endinline;
				if ( $sFMEAFormat ~ "m/_MOD_/" )
				{
					#inline
					<th style="width:<%$nMOD%>in;border:1px solid black;font-weight:normal;"><%$sMOD%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_DF_/" )
				{
					#inline
					<th style="width:<%$nDF%>in;border:1px solid black;font-weight:normal;"><%$sDF%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PF_/" )
				{
					#inline
					<th style="width:<%$nPF%>in;border:1px solid black;font-weight:normal;"><%$sPF%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PE_/" )
				{
					#inline
					<th style="width:<%$nPE%>in;border:1px solid black;font-weight:normal;"><%$sPE%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_S_/" )
				{
					#inline
					<th style="width:<%$nS%>in;border:1px solid black;font-weight:normal;"><%$sS%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PC_/" )
				{
					#inline
					<th style="width:<%$nPC%>in;border:1px solid black;font-weight:normal;"><%$sPC%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_O_/" )
				{
					#inline
					<th style="width:<%$nO%>in;border:1px solid black;font-weight:normal;"><%$sO%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_CM_/" )
				{
					#inline
					<th style="width:<%$nCM%>in;border:1px solid black;font-weight:normal;"><%$sCM%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_D_/" )
				{
					#inline
					<th style="width:<%$nD%>in;border:1px solid black;font-weight:normal;"><%$sD%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RPN_/" )
				{
					#inline
					<th style="width:<%$nRPN%>in;border:1px solid black;font-weight:normal;"><%$sRPN%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_SxO_/" )
				{
					#inline
					<th style="width:<%$nSxO%>in;border:1px solid black;font-weight:normal;"><%$sSxO%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_FF_/" )
				{
					#inline
					<th style="width:<%$nFF%>in;border:1px solid black;font-weight:normal;"><%$sFF%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NM_/" )
				{
					#inline
					<th style="width:<%$nNM%>in;border:1px solid black;font-weight:normal;"><%$sNM%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSOD_/" )
				{
					#inline
					<th style="width:<%$nNMSOD%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<colgroup>
								<col style="width:.25in;">
								<col style="width:.25in;border-left:1px solid black;">
								<col style="width:.25in;border-left:1px solid black;">
							</colgroup>
							<tr>
								<td colspan=3 style="border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.08in;" ><%$sNMSOD%></td>
							</tr>
							<tr>
								<td style="height:.2in;text-align:center;">S</td>
								<td style="height:.2in;text-align:center;border-left:1px solid black;">O</td>
								<td style="height:.2in;text-align:center;border-left:1px solid black;">D</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSO_/" )
				{
					#inline
					<th style="width:<%$nNMSO%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<colgroup>
								<col style="width:.25in;">
								<col style="width:.25in;border-left:1px solid black;">
							</colgroup>
							<tr>
								<td colspan=2 style="border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.08in;" ><%$sNMSO%></td>
							</tr>
							<tr>
								<td style="height:.2in;text-align:center;">S</td>
								<td style="height:.2in;text-align:center;border-left:1px solid black;">O</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMRSP_/" )
				{
					#inline
					<th style="width:<%$nNMRSP%>in;border:1px solid black;font-weight:normal;"><%$sNMRSP%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSTA_/" )
				{
					#inline
					<th style="width:<%$nNMSTA%>in;border:1px solid black;font-weight:normal;"><%$sNMSTA%></th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODR_/" )
				{
					#inline
					<th style="width:<%$nRSODR%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<colgroup>
								<col style="width:.25in;">
								<col style="width:.25in;border-left:1px solid black;">
								<col style="width:.25in;border-left:1px solid black;">
								<col style="width:.4in;border-left:1px solid black;">
							</colgroup>
							<tr>
								<td colspan=4 style="border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSODR%></td>
							</tr>
							<tr>
								<td style="height:.4in;text-align:center;">S<br>E<br>V</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;">O<br>C<br>C</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;">D<br>E<br>T</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;">R<br>P<br>N</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSOR_/" )
				{
					#inline
					<th style="width:<%$nRSOR%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<colgroup>
								<col style="width:.25in;">
								<col style="width:.25in;border-left:1px solid black;">
								<col style="width:.4in;border-left:1px solid black;">
							</colgroup>
							<tr>
								<td colspan=3 style="border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSOR%></td>
							</tr>
							<tr>
								<td style="height:.4in;text-align:center;text-align:center;">S<br>E<br>V</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;text-align:center;">O<br>C<br>C</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;text-align:center;">S<br>x<br>O</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODF_/" )
				{
					#inline
					<th style="width:<%$nRSODF%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<colgroup>
								<col style="width:.25in;">
								<col style="width:.25in;border-left:1px solid black;">
								<col style="width:.25in;border-left:1px solid black;">
								<col style="width:.50in;border-left:1px solid black;">
							</colgroup>
							<tr>
								<td colspan=4 style="border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSODF%></td>
							</tr>
							<tr>
								<td style="height:.4in;text-align:center;">S<br>E<br>V</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;">O<br>C<br>C</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;">D<br>E<br>T</td>
								<td style="height:.4in;text-align:center;border-left:1px solid black;">Failure<br>Freq.</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RRPN_/" )
				{
					#inline
					<th style="width:<%$nRRPN%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<tr>
								<td style="width:<%$nRRPN%>in;border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:4px;" ><%$sRRPN%></td>
							</tr>
							<tr>
								<td style="height:.4in;border:2px;text-align:center;">R<br>P<br>N</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSxO_/" )
				{
					#inline
					<th style="width:<%$nRSxO%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<tr>
								<td style="width:<%$nRSxO%>in;border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSxO%></td>
							</tr>
							<tr>
								<td style="height:.4in;text-align:center;">S<br>x<br>O</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RFF_/" )
				{
					#inline
					<th style="width:<%$nRFF%>in;border:1px solid black;border-right:1px solid black;text-align:left;vertical-align:bottom;font-weight:normal;">
						<table cellpadding=0 cellspacing=0 style="width:inherit;table-layout:fixed;border-collapse:collapse;" >
							<tr>
								<td style="width:<%$nRFF%>in;border-bottom:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRFF%></td>
							</tr>
							<tr>
								<td style="height:.4in;text-align:center;">Failure<br>Freq.</td>
							</tr>
						</table>
					</th>
					#endinline;
				};
			#inline
			</tr>
			</thead>
			#endinline;
}
##===========================================================================
## FMEAHeader_Word_Export
##===========================================================================
void SSC_DBObj::FMEAHeader_Word_Export()
{
	$oSection = GetThreadContext( "oCurrentSection" );

	$sSectionRef = "";
	if( $oSection != NULL )
		$sSectionRef = $oSection.Ref;

	if( $oSection )
	{
		$bMOD	=  $oSection.sGetData( "FMEA_Col_Show_Group Name" ) == "1";
		$bDF	=  $oSection.sGetData( "FMEA_Col_Show_Function Name" ) == "1";
		$bPF	=  $oSection.sGetData( "FMEA_Col_Show_Failure Modes" ) == "1";
		$bPE	=  $oSection.sGetData( "FMEA_Col_Show_Effects" ) == "1";
		$bS		=  $oSection.sGetData( "FMEA_Col_Show_Severity" ) == "1";
		$bPC	=  $oSection.sGetData( "FMEA_Col_Show_Causes" ) == "1";
		$bO		=  $oSection.sGetData( "FMEA_Col_Show_Occurrence" ) == "1";
		$bCM	=  $oSection.sGetData( "FMEA_Col_Show_Current Mitigations" ) == "1";
		$bD		=  $oSection.sGetData( "FMEA_Col_Show_Detection" ) == "1";
		$bRPN	=  $oSection.sGetData( "FMEA_Col_Show_RPN" ) == "1";
		$bSxO	=  $oSection.sGetData( "FMEA_Col_Show_SxO" ) == "1";
		$bFF	=  $oSection.sGetData( "FMEA_Col_Show_FF" ) == "1";
		$bNM	=  $oSection.sGetData( "FMEA_Col_Show_New Mitigations" ) == "1";
		$bNMSO	=  $oSection.sGetData( "FMEA_Col_Show_Mitigation Benefit (S,O)" ) == "1";
		$bNMSOD	=  $oSection.sGetData( "FMEA_Col_Show_Mitigation Benefit (S,O,D)" ) == "1";
		$bNMRSP =  $oSection.sGetData( "FMEA_Col_Show_Mitigation Owner" ) == "1";
		$bNMSTA =  $oSection.sGetData( "FMEA_Col_Show_Mitigation Status" ) == "1";
		$bRSOR	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,SxO)" ) == "1";
		$bRSODR	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,D,RPN)" ) == "1";
		$bRSODF	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (S,O,D,FF)" ) == "1";
		$bRRPN	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (RPN)" ) == "1";
		$bRSxO	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (SxO)" ) == "1";
		$bRFF	=  $oSection.sGetData( "FMEA_Col_Show_Residual Risk (FF)" ) == "1";
	}
	else
	{
		$sFMEAFormat = GetRequest( "sFMEAFormat" );
		if( $sFMEAFormat == NULL )
			$sFMEAFormat = sGetFMEAFormat();

		$bShow = $sFMEAFormat ~ "m/_MOD_/";

		$bMOD	= $sFMEAFormat ~ "m/_MOD_/";
		$bDF	= $sFMEAFormat ~ "m/_DF_/";
		$bPF	= $sFMEAFormat ~ "m/_PF_/";
		$bPE	= $sFMEAFormat ~ "m/_PE_/";
		$bS		= $sFMEAFormat ~ "m/_S_/";
		$bPC	= $sFMEAFormat ~ "m/_PC_/";
		$bO		= $sFMEAFormat ~ "m/_O_/";
		$bCM	= $sFMEAFormat ~ "m/_CM_/";
		$bD		= $sFMEAFormat ~ "m/_D_/";
		$bRPN	= $sFMEAFormat ~ "m/_RPN_/";
		$bSxO	= $sFMEAFormat ~ "m/_SxO_/";
		$bFF	= $sFMEAFormat ~ "m/_FF_/";
		$bNM	= $sFMEAFormat ~ "m/_NM_/";
		$bNMSO	= $sFMEAFormat ~ "m/_NMSO_/";
		$bNMSOD	= $sFMEAFormat ~ "m/_NMSOD_/";
		$bNMRSP = $sFMEAFormat ~ "m/_NMRSP_/";
		$bNMSTA = $sFMEAFormat ~ "m/_NMSTA_/";
		$bRSOR	= $sFMEAFormat ~ "m/_RSOR_/";
		$bRSODR	= $sFMEAFormat ~ "m/_RSODR_/";
		$bRSODF	= $sFMEAFormat ~ "m/_RSODF_/";
		$bRRPN	= $sFMEAFormat ~ "m/_RRPN_/";
		$bRSxO	= $sFMEAFormat ~ "m/_RSxO_/";
		$bRFF	= $sFMEAFormat ~ "m/_RFF_/";

	};



	$sFMEAFormat = "";
	$nTableWidth = 0;
	$nColCount = 0;
	if ( $bMOD )
	{
		$sFMEAFormat += "_MOD_";
		$sMOD	= $oSection == null ? "Module" : $oSection.sGetData( "FMEA_Col_Title_Group Name" );
		$nMOD	= $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Group Name" ) );
		$nTableWidth += $nMOD;
		$nColCount += 1;
	};
	if ( $bDF )
	{
		$sFMEAFormat += "_DF_";
		$sDF	= $oSection == null ? "Design Function" : $oSection.sGetData( "FMEA_Col_Title_Function Name" );
		$nDF	= $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Function Name" ) );
		$nTableWidth += $nDF;
		$nColCount += 1;
	};
	if ( $bPF )
	{
		$sFMEAFormat += "_PF_";
		$sPF	= $oSection == null ? "Potential Failure Mode(s)" : $oSection.sGetData( "FMEA_Col_Title_Failure Modes" );
		$nPF	= $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Failure Modes" ) );
		$nTableWidth += $nPF;
		$nColCount += 1;
	};
	if ( $bPE )
	{
		$sFMEAFormat += "_PE_";
		$sPE	= $oSection == null ? "Potential Effect(s) of Failure" : $oSection.sGetData( "FMEA_Col_Title_Effects" );
		$nPE	= $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Effects" ) );
		$nTableWidth += $nPE;
		$nColCount += 1;
	};
	if ( $bS )
	{
		$sFMEAFormat += "_S_";
		$sS		= $oSection == null ? "S<br>E<br>V" : $oSection.sGetData( "FMEA_Col_Title_Severity" );
		$nS		= .25;
		$nTableWidth += $nS;
		$nColCount += 1;
	};
	if ( $bPC )
	{
		$sFMEAFormat += "_PC_";
		$sPC	= $oSection == null ? "Potential Cause(s) of Failure" : $oSection.sGetData( "FMEA_Col_Title_Causes" );
		$nPC	= $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Causes" ) );
		$nTableWidth += $nPC;
		$nColCount += 1;
	};
	if ( $bO )
	{
		$sFMEAFormat += "_O_";
		$sO		= $oSection == null ? "O<br>C<br>C" : $oSection.sGetData( "FMEA_Col_Title_Occurrence" );
		$nO		= .25;
		$nTableWidth += $nO;
		$nColCount += 1;
	};
	if ( $bCM )
	{
		$sFMEAFormat += "_CM_";
		$sCM	= $oSection == null ? "Current Detection / Prevention Methods" : $oSection.sGetData( "FMEA_Col_Title_Current Mitigations" );
		$nCM	= $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Current Mitigations" ) );
		$nTableWidth += $nCM;
		$nColCount += 1;
	};
	if ( $bD )
	{
		$sFMEAFormat += "_D_";
		$sD		= $oSection == null ? "D<br>E<br>T" : $oSection.sGetData( "FMEA_Col_Title_Detection" );
		$nD		= .25;
		$nTableWidth += $nD;
		$nColCount += 1;
	};
	if ( $bRPN )
	{
		$sFMEAFormat += "_RPN_";
		$sRPN	= $oSection == null ? "R<br>P<br>N" : $oSection.sGetData( "FMEA_Col_Title_RPN" );
		$nRPN	= .4;
		$nTableWidth += $nRPN;
		$nColCount += 1;
	};
	if ( $bSxO )
	{
		$sFMEAFormat += "_SxO_";
		$sSxO	= $oSection == null ? "S<br>x<br>O" : $oSection.sGetData( "FMEA_Col_Title_SxO" );
		$nSxO	= .4;
		$nTableWidth += $nSxO;
		$nColCount += 1;
	};
	if ( $bFF )
	{
		$sFMEAFormat += "_FF_";
		$sFF	= $oSection == null ? "Failure<br>Freq." : $oSection.sGetData( "FMEA_Col_Title_FF" );
		$nFF	= .5;
		$nTableWidth += $nFF;
		$nColCount += 1;
	};
	if ( $bNM )
	{
		$sFMEAFormat += "_NM_";
		$sNM	= $oSection == null ? "Risk Control Measure(s)" : $oSection.sGetData( "FMEA_Col_Title_New Mitigations" );
		$nNM	= $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_New Mitigations" ) );
		$nTableWidth += $nNM;
		$nColCount += 1;
	};
	if ( $bNMSO )
	{
		$sFMEAFormat += "_NMSO_";
		$sNMSO	= $oSection == null ? "Benefit" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Benefit (S,O)" );
		$nNMSO	= .5;
		$nTableWidth += $nNMSO;
		$nColCount += 1;
	};
	if ( $bNMSOD )
	{
		$sFMEAFormat += "_NMSOD_";
		$sNMSOD	= $oSection == null ? "Benefit" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Benefit (S,O,D)" );
		$nNMSOD	= .75;
		$nTableWidth += $sNMSOD;
		$nColCount += 1;
	};
	if ( $bNMRSP )
	{
		$sFMEAFormat += "_NMRSP_";
		$sNMRSP = $oSection == null ? "Responsibility" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Owner" );
		$nNMRSP = $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Mitigation Owner" ) );
		$nTableWidth += $nNMRSP;
		$nColCount += 1;
	};
	if ( $bNMSTA )
	{
		$sFMEAFormat += "_NMSTA_";
		$sNMSTA = $oSection == null ? "Status" : $oSection.sGetData( "FMEA_Col_Title_Mitigation Status" );
		$nNMSTA = $oSection == null ? 1 : CReal( $oSection.sGetData( "FMEA_Col_Width_Mitigation Status" ) );
		$nTableWidth += $nNMSTA;
		$nColCount += 1;
	};
	if ( $bRSOR )
	{
		$sFMEAFormat += "_RSOR_";
		$sRSOR	= $oSection == null ? "Residual Risk" : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (S,O,SxO)" );
		$nRSOR	= .90;
		$nTableWidth += $nRSOR;
		$nColCount += 1;
	};
	if ( $bRSODR )
	{
		$sFMEAFormat += "_RSODR_";
		$sRSODR	= $oSection == null ? "Residual Risk" : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (S,O,D,RPN)" );
		$nRSODR	= 1.15;
		$nTableWidth += $nRSODR;
		$nColCount += 1;
	};
	if ( $bRSODF )
	{
		$sFMEAFormat += "_RSODF_";
		$sRSODF	= $oSection == null ? "Residual Risk" : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (S,O,D,FF)" );
		$nRSODF	= 1.25;
		$nTableWidth += $nRSODF;
		$nColCount += 1;
	};
	if ( $bRRPN )
	{
		$sFMEAFormat += "_RRPN_";
		$sRRPN	= $oSection == null ? "Res." : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (RPN)" );
		$nRRPN	= .4;
		$nTableWidth += $nRRPN;
		$nColCount += 1;
	};
	if ( $bRSxO )
	{
		$sFMEAFormat += "_RSxO_";
		$sRSxO	= $oSection == null ? "Res." : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (SxO)" );
		$nRSxO	= .4;
		$nTableWidth += $nRSxO;
		$nColCount += 1;
	};
	if ( $bRFF )
	{
		$sFMEAFormat += "_RFF_";
		$sRFF	= $oSection == null ? "Res." : $oSection.sGetData( "FMEA_Col_Title_Residual Risk (FF)" );
		$nRFF	= .5;
		$nTableWidth += $nRFF;
		$nColCount += 1;
	};
	SetRequest( "sFMEAFormat", $sFMEAFormat );

	$nRowspan = 1;
	if( ( $sFMEAFormat ~ "m/_NMSOD_/" ) OR ( $sFMEAFormat ~ "m/_NMSO_/" ) OR ( $sFMEAFormat ~ "m/_RSODR_/" ) OR ( $sFMEAFormat ~ "m/_RSODF_/" ) OR
				( $sFMEAFormat ~ "m/_RSOR_/" ) OR ( $sFMEAFormat ~ "m/_RRPN_/" ) OR ( $sFMEAFormat ~ "m/_RSxO_/" ) OR ( $sFMEAFormat ~ "m/_RFF_/" ) )
		$nRowspan = 2;

	#inline
	<table cellpadding=0 cellspacing=0 style="empty-cells:show;table-layout:fixed;width:<%$nTableWidth%>in;text-align:left;border:1px solid black;border-collapse:collapse;margin-top:-1px">
			<colgroup>
	#endinline;
			if ( $sFMEAFormat ~ "m/_MOD_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_DF_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PF_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PE_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_S_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PC_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_O_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_CM_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_D_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RPN_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_SxO_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_FF_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NM_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSOD_/" )
				{
					#inline
					<col>
					<col>
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSO_/" )
				{
					#inline
					<col>
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMRSP_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSTA_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODR_/" )
				{
					#inline
					<col>
					<col>
					<col>
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODF_/" )
				{
					#inline
					<col>
					<col>
					<col>
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSOR_/" )
				{
					#inline
					<col>
					<col>
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RRPN_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSxO_/" )
				{
					#inline
					<col>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RFF_/" )
				{
					#inline
					<col>
					#endinline;
				};
			#inline
			</colgroup>
			<thead>
			<tr style="height:.4in;background-color:#D3D3D3;font-weight:bold;text-align:center;">
				#endinline;
				if ( $sFMEAFormat ~ "m/_MOD_/" )
				{
					#inline
					<td style="width:<%$nMOD%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sMOD%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_DF_/" )
				{
					#inline
					<td style="width:<%$nDF%>in;border:1px solid black;"rowspan=<%$nRowspan%> ><%$sDF%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PF_/" )
				{
					#inline
					<td style="width:<%$nPF%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sPF%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PE_/" )
				{
					#inline
					<td style="width:<%$nPE%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sPE%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_S_/" )
				{
					#inline
					<td style="width:<%$nS%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sS%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_PC_/" )
				{
					#inline
					<td style="width:<%$nPC%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sPC%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_O_/" )
				{
					#inline
					<td style="width:<%$nO%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sO%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_CM_/" )
				{
					#inline
					<td style="width:<%$nCM%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sCM%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_D_/" )
				{
					#inline
					<td style="width:<%$nD%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sD%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RPN_/" )
				{
					#inline
					<td style="width:<%$nRPN%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sRPN%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_SxO_/" )
				{
					#inline
					<td style="width:<%$nSxO%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sSxO%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_FF_/" )
				{
					#inline
					<td style="width:<%$nFF%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sFF%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NM_/" )
				{
					#inline
					<td style="width:<%$nNM%>in;border:1px solid black;" rowspan=<%$nRowspan%> ><%$sNM%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSOD_/" )
				{
					#inline
					<td colspan=3 style="width:<%$nNMSOD%>in;text-align:center;vertical-align:bottom;padding-bottom:.08in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;" ><%$sNMSOD%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSO_/" )
				{
					#inline
					<td colspan=2 style="width:<%$nNMSO%>in;text-align:center;vertical-align:bottom;padding-bottom:.08in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;" ><%$sNMSO%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMRSP_/" )
				{
					#inline
					<td style="width:<%$nNMRSP%>in;border:1px solid black;"  rowspan=2><%$sNMRSP%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSTA_/" )
				{
					#inline
					<td style="width:<%$nNMSTA%>in;border:1px solid black;"  rowspan=2><%$sNMSTA%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODR_/" )
				{
					#inline
					<td colspan=4 style="width:<%$nRSODR%>in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSODR%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODF_/" )
				{
					#inline
					<td colspan=4 style="width:<%$nRSODF%>in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSODF%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSOR_/" )
				{
					#inline
					<td colspan=3 style="width:<%$nRSOR%>in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSOR%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RRPN_/" )
				{
					#inline
					<td style="width:.4in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRRPN%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSxO_/" )
				{
					#inline
					<td style="width:.4in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRSxO%></td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RFF_/" )
				{
					#inline
					<td style="width:.5in;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;text-align:center;vertical-align:bottom;padding-bottom:.04in;" ><%$sRFF%></td>
					#endinline;
				};
			#inline
			</tr>
			#endinline;

			if( ( $sFMEAFormat ~ "m/_NMSOD_/" ) OR ( $sFMEAFormat ~ "m/_NMSO_/" ) OR ( $sFMEAFormat ~ "m/_RSODR_/" ) OR ( $sFMEAFormat ~ "m/_RSODF_/" ) OR
				( $sFMEAFormat ~ "m/_RSOR_/" ) OR ( $sFMEAFormat ~ "m/_RRPN_/" ) OR ( $sFMEAFormat ~ "m/_RSxO_/" ) OR ( $sFMEAFormat ~ "m/_RFF_/" ) )
			{
				#inline
				<tr style="height:.4in;background-color:#D3D3D3;font-weight:bold;">
				#endinline;
				if ( $sFMEAFormat ~ "m/_NMSOD_/" )
				{
					#inline
					<td style="width:.25in;height:.2in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">S</td>
					<td style="width:.25in;height:.2in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">O</td>
					<td style="width:.25in;height:.2in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">D</td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_NMSO_/" )
				{
					#inline
					<td style="width:.25in;height:.2in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">S</td>
					<td style="width:.25in;height:.2in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">O</td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODR_/" )
				{
					#inline
					<td style="width:.25in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">S<br>E<br>V</td>
					<td style="width:.25in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">O<br>C<br>C</td>
					<td style="width:.25in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">D<br>E<br>T</td>
					<td style="width:.35in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">R<br>P<br>N</td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSODF_/" )
				{
					#inline
					<td style="width:.25in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">S<br>E<br>V</td>
					<td style="width:.25in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">O<br>C<br>C</td>
					<td style="width:.25in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">D<br>E<br>T</td>
					<td style="width:.50in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">Failure<br>Freq.</td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSOR_/" )
				{
					#inline
					<td style="width:.25in;height:.4in;text-align:center;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">S<br>E<br>V</td>
					<td style="width:.25in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">O<br>C<br>C</td>
					<td style="width:.35in;height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">S<br>x<br>O</td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RRPN_/" )
				{
					#inline
					<td style="height:.4in;border:2px;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">R<br>P<br>N</td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RSxO_/" )
				{
					#inline
					<td style="height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">S<br>x<br>O</td>
					#endinline;
				};
				if ( $sFMEAFormat ~ "m/_RFF_/" )
				{
					#inline
					<td style="height:.4in;text-align:center;border-bottom:1px solid black;border-left:1px solid black;border-right:1px solid black;">Failure<br>Freq.</td>
					#endinline;
				};
				#inline
				</tr>
				#endinline;
			};
			#inline
			</thead>
			#endinline;
}

##===========================================================================
## lsGetFormDef_Builtin
##===========================================================================
variant SSC_DBObj::lsGetSubItemChoices( $sConsumer )
{
	## All DB objects can show Attachments
	$lsItems = CList();
	$sItem = "Attachments"  + eoi + "Attactments:Mine";
	$lsItems << $sItem;
	return $lsItems;
}

##===========================================================================
## sGetSubtype
##===========================================================================
variant SSC_DBObj::sGetSubtype()
{
	return Item( sGetData( "sType" ), 1, 1, EOI );
}

##===========================================================================
## AddNotebookEntry
##===========================================================================
void SSC_DBObj::AddNotebookEntry( $sSection, $sText )
{
	try
	{
		$sSectionNames = sGetData("sNotebookSections");

		if ( $sSectionNames ~ CStr( "m/" + $sSection + "/" ) == false )
		{
			SetRequest("sSetDataCommand","Add");
			$sJnk = $this.SetData("sNotebookSection", $sSection );
		};

		$oNewNote = SSC_Note::oCreate_s($this, NULLOBJECT, "sSection=" + URLEncode($sSection) + "&sText=" + URLEncode( $sText ));
		$sJnk = $oNewNote.SetData( "sAuthor", $me.oPerson.sGetName() );
		$sJnk = $oNewNote.SetData( "dtCreated", Now( ) );
	}
	catch( $sErr )
	{
		$Jnk=1;
	};
}

##===========================================================================
## lsGetAllowedAssociations_Builtin
##===========================================================================
variant SSC_DBObj::lsGetAllowedAssociations_Builtin()
{
	$lsRetval = CList();

	$lsRetval << "Action Items|Child|ActionItems";
	$lsRetval << "Attachments in current project|Child|Attachments";

	return $lsRetval;
}
##===========================================================================
## bIsEditable
##===========================================================================
variant SSC_DBObj::bIsEditable()
{
	## when we have an export flag, we are exporting
	## always return false if exporting, also prevents accessing the user object
	$sExport = GetRequest( "sExport" );
	$bExporting = ( $sExport != NULL );
	if ( $bExporting )
		return false;

	## read only bypass flag
	$bForceReadOnly = $thread.Context.Get( "bRenderNonEdit" );
	if( $bForceReadOnly != NULL AND $bForceReadOnly )
		return false;

	##override to make copied sections non-editable. this thread is cleared
	## when the section finishes rendering
	$bCopiedSection = GetThreadContext( "bCopiedSection" );
	if( $bCopiedSection )
	{
		$oParentSection = GetThreadContext( "oParentToCopiedSection" );
		if( $oParentSection != $this )
			return false;
	};

	##check if we are in a restricted review
	if( NOT bReviewsAllowEdit() )
		return false;

	$sRef = $this.Ref;

	## check for an access person assignment
	$oPerson = GetThreadContext( "oAccessHolder" );
	if ( $oPerson != null And $oPerson != $me.oPerson )
		$sRef = $this.Ref + $oPerson.Ref;

	$bIsEditable = GetRequest( "bIsEditable" + $sRef );
	if( $bIsEditable == NULL )
	{
		$bIsEditable = false;

		$sModifyError = "";
		if( NOT $bExporting )
		{
			$sModifyError = sOKToModify();

			if( $sModifyError == "" )
				$bIsEditable = true;
		};

		SetRequest( "bIsEditable" + $sRef, $bIsEditable );
		SetRequest( "sModifyError" + $sRef, $sModifyError );
	};
	return $bIsEditable;
}

##===========================================================================
## bIsEditable
##===========================================================================

#*!***************************************************************************************************
 * <summary>
 * Returns whether or not an object is editable, taking into account page settings for editablilty, whether or
 * not the object is in a restricted review, or if the user has object access
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
 * <param name="$sHints" type="String"> Hints for the context of the request [OPTIONAL]</param>
 * <returns>Boolean</returns>
 * <comments>
 * This method always returns <code>false</code> if a thread context <code>bRenderNonEdit</code> is set to <code>true</code>, or if the object
 * is being shown by another document section as a copied section object
 * </comments>
*****************************************************************************************************#
variant SSC_DBObj::bIsEditable( $sHints )
{
	## when we have an export flag, we are exporting
	## always return false if exporting, also prevents accessing the user object
	$sExport = GetRequest( "sExport" );
	$bExporting = ( $sExport != NULL );
	if ( $bExporting )
		return false;

	## read only bypass flag
	$bForceReadOnly = $thread.Context.Get( "bRenderNonEdit" );
	if( $bForceReadOnly != NULL AND $bForceReadOnly )
		return false;

	## don't allow edit if we are showing modtips in fields
	if ( bShowModTipsInFields() ) return false;

	##override to make copied sections non-editable. this thread is cleared
	## when the section finishes rendering
	$bCopiedSection = GetThreadContext( "bCopiedSection" );
	if( $bCopiedSection )
	{
		$oParentSection = GetThreadContext( "oParentToCopiedSection" );
		if( $oParentSection != $this )
			return false;
	};

	##check if we are in a restricted review
	if( NOT bReviewsAllowEdit() )
		return false;

	$sRef = $this.Ref;

	## check for an access person assignment
	$oPerson = GetThreadContext( "oAccessHolder" );
	if ( $oPerson != null And $oPerson != $me.oPerson )
		$sRef = $this.Ref + $oPerson.Ref;

	$sContextModifier = $sHints != "" ? "_" + $sHints + "_" : "";
	$bIsEditable = GetRequest( "bIsEditable" + $sContextModifier + $sRef );
	if( $bIsEditable == NULL )
	{
		$bIsEditable = false;

		$sModifyError = "";
		if( NOT $bExporting )
		{
			## allow for conditional tests
			if ( $sHints != "" )
			{
				## check the hints for special indicators, like different access tests
				$sAccess = GetWebOption( $sHints, "sAccess" );
				$sCondition = GetWebOption( $sHints, "sChange" );
				if ( $sAccess != "" )
				{
					## use a different access condition than MODIFY
					$sAccess = $sCondition != "" ? $sAccess + EOI + $sHints : "";

					$sModifyError = sOKToAccess( $sAccess );
				}
				else
					$sModifyError = sOKToModifyConditionally( True, $sCondition );
			}
			else
				$sModifyError =  sOKToModify();

			if( $sModifyError == "" )
				$bIsEditable = true;
		};

		SetRequest( "bIsEditable" + $sContextModifier + $sRef, $bIsEditable );
		SetRequest( "sModifyError" + $sContextModifier + $sRef, $sModifyError );
	};
	return $bIsEditable;
}

##===========================================================================
## sModifyError
##===========================================================================
variant SSC_DBObj::sModifyError()
{
	$sModifyError = GetRequest( "sModifyError" + $this.Ref );
	if( $sModifyError == NULL )
	{
		$sModifyError = sOKToModify();
		$bIsEditable = false;
		if( $sModifyError == "" )
			$bIsEditable = true;

		SetRequest( "bIsEditable" + $this.Ref, $bIsEditable );
		SetRequest( "sModifyError" + $this.Ref, $sModifyError );
	};
	return $sModifyError;
}

#*!***************************************************************************************************
 * <summary>
 * 	Returns the error string if <code>bIsEditable</code> returns <code>false</code>
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
 * <param name="$sHints" type="String">The context of the modification [OPTIONAL]</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sModifyError( $sHints )
{
	$sContextModifier = $sHints != "" ? "_" + $sHints + "_" : "";
	$sModifyError = GetRequest( "sModifyError" + $sContextModifier + $this.Ref );
	if( $sModifyError == NULL )
	{
		$sModifyError = sOKToModify();

		$bIsEditable = false;
		if( $sModifyError == "" )
			$bIsEditable = true;

		SetRequest( "bIsEditable" + $sContextModifier + $this.Ref, $bIsEditable );
		SetRequest( "sModifyError" + $sContextModifier + $this.Ref, $sModifyError );
	};
	return $sModifyError;
}
##===========================================================================
## ListWidget
##
##===========================================================================
void SSC_DBObj::ListWidget( $sKind, $sScope, $sTag, $sHints, $sStyle, $sPublisher, $bSingle, $sDataRequest, $sDataTags, $bSnippet, $mssAdditionalArgs )
{
	$sTagAttrs = "";

	$oSection = GetThreadContext( "oCurrentSection" );
	if( $oSection != NULL )
		$sTagAttrs += " oCurrentSection='" + $oSection.Ref + "'";

	## Current sections aren't always "doc" sections; sometimes they are "categories" (because of virtual datasrcs)
	## In those cases, we need to remember the section that defined the virtual datasrc
	$oCurrentSectionVirtualRoot = GetRequest( "oCurrentSectionVirtualRoot" );
	if( $oCurrentSectionVirtualRoot != NULL )
		$sTagAttrs += " oCurrentSectionVirtualRoot='" + $oCurrentSectionVirtualRoot.Ref + "'";

	$mssAdditionalArgs << CMap( "sTagAttrs", $sTagAttrs );

	super::ListWidget( $sKind, $sScope, $sTag, $sHints, $sStyle, $sPublisher, $bSingle, $sDataRequest, $sDataTags, $bSnippet, $mssAdditionalArgs );
}
##===========================================================================
## oGetSectionForRegister
##
##===========================================================================
variant SSC_DBObj::oGetSectionForRegister()
{
	$oObj = $this;

	$oSection = GetThreadContext( "oCurrentSection" );
	if( $oSection != NULL )
		$oObj = $oSection;
	else
	{
		if( * KindOf "SSC_LinkedObj" )
		{
			try
			{
				## finds a document or group to place the new object in
				$oObj = oFindValidContainer();
			}
			catch( $sErr )
			{
				$error = ::sGetErrorString($sErr);
				throw($error);
			};
		};
	};

	return $oObj;
}

##===========================================================================
## ListWidget_Body
##===========================================================================
void SSC_DBObj::ListWidget_Body( $sKind, $sScope, $loObjects, $bEditable, $sDataRequest, $sDataTags, $bSnippet, $sInnerStyle, $sFilter )
{
	## need this before we call the filter
	SetThreadContext( "oRequestor", $this );

	$loObjects = loFilterList( $loObjects, GetFilter( $sFilter ), true );

	super::ListWidget_Body( $sKind, $sScope, $loObjects, $bEditable, $sDataRequest, $sDataTags, $bSnippet, $sInnerStyle, $sFilter );
}

##===========================================================================
## SnippetWidget
##===========================================================================
void SSC_DBObj::SnippetWidget( $sSnippet, $sTag, $sHints, $sStyle, $sPublisher, $bSetData, $mssAdditionalArgs )
{
	$sTagAttrs = "";

	$oSection = GetThreadContext( "oCurrentSection" );
	if( $oSection != NULL )
		$sTagAttrs += " oCurrentSection='" + $oSection.Ref + "'";

	## Current sections aren't always "doc" sections; sometimes they are "categories" (because of virtual datasrcs)
	## In those cases, we need to remember the section that defined the virtual datasrc
	$oCurrentSectionVirtualRoot = GetRequest( "oCurrentSectionVirtualRoot" );
	if( $oCurrentSectionVirtualRoot != NULL )
		$sTagAttrs += " oCurrentSectionVirtualRoot='" + $oCurrentSectionVirtualRoot.Ref + "'";

	$mssAdditionalArgs << CMap( "sTagAttrs", $sTagAttrs );

	super::SnippetWidget( $sSnippet, $sTag, $sHints, $sStyle, $sPublisher, $bSetData, $mssAdditionalArgs );
}

##===========================================================================
## loAccumObjects3
##===========================================================================
variant SSC_DBObj::loAccumObjects3( $sItem )
{
	$loObjects = CList();

	$sKindTmp = trim( Item( $sItem, 1, 1, "," ) );

	switch( $sKindTmp )
	{
		case "Me":

			$loObjects << $me.oPerson;
			break;

		case "Search":

			$sSearch = trim( Item( $sItem, 2, 2, "," ) );
			$loObjects << ::loSearch( "q=" + $sSearch );
			break;

		case "Project":

			$loObjects << oGetProject();
			break;

		case "Section":
		case "Folder":
		case "Category":

			$sRefId = trim( Item( $sItem, 2, 2, "," ) );
			$loObjects << oGetProject().loGetByReferenceID( $sRefId, "SSC_Category" );

		case "Directory":
		case "Group":
		case "Breakdown":
		case "Document":

			$sRefId = trim( Item( $sItem, 2, 2, "," ) );
			$loObjects << oGetProject().loGetByReferenceID( $sRefId, "SSC_SubSystem" );

			break;

	#*	MAYBE LATER IF THEY ARE VALUABLE
	case "ActionItem":
		case "Requirement":
		case "Voice":
		case "Group":
		case "Breakdown":
		case "Document":
		case "Heading":
		case "Folder":
		case "Mitigation":
		case "Step":
		case "Test":
		case "Risk":
		case "Person":
		case "Meeting":
		case "Input":
		case "SummaryInput":
		case "Attachment":
		case "Role":
		case "Object":
		case "Initiative":
		case "Defect":

			$sRefId = trim( Item( $sItem, 2, 2, "," ) );
			$oApp = COG_AppObj::oGet_s();
			$sClassToUse = $oApp.sGetClassNameFromRequest( $sKindTmp + "s" );
			$loObjects << oGetProject().oGetByReferenceID( $sRefId, $sClassToUse );

			break;
	*#
		case "DEFECTSBYMILESTONE":
		case "DefectsByMilestone":
		case "defectsbymilestone":

			$sScopeTmp = trim( Item( $sItem, 2, 2, "," ) );
			if( Upper( $sScopeTmp ) == "CURRENT" OR Upper( $sScopeTmp ) == "CURRENTMILESTONE" )
			{
				$sMilestone = GetRequest( "sMilestone" );
				if( $sMilestone == NULL )
				{

					$oSection = GetThreadContext( "oCurrentSection" );
					if( $oSection != NULL )
					{
						##Check if we should use the virtual section root for the milestone selection
						$oSectionVirtualRoot = GetRequest( "oCurrentSectionVirtualRoot" );
						if ( $oSectionVirtualRoot != NULL )
						{
							$oSection = $oSectionVirtualRoot;
						};

						$sMilestone = $oSection.oGetPrimaryGroup().sGetDataDisplay( "sTestResultMilestone" );
					};
				};
				if( $sMilestone == NULL )
					$sMilestone = "DEFAULT";

				$sItem = Replace( $sItem, $sScopeTmp, $sMilestone );
			};
			$loObjects << super::loAccumObjects3( $sItem );
			break;

		default:

			$loObjects << super::loAccumObjects3( $sItem );
	};

	return $loObjects;
}

#*!***************************************************************************************************
 * <summary>
 * 	Given the 2 classes being linked, returns the relationship string to pass to sAssociate
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$sParentClass" type="String">The classname of the parent object of the object being linked elsewhere</param>
 * <param name="$sSourceClass" type="String">The classname of the object being linked</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetNewRelationshipType( $sParentClass, $sSourceClass )
{
	##if the source, and the parent are both SubSystems, $sNewRelationshipType = SubStructure
	if(($sParentClass == "SSC_SubSystem")AND ($sSourceClass == "SSC_SubSystem"))
		return "SubStructure";
	else if(($sParentClass == "SSC_SysReq")AND($sSourceClass == "SSC_SysReq"))
		return "SubSpecs";
	else if(($sParentClass == "SSC_SubSystem")AND($sSourceClass == "SSC_SysReq"))
		return "SubSpecs";
	else
		return "";


}

#*!***************************************************************************************************
 * <summary>
 * 	Given the 2 classes being linked, returns the relationship string to pass to sAssociate
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$sSourceClass" type="String">The classname of the object being linked</param>
 * <param name="$sTargetClass" type="String">The classname of the object being linked to</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetPullFromType( $sSourceClass, $sTargetClass )
{
	##if the source, and the parent are both SubSystems, $sNewRelationshipType = SubStructure
	if(($sTargetClass == "SSC_SubSystem")AND ($sSourceClass == "SSC_SubSystem"))
		return "SubStructure";
	if(($sTargetClass == "SSC_SysReq")AND($sSourceClass == "SSC_SysReq"))
		return "SubSpecs";
	if(($sTargetClass == "SSC_SubSystem")AND($sSourceClass == "SSC_SysReq"))
		return "SubSpecs";
	else
		return "";

}
##===========================================================================
## GetStatusSummaryPage
##===========================================================================
void SSC_DBObj::GetStatusSummaryPage( $loReqs, $bShowSubGroups, $bShowSubItems, $nCurrLevel, $bReport, $bEditable )
{
		if( $bReport AND GetRequest( "sExport" ) == NULL )
		{
			#inline
			<div id='loadingMessage' class='noprint' style='font-family:verdana;font-size:8pt;'>
			#endinline;

			$bThermometer = NOT $bEditable;

			::AddJSProgressBar(  "Loading summary report...", "loadingMessage", "mainDiv", $bThermometer );

			#inline
			</div>
			<div id='mainDiv' style="margin-left:20px;display:none;font-family:verdana;" >
			#endinline;
		}
		else
		{
			#inline
			<div id='mainDiv' style="margin-left:20px;display:block;font-family:verdana;">
			#endinline;
		};

		#inline
		<table class=FT_Status_Table sRef='<%*.Ref%>' cellpadding="4px" cellspacing="0" style="text-align:left;table-layout:fixed;font-family:verdana;">
			<colgroup>
				<col style='width:275px;' >
				<col>
				<col>
				<col style='width:100px;'>
			</colgroup>
		<tr style="height:20px;">
		<td class=FT_Header style="">Parameter/Type/Units</td>
		<td class=FT_Header style="">Target/Rationale</td>
		<td class=FT_Header style="">Current Value/Comments</td>
		<td class=FT_Header style="text-align:center;">Status</td>
		</tr>

	#endinline;

		## we start drawing the table by calling this function with only the current object in order
		## to take advantage of code handling the display of proxy sections

		$loGroupsAndFolders = CList();

		$bSubsystem = *.Classname == "SSC_SubSystem";
		$bCategory = *.Classname == "SSC_Category";
		$bProject = *.Classname == "SSC_Project";

		if( *.classname != "SSC_SysReq" )
		{
			if( $bCategory AND bIsDocumentProxy() )
			{
				$oActualObj = oActualObj;
				if ( $oActualObj.classname == "SSC_SysReq" )
					$loReqs = CList( oActualObj );
				else if ( $oActualObj.classname == "SSC_SubSystem" )
				{
					$loReqs = $oActualObj.loGetObjects( "REQUIREMENTS", "SCORECARD" );
					$loGroupsAndFolders << $oActualObj.loGetRelatedObjects( "FOLDERS" );
					if( $bShowSubGroups )
						$loGroupsAndFolders << $oActualObj.tcGetRelatedObjects( "GROUPS" );
				};
			}
			else
			{
				$loReqs = loGetObjects("REQUIREMENTS", "SCORECARD");
			};
		}
		else
			$loReqs = CList( $this );

		if( $bShowSubGroups )
		{
			## Don't get documentation breakdown on the project
			if( $bProject )
			{
				$loGroupsAndFolders << loSubSystems;
				## Filter out the documentation breakdown
				$loGroupsAndFolders = $loGroupsAndFolders[*.iSubSysType != -2];
			}
			else if( $bSubsystem )
			{
				$loGroupsAndFolders << tcGetRelatedObjects( "FOLDERS" );
				$loGroupsAndFolders << tcGetRelatedObjects( "GROUPS" );
			}

			else if( $bCategory )
			{
				$loGroupsAndFolders << tcGetRelatedObjects( "FOLDERS" );
				$loGroupsAndFolders << tcGetRelatedObjects( "GROUPS" );
			};

		};
		GetStatusSummaryBody( $loReqs, $loGroupsAndFolders, $bShowSubGroups, $bShowSubItems, $nCurrLevel, $bReport, $bEditable );


	#inline
		</table>
		</div>
	#endinline;
}

##===========================================================================
## GetStatusSummaryBody
##===========================================================================
void SSC_DBObj::GetStatusSummaryBody( $loReqs, $loGroupsAndFolders, $bShowSubGroups, $bShowSubItems, $nCurrLevel, $bReport, $bEditable )
{
	$oThis = *;

	## show my reqs
	## Documents never have requirements directly under them. So if level is one, do not bother to show
	## the requirements directly at the level of document
	$bShowReqsSummary = true;
	if( $nCurrLevel == 0 )
	{
		if ( *.Classname == "SSC_SubSystem" and *.bIsDocumentation() )
		{
			$bShowReqsSummary = false;
		};
	};

	if( $bShowReqsSummary )
	{
		SSC_SysReq_Base::GetStatusSummary( $loReqs, $oThis, $nCurrLevel, $bShowSubItems, $bReport, $bEditable );
	};
	$loGroupsAndFolders/
	{
		$oCurr = *;
		$bShowGroup = true;

		$bSubsystem = *.Classname == "SSC_SubSystem";
		$bCategory = *.Classname == "SSC_Category";
		$bProject = *.Classname == "SSC_Project";

		if( $bShowGroup )
		{
			$sDescription = *.sGetData( "sDescription" );
			if( find( $sDescription, EOI ) != -1 )
				$sDescription = Item( $sDescription, 2, 2, EOI );

			$loReqs = loGetRelatedObjects( "REQUIREMENTS" );

			##if we are displaying the report on a proxy section, we need to add the proxy object here if it is
			## a requirement


			## Only show the group if :
			##		1) the group has requirements
			##			or
			##		2) the group has sub groups

			## getting the direct attributes here for performance
			$loSubGroupsAndFolders = CList();

			if( $bShowSubGroups )
			{
				## Don't get documentation breakdown on the project
				if( $bProject )
				{
					$loSubGroupsAndFolders << loSubSystems;
					## Filter out the documentation breakdown
					$loSubGroupsAndFolders = $loSubGroupsAndFolders[*.iSubSysType != -2];
				}
				else if( $bSubsystem )
				{
					$loSubGroupsAndFolders << tcGetRelatedObjects( "FOLDERS" );
					$loSubGroupsAndFolders << tcGetRelatedObjects( "GROUPS" );
				}

				else if( $bCategory )
				{
					$loSubGroupsAndFolders << tcGetRelatedObjects( "FOLDERS" );
					$loSubGroupsAndFolders << tcGetRelatedObjects( "GROUPS" );;
				};
			}
			else
			{
				if( $bSubsystem )
					$loSubGroupsAndFolders << loGetRelatedObjects( "FOLDERS" );

				else if( $bCategory )
					$loSubGroupsAndFolders << loGetRelatedObjects( "FOLDERS" );
			};
			if( IsEmpty( $loReqs ) )
			{
				if( IsEmpty( $loSubGroupsAndFolders ) )
					$bShowGroup = false;
			};

			$oProxyReq = Nullobject;

			if( $bCategory AND bIsDocumentProxy() )
			{
				if( oActualObj.classname == "SSC_SysReq" )
					$oProxyReq = oActualObj;
			};

			##if the current object is a proxy to a requirement, we need to show the requirement block in place of the section marker.
			if( $oProxyReq != NULLOBJECT )
			{
				SSC_SysReq_Base::GetStatusSummary( $oProxyReq, $oCurr, $nCurrLevel, $bShowSubItems, $bReport, $bEditable );
			}
			else
			{
				$nPadding = 15 * ( $nCurrLevel + 1 );

				#inline
				<tr style = 'color:black;font-weight: bold;background-color:#CCCCCC;border: 1px solid gray;'>
					<td colspan=4 style='border: 1px solid gray; padding-left:<%$nPadding%>px;'>
						<%$sDescription%>
					</td>
				</tr>
				#endinline;
			};

			GetStatusSummaryBody( $loReqs, $loSubGroupsAndFolders, $bShowSubGroups, $bShowSubItems, $nCurrLevel + 1, $bReport, $bEditable );
		};
	};
}
##===========================================================================
## ProcessScorecardSettings
##===========================================================================
void SSC_DBObj::ProcessScorecardSettings()
{
	##Handle columns
	$sColumns = GetRequest("sColumns");
	if( $sColumns == NULL )
	{
		$sColumns = $me.oPerson.sGetPersonalPref( "PREF_ScorecardColumns" );
		if( $sColumns == NULL OR $sColumns == "" )
		{
			$lsColumns = CList( { "S", "O", "TF", "U", "CGI", "COV", "SampleSize" } );
			$sColumns = join( $lsColumns, "|" );
		};
		SetRequest( "sColumns", $sColumns );
		$bSaved = $me.oPerson.bSetPersonalPref( "PREF_ScorecardColumns", $sColumns );
	}
	else
		$bSaved = $me.oPerson.bSetPersonalPref( "PREF_ScorecardColumns", $sColumns );

	##Handle the goal and sections
	$sGoal = GetRequest( "sGoal" );
	$sSections = GetRequest( "sSections" );

	$lsMilestones = GetRequest( "lsMilestones" );
	if( $lsMilestones == NULL )
		$lsMilestones = CList();

	$bDefaultMilestones = GetRequest( "bDefaultMilestones" );

	if( $bDefaultMilestones != NULL and NOT $bDefaultMilestones )
		$this.SetContext( "lsMilestones", $lsMilestones, Lifespan.Session );

	if( $sGoal == NULL )
	{
		##Get the preferred saved values
		$sGoal = $me.oPerson.sGetPersonalPref( "PREF_ScorecardGoal" );

		##Only get the saved value if $sSections wasn't passed on the URL
		if( $sSections == NULL )
			$sSections = $me.oPerson.sGetPersonalPref( "PREF_ScorecardSections" );

		##If either is null, construct the maps to get default values from
		if( $sGoal == "" OR $sSections == "" )
		{
			$oProject = oGetProject();
			$vsDataSects = $oProject.vsGetDataSectionsForScorecard();
			$nTotalSects = Count( $vsDataSects );
			$vsTargetSect = CList();
			$vsDesignSect = CList();
			$vsProcessSect = CList();
			$vsTestSect = CList();

			$vsDataSects/
			{
				$lsData = Split( *,"|" );
				switch( pick( $lsData,1 ) )
				{
					case 1:
						$vsTargetSect << *;
					break;
					case 2:
						$vsDesignSect << *;
					break;
					case 3:
						$vsProcessSect << *;
					break;
					case 4:
						$vsTestSect << *;
					break;
				};
			};
		};

		##Get the active target to use as the goal
		if( $sGoal == "" )
		{
			$iTargetSection = oGetProject().iActiveTarget;
			$sActiveTarget = "";
			$vsTargetSect/
			{
				$nSectionNumber = Item( *, 3, 3, "|" );

				if( CInt( $nSectionNumber ) == $iTargetSection )
					$sActiveTarget = *;
			};

			$sGoal = Replace( $sActiveTarget, "|", "_" );
		};

		## Set on the request for the code to grab later.
		SetRequest( "sGoal", $sGoal );

		##Set a default if the person preference wasn't set
		if( $sSections == "" )
		{
			$vsSections = CVector();
			$iDesignSection = oGetProject().iActiveDesign;
			$vsDesignSect/
			{
				$nSectionNumber = Item( *, 3, 3, "|" );
				##Only display the default design section initially
				if( CInt( $nSectionNumber ) == $iDesignSection )
					$vsSections << Replace( *, "|", "_" );
			};
			$vsProcessSect/
			{
				$vsSections << Replace( *, "|", "_" );
			};
			$vsTestSect/
			{
				$vsSections << Replace( *, "|", "_" );
			};
			$sSections = join( $vsSections, "|" );
			SetRequest( "sSections", $sSections );
		}
		else
			SetRequest( "sSections", $sSections );
	};
	##Save a handle to the current goal and selected sections for next time
	$bSaved = $me.oPerson.bSetPersonalPref( "PREF_ScorecardGoal", $sGoal );
	$bSaved = $me.oPerson.bSetPersonalPref( "PREF_ScorecardSections", $sSections );
}

##===========================================================================
## GetScorecardSectionsPrompt
##===========================================================================
void SSC_DBObj::GetScorecardSectionsPrompt()
{
	GetScorecardSectionsPrompt( true );
}

##===========================================================================
## GetScorecardSectionsPrompt
##===========================================================================
void SSC_DBObj::GetScorecardSectionsPrompt( $bMilestones )
{
	$MyRef = Ref;

	$oProject = oGetProject();
	$vsDataSects = $oProject.vsGetDataSectionsForScorecard();
	$nTotalSects = Count( $vsDataSects );

	$vsTargetSect = CList();
	$vsDesignSect = CList();
	$vsProcessSect = CList();
	$vsTestSect = CList();

	$vsDataSects/
	{
		$lsData = Split( *,"|" );
		switch( pick( $lsData,1 ) )
		{
			case 1:
				$vsTargetSect << *;
			break;
			case 2:
				$vsDesignSect << *;
			break;
			case 3:
				$vsProcessSect << *;
			break;
			case 4:
				$vsTestSect << *;
			break;
		};
	};

	$bUseDefaultSections = false;
	$bUseDefaultGoal = false;
	$bUseDefaultMilestones = false;


	##Get the preferred saved values
	$sGoal = $me.oPerson.sGetPersonalPref( "PREF_ScorecardGoal" );
	$sSections = $me.oPerson.sGetPersonalPref( "PREF_ScorecardSections" );

	$bUseDefaultSections = false;
	$bUseDefaultGoal = false;

	if( $sGoal == NULL )
		$bUseDefaultGoal = true;

	$lsSections = CList();
	$lsMilestones = CList();
	if( $sSections != NULL )
		$lsSections = Split( $sSections, "|" );
	else
		$bUseDefaultSections = true;

	$lsMilestones = $this.GetContext( "lsMilestones", Lifespan.Session );
	if( $lsMilestones == NULL )
	{
		$lsMilestones = CList();
		$bUseDefaultMilestones = true;
	};

	$numDesign = Count( $vsDesignSect );

	#inline
		<span style='text-decoration:underline;font-weight:bold'>Goal</span>
			<div style='margin-left:10px;margin-top:10px; margin-bottom:15px'>
				<span style='margin-left:20px;text-decoration:underline;font-weight:bold'>Target</span>
				<div style='margin-left:30px;margin-top:10px; margin-bottom:15px'>
	#endinline;

	if( Count( $vsTargetSect ) > 1 )
	{
		$iTargetSection = oGetProject().iActiveTarget;
		$sActiveTarget = "";
		$vsTargetSect/
		{
			$lsData = Split( *,"|" );
			$sDisplayName = First( $lsData );
			$nSectionType = pick( $lsData,1 );
			$nSectionNumber = pick( $lsData,2 );

			if( CInt( $nSectionNumber ) == $iTargetSection )
				$sActiveTarget = *;

			$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

			#inline
				<input <%$bUseDefaultGoal? "":$sGoal == $sValue? "checked" :""%>
						type="radio" name="nGoal" sType='target' value="<%$sValue%>" /><%$sDisplayName%><br>
			#endinline;

		};

		$lsData = Split( $sActiveTarget,"|" );
		$sDisplayName = First( $lsData );
		$nSectionType = pick( $lsData,1 );
		$nSectionNumber = pick( $lsData,2 );

		$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

		#inline
			<input <%$bUseDefaultGoal? "checked":""%> type="radio" name="nGoal" sType='target'
					value="<%$sValue%>" />Active<br>
		#endinline;

	}
	else
	{
		$lsData = Split( First( $vsTargetSect ) ,"|" );
		$sDisplayName = First( $lsData );
		$nSectionType = pick( $lsData,1 );
		$nSectionNumber = pick( $lsData,2 );

		$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

		#inline
			<input  type="radio" name="nGoal" sType='target' value="<%$sValue%>" checked /><%$sDisplayName%><br>
		#endinline;
	};
	#inline
	</div>
	<span style='margin-left:20px;text-decoration:underline;font-weight:bold'>Design</span>
	<div style='margin-left:30px;margin-top:10px; margin-bottom:15px'>
	#endinline;
	if( $numDesign > 1 )
	{
		$iDesignSection = oGetProject().iActiveDesign;
		$sActiveTarget = "";
		$vsDesignSect/
		{
			$lsData = Split( *,"|" );
			$sDisplayName = First( $lsData );
			$nSectionType = pick( $lsData,1 );
			$nSectionNumber = pick( $lsData,2 );

			if( CInt( $nSectionNumber ) == $iDesignSection )
				$sActiveTarget = *;

			$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

			#inline
				<input  type="radio" name="nGoal" sType='design' value="<%$sValue%>"
						<%$bUseDefaultGoal? "":$sGoal == $sValue? "checked" :""%>  /><%$sDisplayName%><br>
			#endinline;

		};

		$lsData = Split( $sActiveTarget,"|" );
		$sDisplayName = First( $lsData );
		$nSectionType = pick( $lsData,1 );
		$nSectionNumber = pick( $lsData,2 );

		$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

		#inline
			<input  type="radio" name="nGoal" sType='design' value="<%$sValue%>"/>Active<br>
		#endinline;

	}
	else
	{
		$lsData = Split( First( $vsDesignSect ) ,"|" );
		$sDisplayName = First( $lsData );
		$nSectionType = pick( $lsData,1 );
		$nSectionNumber = pick( $lsData,2 );

		$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

		#inline
			<input  type="radio" name="nGoal" sType='design' value="<%$sValue%>"
					<%$bUseDefaultGoal? "":$sGoal == $sValue? "checked" :""%>  /><%$sDisplayName%><br>
		#endinline;
	};
	#inline
			</div>
		</div>
	#endinline;

	"<span style='text-decoration:underline;font-weight:bold'>Values</span>";
	"<div style='margin-left:10px;margin-top:10px; margin-bottom:15px'>";
		if( Count( $vsProcessSect ) > 0 )
		{
			"<span style='margin-left:20px;text-decoration:underline;font-weight:bold'>Process Data</span>";
			"<div style='margin-left:30px;margin-top:10px; margin-bottom:15px'>";
			$vsProcessSect/
			{
				$lsData = Split( *,"|" );
				$sDisplayName = First( $lsData );
				$nSectionType = pick( $lsData,1 );
				$nSectionNumber = pick( $lsData,2 );

				$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

				#inline
					<input  type="checkbox" name="nSectionNumber" sType='process' value="<%$sValue%>"
							<%$bUseDefaultSections? "checked":$lsSections contains $sValue? "checked" :""%>  /><%$sDisplayName%><br>
				#endinline;
			};
			"</div>";
		};
		if( Count( $vsTestSect ) > 0 )
		{
			"<span style='margin-left:20px;text-decoration:underline;font-weight:bold'>Test Data</span>";
			"<div style='margin-left:30px;margin-top:10px; margin-bottom:15px'>";
			$vsTestSect/
			{
				$lsData = Split( *,"|" );
				$sDisplayName = First( $lsData );
				$nSectionType = pick( $lsData,1 );
				$nSectionNumber = pick( $lsData,2 );

				$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

				#inline
					<input  type="checkbox" name="nSectionNumber" sType='test' value="<%$sValue%>"
							<%$bUseDefaultSections? "checked":$lsSections contains $sValue? "checked" :""%>  /><%$sDisplayName%><br>
				#endinline;
			};
			"</div>";
		};
		if( $numDesign > 0 )
		{
			"<span style='margin-left:20px;text-decoration:underline;font-weight:bold'>Design Data</span>";
			"<div style='margin-left:30px;margin-top:10px; margin-bottom:15px'>";
			$vsDesignSect/
			{
				$lsData = Split( *,"|" );
				$sDisplayName = First( $lsData );
				$nSectionType = pick( $lsData,1 );
				$nSectionNumber = pick( $lsData,2 );

				$iDesignSection = $oProject.iActiveDesign;

				$sValue = $sDisplayName + "_" + $nSectionType + "_" + $nSectionNumber;

				$bChecked = false;
				if( $bUseDefaultSections AND ( $iDesignSection == CInt( $nSectionNumber ) ) )
					$bChecked = true;
				if( $lsSections contains $sValue )
					$bChecked = true;
				#inline
					<input  type="checkbox" name="nSectionNumber"  sType='design' value="<%$sValue%>"
							<%$bChecked? "checked" :""%>  /> <%$sDisplayName%><br>
				#endinline;
			};
			"</div>";
		};
		"</div>";

		if( $bMilestones )
		{
			#inline
			<span style='text-decoration:underline;font-weight:bold'>Milestones</span>
			<div style='margin-left:10px;margin-top:10px; margin-bottom:15px'>
				<span style='margin-left:20px;text-decoration:underline;font-weight:bold'>Project Level</span>
				<div style='margin-left:30px;margin-top:10px; margin-bottom:15px'>
			#endinline;
				$oProj = oGetProject();
				$vsProjMilestones = $oProj.vsGetStandardVerificationTypes();

				$ssProjectMilestones = CSet( $vsProjMilestones );

				## intersect the project and section milestones
				$vsProjMilestones/
				{
					$sMilestone = *;
					$sMilestoneHTML = HTMLEncode($sMilestone);
					#inline
						<input  type="checkbox" name="lsMilestones" sType='process' value="<%$sMilestoneHTML%>"
							<%$bUseDefaultMilestones? "checked":$lsMilestones contains $sMilestone? "checked" :""%> /><%$sMilestoneHTML%><br>
					#endinline;
				};
			#inline
				</div>
				<span style='margin-left:20px;text-decoration:underline;font-weight:bold'>Local</span>
				<div style='margin-left:30px;margin-top:10px; margin-bottom:15px'>
			#endinline;
				$ssLocalMilestones = CSet();

				$sParentClass = *.Classname;

				if( $sParentClass == "SSC_Category" OR $sParentClass == "SSC_SubSystem" )
					$loTests = oGetDataSrc(1).loGetObjects( "Custom", "this&Requirements/Tests" );
				else if( $sParentClass == "SSC_SysReq" )
					$loTests = loGetObjects( "Tests", "Children" );
				else
					$loTests = CList();

				$loTests/
				{
					## get verification types
					$vsVTypes = vsGetVerificationTypes();
					$vsVTypes/
					{
						if( ( NOT ( $ssProjectMilestones contains * ) ) AND ( NOT ( $ssLocalMilestones contains * ) ) )
							$ssLocalMilestones << *;
					};
				};

				$ssLocalMilestones/
				{
					$sMilestone = *;
					$sMilestoneHTML = HTMLEncode($sMilestone);
					#inline
						<input  type="checkbox" name="lsMilestones" sType='process' value="<%$sMilestoneHTML%>"
							<%$bUseDefaultMilestones? "":$lsMilestones contains $sMilestone? "checked" :""%> /><%$sMilestoneHTML%><br>
					#endinline;
				};
				"</div>";
			#inline
			</div>
			<input name="bDefaultMilestones" type=hidden value='False'>
			#endinline;
		};
}

##===========================================================================
## GetScorecardHeader
##===========================================================================
void SSC_DBObj::GetScorecardHeader()
{
	#inline
	<div style = "font-family:verdana;color:#666666;">
	System: <% sGetText( "sDescription" );%>
	</div>
	<div style = "font-family:verdana;color:#666666;">
	Date: <%Format( Date ( Now( ) ), "Short Date" ) %>
	</div>
	<br/>
	#endinline;
}

##===========================================================================
## GetScorecard
##===========================================================================
void SSC_DBObj::GetScorecard( $lsSections, $sGoal, $bShowSubGroups, $bShowSubItems, $bShowLegend )
{
	$bSaved = $me.oPerson.bSetPersonalPref( "PREF_ScorecardColumns", GetRequest( "sColumns" ) );
	$lsColumns = Split( $me.oPerson.sGetPersonalPref( "PREF_ScorecardColumns" ), "|" );

	$lsMilestones = CList( oGetProject().vsGetStandardVerificationTypes() );

	GetScorecard( $lsSections, $sGoal, $bShowSubGroups, $bShowSubItems, $bShowLegend, $lsColumns, $lsMilestones );
}

#*!***************************************************************************************************
 * <summary>
 * 	Renders a scorecard report
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
 * <param name="$lsSections" type="WOS List of String">The data sections to render</param>
 * <param name="$sGoal" type="String">Which data section is the goal</param>
 * <param name="$bShowSubGroups" type="Boolean">Whether or not to show sub groups</param>
 * <param name="$bShowSubItems" type="Boolean">Whether or not to show sub requirements</param>
 * <param name="$bShowLegend" type="Boolean">Whether or not to display the legend</param>
 * <param name="$lsColumns" type="WOS List of String">The columns to display [OPTIONAL]</param>
 * <param name="$lsMilestones" type="WOS List of String">The milestones to show [OPTIONAL]</param>
*****************************************************************************************************#
void SSC_DBObj::GetScorecard( $lsSections, $sGoal, $bShowSubGroups, $bShowSubItems, $bShowLegend, $lsColumns, $lsMilestones )
{
	$oProject = oGetProject();
	$bUseCpkForCGI = $oProject.sGetProjectProperty( "ksScorecardUseCpkInCGICalculations", false );

	if( NOT ( $lsColumns contains "CP" ) )
		$bUseCpkForCGI = true;

	$oThis = *;
	$sRef = Ref;
	$loReqs = CList();

	#inline
	<table id="scorecard" sRef="<%$sRef%>" style = "border-collapse: collapse;border: 1pt solid black;empty-cells:show;text-align:center;table-layout:fixed;" bUseCpkForCGICalc='<%$bUseCpkForCGI%>'>
	#endinline;

	##Figure out what type of sections we have, and construct in order a template list
	$lnSectionTypes = CList();
	$lnSectionNumbers = CList();
	$lsSectionData = CList();

	$nTargetType = SSC_SysReq::kiTargetData_s();

	if( Count( $lsSections ) == 1 AND First( $lsSections ) == "" )
		$lsSections = Split( GetRequest( "sSections" ), "|" );

	##Save the value of the goal section
	$nGoal = 0;
	## Create lists of the types, numbers, and data query key
	$lsSections/
	{
		$lsData = split(*,"_");

		$nCurrType = CInt( pick( $lsData, 1 ) );
		$nSectionNumber = CInt( pick( $lsData,2 ) );

		if( * == $sGoal )
			$nGoal = $nSectionNumber;

		$lnSectionTypes << $nCurrType;
		$lnSectionNumbers << $nSectionNumber;

		$sData = First($lsData);
		$sData += "|" + $nSectionNumber;
		##save section data as name|number
		$lsSectionData << $sData;
	};

	##Map to pass on to GetScorecardReport of SSC_SysReq so scorecard is grouped by types
	$mnnDSNsToDSTypes = CMap( $lnSectionTypes, $lnSectionNumbers);

	## Drawing the headers
	$lnSectionTypes << 0;
	$lsSectionData<< "General| ";

	$mnsNumbersToTitles = CMap( $lnSectionTypes, $lsSectionData );

	$lnSectionTypes = GetUnique( GetKeys( $mnsNumbersToTitles ) );

	$nRow = 1;
	$bTestSectionChosen = false;
	$bProcessSectionChosen = false;

	##$loReqs = loGetObjects_b( "Requirements", "CHILDREN" );

	$nNumCols = 0;

	##define the col widths
	$lnSectionTypes/
	{
		$sCurrType = SSC_SubSystem_Base::GetSectionTypeFromNumber(*);
		if( $sCurrType != "" )
		{
			$lsCurrData = PickRange($mnsNumbersToTitles,*,*);
			$lsCurrData/{
				$bIsGoal = CInt( Item( *, 2, 2, "|" ) )== $nGoal ? true:false;

				$oThis.GetScorecardColumns( $sCurrType, $bUseCpkForCGI, $bShowSubGroups, $bShowSubItems, $bIsGoal, $lsColumns );

				switch( $sCurrType )
				{
					case "Process":
					case "LTProcess":
						$bProcessSectionChosen = true;
						$colSpan = 3;
						if( $lsColumns contains "COV" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "CP" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "S" )
							$colSpan = $colSpan + 1;
						$nNumCols += $colSpan;
						break;
					case "Test":
						$bTestSectionChosen = true;
						$colSpan = 2;
						if( $lsColumns contains "COV" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "CP" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "S" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "SampleSize" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "GageRR" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "PTRatio" )
							$colSpan = $colSpan + 1;
						$nNumCols += $colSpan;
						break;
					case "General":
						$colSpan = 1;
						if( $lsColumns contains "U" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "O" )
							$colSpan = $colSpan + 1;
						if( $lsColumns contains "TF" )
							$colSpan = $colSpan + 1;
						$nNumCols += $colSpan;
						break;
					case "Design":
						if( $bIsGoal )
							$nNumCols += 1;
						else
						{
							$colSpan = 2;
							if( $lsColumns contains "COV" )
								$colSpan = $colSpan + 1;
							if( $lsColumns contains "CP" )
								$colSpan = $colSpan + 1;
							if( $lsColumns contains "S" )
								$colSpan = $colSpan + 1;
							$nNumCols += $colSpan;
						};
						break;
					case "Target":
						$nNumCols += 1;
						break;

				};
			};##lsCurrNames
		};##if

	};##lnSectionTypes

	$lsMilestones/
	{
		#inline
		<colgroup span=5>
		<col style='width:40px;'></col>
		<col style='width:50px;'></col>
		#endinline;

		$nNumCols += 2;

		if( $lsColumns contains "CP" )
		{
			"<col style='width:60px;'></col>";
			$nNumCols += 1;
		};
		if( $lsColumns contains "S" )
		{
			"<col style='width:50px;'></col>";
			$nNumCols += 1;
		};


		if( $lsColumns contains "SampleSize" )
		{
			"<col style='width:50px;'></col>";
			$nNumCols += 1;
		};
		if( $lsColumns contains "GageRR" )
		{
			"<col style='width:40px;'></col>";
			$nNumCols += 1;
		};
		if( $lsColumns contains "PTRatio" )
		{
			"<col style='width:40px;'></col>";
			$nNumCols += 1;
		};
		"</colgroup>";

	};

	while( $nRow != 4 )
	{

		"<tr style = 'background-color:LightSkyBlue;font-family:verdana;'>";

		$lnSectionTypes/
		{
			$sCurrType = SSC_SubSystem_Base::GetSectionTypeFromNumber(*);
			if( $sCurrType != "" )
			{
				$lsCurrData = PickRange($mnsNumbersToTitles,*,*);
				$lsCurrData/{
					$lsCurr = split( *, "|" );
					$sCurrName = First( $lsCurr );
					$sCurrNumber = pick( $lsCurr, 1 );
					$oThis.GetScorecardTop($sCurrType,$sCurrName, $sCurrNumber, $nRow, $bUseCpkForCGI, $nGoal, $lsColumns );
				};##lsCurrNames
			};##if

		};##lnSectionTypes

		$lsMilestones/
		{
			$sMilestone = *;
			$sMilestoneHTML = HTMLENcode($sMilestone);
			$colSpan = 2;

			if( $lsColumns contains "CP" )
				$colSpan += 1;
			if( $lsColumns contains "S" )
				$colSpan += 1;
			if( $lsColumns contains "SampleSize" )
				$colSpan += 1;
			if( $lsColumns contains "GageRR" )
				$colSpan += 1;
			if( $lsColumns contains "PTRatio" )
				$colSpan += 1;

			switch($nRow)
			{
				case 1:
					#inline
					<td colspan=<% $colSpan %> align = center style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;"><%$sMilestoneHTML%></td>
					#endinline;
					break;
				case 2:
					#inline
					<td colspan=<% $colSpan %> align = center style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;"></td>
					#endinline;
					break;
				case 3:
					#inline
					<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
						Mean
					</td>
					<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
						St. Dev.
					</td>
					#endinline;
					if( $lsColumns contains "CP" )
					{
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Centered<br>Metric
						</td>
						#endinline;
					};

					if( $lsColumns contains "S" )
					{
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Metric
						</td>
						#endinline;
					};
					if( $lsColumns contains "SampleSize" )
					{
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Sample Size
						</td>
						#endinline;
					};

					if( $lsColumns contains "GageRR" )
					{
						#inline
							<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
								Gauge R&R
							</td>
						#endinline;
					};

					if( $lsColumns contains "PTRatio" )
					{
						#inline
							<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
								P/T Ratio
							</td>
						#endinline;
					};
					break;
			};
		};

		"</tr>";
		$nRow = $nRow + 1;

	};##while
	$sSubItems = GetRequest( "sSubItems" );
	if( $sSubItems != NULL AND $sSubItems != ""  )
	{
		$lsReqs = Split( $sSubItems, EOI );
		$lsReqs/
		{
			$loReqs << CObj( * );
		};
	}
	else if( $this.classname == "SSC_SysReq" )
		$loReqs = CList( $this );
	## Temporary fix for a problem where tiered scorecards were showing Reqs that weren't their immediate problem
	else if( $this.classname == "SSC_SubSystem" )
	{
		$loReqs = loGetObjects_b( "Requirements", "SCORECARD" );
	}
	else
		$loReqs << tcGetRelatedObjects( "REQUIREMENTS" );

	GetScorecardBody( $loReqs, $bShowSubGroups, $bShowSubItems, 0, $mnnDSNsToDSTypes, $nNumCols, $nGoal, $lsColumns, $lsMilestones );


	#inline
	</table>
	#endinline;

	if( $bShowLegend )
	{
		#inline
		<br/>
		#endinline;
		$sMetricType = $oProject.sGetMetricType();
		SSC_SysReq_Base::GetScorecardLegend( false, $sMetricType, $bProcessSectionChosen, $bTestSectionChosen );
	};


}

##===========================================================================
## GetScorecardBody
##===========================================================================
void SSC_DBObj::GetScorecardBody( $loReqs, $bShowSubGroups, $bShowSubItems, $nCurrLevel, $mnnDSNsToDSTypes, $nNumCols, $nGoal, $lsColumns, $lsMilestones )
{
	$oThis = *;

	##show my reqs
	## Documents never have requirements directly under them. So if level is one, do not bother to show
	## the requirements directly at the level of document
	$bShowReqsScorecard = true;
	if( $nCurrLevel == 0 )
	{
		if (*.Classname == "SSC_SubSystem" and *.bIsDocumentation() )
		{
			$bShowReqsScorecard = false;
		};
	};
	if( $bShowReqsScorecard )
	{
		SSC_SysReq_Base::GetScorecardReport( $loReqs, $mnnDSNsToDSTypes, $nGoal, false, false, $oThis, $nCurrLevel, $bShowSubItems, $nNumCols, $lsColumns, $lsMilestones );
	};

	## getting the direct attributes here for performance
	$loGroupsAndFolders = CList();

	$sClassname = *.classname;
	if( $bShowSubGroups )
	{
		if( $sClassname == "SSC_Project" )
			$loGroupsAndFolders << loSubSystems;

		if( $sClassname == "SSC_SubSystem" )
		{
			$loGroupsAndFolders << tcGetRelatedObjects( "FOLDERS" );
			$loGroupsAndFolders << tcGetRelatedObjects( "GROUPS" );
		};

		if( $sClassname == "SSC_Category" )
		{
			$loGroupsAndFolders << tcGetRelatedObjects( "FOLDERS" );
			$loGroupsAndFolders << tcGetRelatedObjects( "GROUPS" );;
		};

	}
	else
	{
		if( ( $sClassname == "SSC_SubSystem" ) Or ( $sClassname == "SSC_Category" ) )
			$loGroupsAndFolders << tcGetRelatedObjects( "FOLDERS" );
	};

	## show for my groups and folders
	$loGroupsAndFolders/
	{
		$loReqs = loGetRelatedObjects( "REQUIREMENTS" );

		$nPadding = 15 * ( $nCurrLevel + 1 );
		$sDescription = sGetData( "sDescription" );
		if( find( $sDescription, EOI ) != -1 )
			$sDescription = Item( $sDescription, 2, 2, EOI );
		#inline
		<tr style = background-color:LightSkyBlue;font-family:verdana;text-align:left;'>
			<td colspan=<%$nNumCols%> style='border:1pt solid black;padding-left:<%$nPadding%>px;'>
				<%$sDescription%>
			</td>
		</tr>
		#endinline;

		GetScorecardBody( $loReqs, $bShowSubGroups, $bShowSubItems, $nCurrLevel + 1, $mnnDSNsToDSTypes,
						$nNumCols, $nGoal, $lsColumns, $lsMilestones  );
	};
}

##===========================================================================
## GetSectionTypeFromNumber
##===========================================================================
variant SSC_DBObj::GetSectionTypeFromNumber($nCurr)
{
	$sCurrType = "";
	if( $nCurr == SSC_SysReq::kiDesignData_s() )
		$sCurrType = "Design";
	if( $nCurr == SSC_SysReq::kiProcessData_s() )
		$sCurrType = "Process";
	if( $nCurr == SSC_SysReq::kiLTProcessData_s() )
		$sCurrType = "LTProcess";
	if( $nCurr == SSC_SysReq::kiTargetData_s() )
		$sCurrType = "Target";
	if( $nCurr == SSC_SysReq::kiTestData_s() )
		$sCurrType = "Test";
	if( $nCurr == 0 )
		$sCurrType = "General";
	return $sCurrType;
}

##===================================================================================================================
## GetScorecardColumns
##
##	Sets the colgroups for each section of the scorecard
##===================================================================================================================
void SSC_DBObj::GetScorecardColumns( $sSectionType, $bUseCpkForCGI, $bShowSubGroups, $bShowSubItems, $bIsGoal, $lsColumns )
{
		switch( $sSectionType )
		{
			case "General":
				$nDescriptionWidth = 150;
				#inline
				<colgroup>
					<col style='width:300px;'>
					</col>
				</colgroup>
				#endinline;
				$lsCols = CList();
				if( $lsColumns contains "O" )
					$lsCols << "<col style='width:80px;'></col>";
				if( $lsColumns contains "TF" )
					$lsCols << "<col style='width:30px;'></col>";
				if( $lsColumns contains "U" )
					$lsCols << "<col style='width:70px;'></col>";

				if( NOT IsEmpty( $lsCols ) )
				{
					"<colgroup>";
					$lsCols/
					{
						*;
					};
					"</colgroup>";
				};

				break;
			case "Design":
				if( $bIsGoal )
				{
					#inline
					<colgroup span=1>
					<col style='width:100px;'></col>
					</colgroup>
					#endinline;
				}
				else
				{
					## The nominal column can be a little smaller as it is a single value
					#inline
					<colgroup span=5>
					<col style='width:50px;'></col>
					<col style='width:70px;'></col>
					#endinline;
					if( $lsColumns contains "CP" )
					{
						#inline
						<col style='width:70px;'></col>
						#endinline;
					};
					if( $lsColumns contains "S" )
					{
						#inline
						<col style='width:70px;'></col>
						#endinline;
					};
					if( $lsColumns contains "COV" )
					{
						#inline
						<col style='width:70px;'></col>
						#endinline;
					};
					#inline
					</colgroup>
					#endinline;
				};
				break;
			case "Process":
			case "LTProcess":
				#inline
				<colgroup span=5>
				<col style='width:40px;'></col>
				<col style='width:50px;'></col>
				#endinline;
				if( $lsColumns contains "CP" )
				{
					#inline
					<col style='width:70px;'></col>
					#endinline;
				};
				if( $lsColumns contains "S" )
				{
					#inline
					<col style='width:70px;'></col>
					#endinline;
				};
				if( $lsColumns contains "COV" )
					"<col style='width:50px;'></col>";
				#inline
				</colgroup>
				#endinline;
				break;
			case "Target":
				#inline
				<colgroup span=1>
				<col style='width:100px;'></col>
				</colgroup>
				#endinline;
				break;
			case "Test":
				#inline
				<colgroup span=8>
				<col style='width:40px;'></col>
				<col style='width:50px;'></col>
				#endinline;
				if( $lsColumns contains "CP" )
				{
					#inline
					<col style='width:70px;'></col>
					#endinline;
				};
				if( $lsColumns contains "S" ) {
					#inline
					<col style='width:70px;'></col>
					#endinline;
				};

				if( $lsColumns contains "SampleSize" )
					"<col style='width:50px;'></col>";
				if( $lsColumns contains "COV" )
					"<col style='width:50px;'></col>";
				if( $lsColumns contains "GageRR" )
					"<col style='width:40px;'></col>";
				if( $lsColumns contains "PTRatio" )
					"<col style='width:40px;'></col>";
				"</colgroup>";
				break;
		};
}

##===================================================================================================================
## GetScorecardTop
##
##	Sets the header for each scorecard section, row by row
##===================================================================================================================
void SSC_DBObj::GetScorecardTop( $sSectionType, $sSectionName, $sSectionNumber, $nHeaderRow, $bUseCpkForCGI, $nGoal, $lsColumns )
{
	$sRef = Ref;

	switch($sSectionType)
	{
		case "General":
			switch($nHeaderRow)
			{
				case 1:
					#inline
						<td style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;width:300px;"> </td>
					#endinline;
					if( $lsColumns contains "O" )
						"<td align=center style='border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'> </td>";
					if( $lsColumns contains "TF" )
						"<td align=center style='border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'> </td>";
					if( $lsColumns contains "U" )
						"<td align=center style='border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'> </td>";
				break;
				case 2:
					#inline
						<td align=center style="border-left:1pt solid black;border-right:1pt solid black;width:300px;" >System Requirement</td>
					#endinline;
					if( $lsColumns contains "O" )
						"<td align=center style='border-left:1pt solid black;border-right:1pt solid black;'>Owner</td>";
					if( $lsColumns contains "TF" )
						"<td align=center style='border-left:1pt solid black;border-right:1pt solid black;'>T/F</td>";
					if( $lsColumns contains "U" )
						"<td align=center style='border-left:1pt solid black;border-right:1pt solid black;'>Units</td>";

				break;
				case 3:
					#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;width:300px;"> </td>
					#endinline;
					if( $lsColumns contains "O" )
						"<td align=center style='border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'> </td>";
					if( $lsColumns contains "TF" )
						"<td align=center style='border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'>?</td>";
					if( $lsColumns contains "U" )
						"<td align=center style='border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'> </td>";
				break;
			};
			break;

		case "Design":
			if( CInt( $sSectionNumber ) == $nGoal )
			{
				switch($nHeaderRow)
				{
					case 1:
						#inline
						<td align = center style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;width:100px;" >
							<%$sSectionName%></td>
						#endinline;
						break;
					case 2:
						#inline
						<td align = center style = "border-left:1pt solid black;border-right:1pt solid black;"></td>
						#endinline;
						break;
					case 3:
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Goal
						</td>
						#endinline;
						break;
				};
			}
			else
			{
				$colSpan = 2;
				if( $lsColumns contains "S" )
					$colSpan = $colSpan + 1;
				if( $lsColumns contains "COV" )
					$colSpan = $colSpan + 1;
				if( $lsColumns contains "CP" )
					$colSpan = $colSpan + 1;
				switch($nHeaderRow)
				{
					case 1:
						## This is the first line of the column header which is the section name
						#inline
						<td colspan=<% $colSpan %> align = center style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;" >
							<%$sSectionName%></td>
						#endinline;
						break;
					case 2:
						## The second line contain the CGI value but it needs to be located so it fits with the number of columns
						## Only add this column if we are displaying the metric
						if ( $lsColumns contains "S" ) {
							#inline
							<td align = center style = "border-left:1pt solid black;" ></td>
							#endinline;
						};

						## Need to get the CGI
						$sCGI = GetRequest( $sRef + "section_" + $sSectionNumber + "CGI" );
						## Because the CGI is calculated from all the items in the scorecard but placed above, the
						## calculation is done after the scorecard is displayed. This is done by sGetCGICalculation
						## in top.js which reads all the values in the column and then calculates the CGI value.
						if( $sCGI == NULL )
							$sCGI = "INSERT%";
						else
							$sCGI = $sCGI + "%";

						$bShowCP = $lsColumns contains "CP"? true:false;
						if( $lsColumns contains "CGI" )
						{
							if( $bUseCpkForCGI )
							{
								if( $bShowCP )
								{
									#inline
									<td align = center style = "" ></td>
									<td align = center style = "" >CGI DMP:</td>
									<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
									#endinline;
								}
								else
								{
									#inline
									<td align = center style = "" >CGI DMP:</td>
									<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
									#endinline;
								}
							}
							else
							{
								#inline
								<td align = center style = "" >CGI DMP:</td>
								<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
								<td align = center style = "" ></td>
								#endinline;
							};
						}
						else
						{
							if( $bShowCP )
							{
								#inline
									<td align = center style = "" ></td>
									<td align = center style = "" ></td>
									<td align = center style = "" ></td>
								#endinline;
							}
							else
							{
								#inline
									<td align = center style = "" ></td>
									<td align = center style = "border-right:1pt solid black;" ></td>
								#endinline;
							};
						};

						if( $lsColumns contains "COV" )
							"<td align=center style='border-right:1pt solid black;'></td>";
					break;
					case 3:
						$bShowCP = $lsColumns contains "CP"? true:false;
						$bShowMetric = $lsColumns contains "S"? true:false;
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Nominal
						</td>
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Variation
						</td>
						#endinline;
						if( $bShowCP )
						{
							#inline
							<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
								Centered<br>Metric
							</td>
							#endinline;
						};
						if( $bShowMetric )
						{
							#inline
							<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
								Metric
							</td>
							#endinline;
						};
						if( $lsColumns contains "COV" )
							"<td align=center style='border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'>COV</td>";

					break;
				};
			};
			break;

		case "Process":
		case "LTProcess":
			$bShowCP = $lsColumns contains "CP"? true:false;
			$bShowMetric = $lsColumns contains "S"? true:false;
			$colSpan = 2;
			if( $bShowCP  )
				$colSpan = $colSpan + 1;
			if( $lsColumns contains "S" )
				$colSpan = $colSpan + 1;
			if( $lsColumns contains "COV" )
				$colSpan = $colSpan + 1;

			switch($nHeaderRow)
			{
				case 1:
					#inline
					<td colspan=<% $colSpan %> align = center style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;" >
					    <%$sSectionName%></td>
					#endinline;
					break;
				case 2:
					## If no metric shift everything left
					if ( $bShowMetric ) {
						#inline
						<td align = center style = "border-left:1pt solid black;" ></td>
						#endinline;
					};
					$sCGI = GetRequest( $sRef + "section_" + $sSectionNumber + "CGI" );
					if( $sCGI == NULL )
						$sCGI = "INSERT%";
					else
						$sCGI = $sCGI + "%";
					## Cannot show CGI without the metric column.
					if( $lsColumns contains "CGI" )
					{
						if( $bUseCpkForCGI )
						{
							if( $bShowCP )
							{
								#inline
								<td align = center style = "" ></td>
								<td align = center style = "" >CGI PCP:</td>
								<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
								#endinline;
							}
							else
							{
								#inline
								<td align = center style = "" >CGI PCP:</td>
								<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
								#endinline;
							};
						}
						else
						{
							#inline
							<td align = center style = "" >CGI PCP:</td>
							<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
							<td align = center style = "" ></td>
							#endinline;
						};
					}
					else
					{
						if( $bShowCP )
						{
							#inline
								<td align = center style = "" ></td>
								<td align = center style = "" ></td>
								<td align = center style = "" ></td>
							#endinline;
						}
						else
						{
							#inline
								<td align = center style = "" ></td>
								<td align = center style = "" ></td>
							#endinline;
						};
					};
					if( $lsColumns contains "COV" )
						"<td align=center style='border-right:1pt solid black;'></td>";
				break;
				case 3:
					#inline
					<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
						Mean
					</td>
					<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
						St. Dev.
					</td>
					#endinline;
					if( $bShowCP )
					{
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Centered<br>Metric
						</td>
						#endinline;
					};
					if( $bShowMetric ) {
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Metric
						</td>
						#endinline;
					};

					if( $lsColumns contains "COV" )
						"<td align=center style='border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'>COV</td>";
				break;
			};
			break;

		case "Target":
			switch($nHeaderRow)
			{
				case 1:
					#inline
					<td align = center style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;width:100px;" >
					    <%$sSectionName%></td>
					#endinline;
					break;
				case 2:
					#inline
					<td align = center style = "border-left:1pt solid black;border-right:1pt solid black;"></td>
					#endinline;
					break;
				case 3:
					#inline
					<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
						Goal
					</td>
					#endinline;
					break;
			};
		break;
		case "Test":
			$bShowCP = $lsColumns contains "CP"? true:false;
			$colSpan = 2;
			if( $lsColumns contains "COV" )
				$colSpan = $colSpan + 1;
			if( $bShowCP  )
				$colSpan = $colSpan + 1;
			if( $lsColumns contains "S" )
				$colSpan = $colSpan + 1;
			if( $lsColumns contains "SampleSize" )
				$colSpan = $colSpan + 1;
			if( $lsColumns contains "GageRR" )
				$colSpan = $colSpan + 1;
			if( $lsColumns contains "PTRatio" )
				$colSpan = $colSpan + 1;

			switch($nHeaderRow)
			{
				case 1:
					#inline
					<td colspan=<% $colSpan %> align = center style = "border-top:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;"><%$sSectionName%></td>
					#endinline;
					break;
				case 2:
					if( $lsColumns contains "S" )
					{
						#inline
						<td align = center style = "border-left:1pt solid black;" ></td>
						#endinline;
					};
					if( $lsColumns contains "CGI" )
					{
						$sCGI = GetRequest( $sRef + "section_" + $sSectionNumber + "CGI" );
						if( $sCGI == NULL )
							$sCGI = "INSERT%";
						else
							$sCGI = $sCGI + "%";
						if( $bUseCpkForCGI )
						{
							if( $bShowCP )
							{
								#inline
								<td align = center style = "" ></td>
								<td align = center style = "" >CGI VTD:</td>
								<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
								#endinline;
							}
							else
							{
								#inline
								<td align = center style = "" >CGI VTD:</td>
								<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
								#endinline;
							};
						}
						else
						{
							#inline
							<td align = center style = "" >CGI VTD:</td>
							<td align = center style = "background-color:white;" bCapability=true sSection="section_<%$sSectionNumber%>" ><%$sCGI%></td>
							<td align = center style = "" ></td>
							#endinline;
						};
					}
					else
					{
						if( $bShowCP )
						{
							#inline
								<td align = center style = "" ></td>
								<td align = center style = "" ></td>
								<td align = center style = "" ></td>
							#endinline;
						}
						else
						{
							#inline
								<td align = center style = "" ></td>
								<td align = center style = "" ></td>
							#endinline;
						};
					};
					if( $lsColumns contains "SampleSize" )
					{
						#inline
							<td align = center style = "" ></td>
						#endinline;
					};

					if( $lsColumns contains "COV" )
						"<td align=center style='border-right:1pt solid black;'></td>";

					$nColspan = 0;

					if( $lsColumns contains "GageRR" )
						$nColspan += 1;

					if( $lsColumns contains "PTRatio" )
						$nColspan += 1;

					if( $nColspan > 0 )
					{
						#inline
							<td colspan = <%$nColspan%> align = center style = "border-left:1pt solid black;border-right:1pt solid black;">MSA-VTD</td>
						#endinline;
					};
					break;
				case 3:
					#inline
					<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
						Mean
					</td>
					<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
						St. Dev.
					</td>
					#endinline;
					if( $bShowCP )
					{
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Centered<br>Metric
						</td>
						#endinline;
					};
					if( $lsColumns contains "S" )
					{
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Metric
						</td>
						#endinline;
					};

					if( $lsColumns contains "SampleSize" )
					{
						#inline
						<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
							Sample Size
						</td>
						#endinline;
					};

					if( $lsColumns contains "COV" )
						"<td align=center style='border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;'>COV</td>";

					if( $lsColumns contains "GageRR" )
					{
						#inline
							<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
								Gauge R&R
							</td>
						#endinline;
					};

					if( $lsColumns contains "PTRatio" )
					{
						#inline
							<td align = center style = "border-bottom:1pt solid black;border-left:1pt solid black;border-right:1pt solid black;">
								P/T Ratio
							</td>
						#endinline;
					};
					break;
			};
			break;
	};
}
##===================================================================================================================
## sGetCheckAccessRequest
##
## Converts a privilege name to its apporpriate bCheckAccess request.
##===================================================================================================================
variant SSC_DBObj::sGetCheckAccessRequest( $sPrivName )
{
	$sType = "";
	switch( $sPrivName )
	{
		case "ksPriv_View":
			$sType = "View";
			break;
		case "ksPriv_Modify":
			$sType = "ModifyWOVersion";
			break;
		case "ksPriv_Delete":
			$sType = "Delete";
			break;
		case "ksPriv_ProjAdmin":
		case "ksPriv_GroupAdmin":
		case "ksPriv_ItemAdmin":
		case "ksPriv_PersonAdmin":
			$sType = "Admin";
			break;
		case "ksPriv_CreateSubsystem":
			if( $this.classname == "SSC_Project" )
				$sType = "DefineStructure";
			else
				$sType = "Structure";
			break;
		case "ksPriv_CreateDocument":
			$sType = "Document";
			break;
		case "ksPriv_CreateVOC":
			$sType = "Voice";
			break;
		case "ksPriv_CreateSR":
			$sType = "Requirements";
			break;
		case "ksPriv_CreateRisk":
			$sType = "Risk";
			break;
		case "ksPriv_CreateTest":
			$sType = "Test";
			break;
	};
	return $sType;
}
##===========================================================================
## PageSetup
##===========================================================================
void SSC_DBObj::PageSetup( $sTheme, $bDoctype )
{
	if( Upper( $sTheme ) == "STRICT" )
		PageSetup_Strict();
	else
		super::PageSetup( $sTheme, $bDoctype );
}

##=========================================================================
## PageSetup_Strict
##=========================================================================

#*!***************************************************************************************************
 * <summary>
 * 	Renders the beginning HTML of a page with a strict doctype and documentation styling
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
*****************************************************************************************************#
void SSC_DBObj::PageSetup_Strict()
{
	$sExport = "";
	if ( GetRequest( "sExport" ) != null )
		$sExport = GetRequest( "sExport" );
	$bExporting = ( $sExport != "" ? true : false );

	$bEditable = bIsEditable();

	$bPageToCrawl = GetRequest( "bPageToCrawl" );
	if( $bPageToCrawl == NULL )
		$bPageToCrawl = false;

	if ( $sExport != "Archiving" And $sExport != "Review" )
	{
		#inline
		<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
		<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office"
				xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">
		<head>
			<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
			<meta http-equiv="Content-Encoding" value="utf-8"/>
			<meta name="ProgId" content="Word.Document">
		#endinline;
		if(NOT $bExporting){
		#inline
			<%::headContentForAllPages()%>
			<script type="text/javascript" src="scripts/jquery.calendarlite.min.js"></script>
			<link type="text/css" rel="stylesheet" href="Styles/calendarlite.css" />
			<script type="text/javascript" src="scripts/StickyTableHeaders.js"></script>
		#endinline;
		};
		if( $sExport != "Diff" )
		{
			#inline
			<meta http-equiv="Last-Modified" content="<%format( *.dtModified, "ddd, DD MMM YYYY HH:MM:SS" )%>"/>
			<title><%$this.sGetData( "sDescription" )%></title>
			#endinline;
		};

		if( $bPageToCrawl )
		{
			#inline
			<meta name="EKey" content="<%sGetEKey()%>"/>
			#endinline;

			$oParent = oGetProject();
			if ( $oParent.IsValid )
			{
				#inline
					<meta name="ParentEKey" content="<%$oParent.sGetEKey()%>"/>
				#endinline;
			};

			#inline
			<meta name="ZOOMCATEGORY" content="DBOBJ" />
			<meta http-equiv="Last-Modified" content="<%format( *.dtModified, "ddd, DD MMM YYYY HH:MM:SS" )%>"/>
			#endinline;
		};

		#inline
			<!--[if mso]>
			<xml>
				<w:WordDocument>
					<w:View>Print</w:View>
					<w:Zoom>80</w:Zoom>
				</w:WordDocument>
			</xml>
			<![endif]-->
			<style type="text/css">
				html
				{
					overflow-x:normal;
				}
				body
				{
					padding-right:.1in;
				}
			</style>
		#endinline;
	};

	GetHeadCSSContent( "Documentation" );
	if ( NOT $bExporting ) {
		#inline
				<style media='print'> .noprint{	display:none; }	</style>
				<script type="text/javascript" >
					function oGetTop()
					{
						var oTop = top;
						if ( oTop.opener && !oTop.opener.closed )
							oTop = oTop.opener.top;
						return oTop;
					};
				</script>
				#endinline;
				if( NOT $bPageToCrawl )
				{
					GetHeadJavascriptContent( "Documentation", true, true );
				};
	};

	if ( $sExport != "Archiving" And $sExport != "Review" )
	{
		#inline
		</head>
		#endinline;
	};
}
##===================================================================================================================
## GetPrivilegeSection
##
## Draws a privilege page.
##===================================================================================================================
void SSC_DBObj::GetPrivilegeSection()
{
	$bPrivilegedByProj = false;

	if ( bIsPrivilegedByProject() )
		$bPrivilegedByProj = true;

	if( *.classname == "SSC_Category" )
		$oThis = *.oGetPrimaryGroup();
	else
		$oThis= *.oGetPrivilegingObj();

	SetThreadContext( "oParent", $oThis );

	$bIsAdmin = $oThis.bCheckAccess( "ADMIN" );

	if( NOT $bIsAdmin )
		SetRequest( "bReadOnly", "true" );

	$bUseStandard = false;

	$lsPrivileges = $oThis.tvsPrivilegeNames();

	if( IsEmpty( $lsPrivileges ) )
		$bUseStandard = true;

	if( $bPrivilegedByProj )
	{
		if( $this.classname == "SSC_Project" )
			$oProject = $this;
		else
			$oProject = ::oProjectCurrentlyBeingViewed();

		if( $oProject != NULL AND $oProject != NULLOBJECT )
		{
			## save the project team and project team members on contexts
			$oTeam = $oProject.oProjectManager.oTeam;
			SetThreadContext( "oTeam", $oTeam );
		};
	};

	## build the privilege access map
	$msiPrivs = msiGetPrivilegeHolders();
	SetDaoContext( "AccessRightsMap", $msiPrivs );

	$bAdmin = bCheckAccess( "ADMIN" );

	if( $bAdmin )
	{
		if( $oThis.classname == "SSC_Project"  )
			$sEditParams = "All";
		else if( $oThis.classname == "SSC_Group" )
			$sEditParams = "Add";
		else if( $oThis.classname == "SSC_SystemOrg" )
			$sEditParams = "Add";
		##Documents and Apps can now add new users or groups to the privilege table
		else if( ( $oThis.classname == "SSC_ExtDocument" And Not $oThis.bProjectDocument()) OR ( $oThis KindOf "SSC_ExternalAppObj" ) )
			$sEditParams = "Add";
		else
			$sEditParams = "None";
	}
	else
		$sEditParams = "None";

	$sFormat =  "Privileges";
	if( $bUseStandard )
		$sFormat = "Standard";

	$sPlugins = "Menu;sMenu='PrivilegeMenu'";
	if( $bUseStandard )
		$sPlugins = "Menu;sMenu='TableMenu'";

	##draw the table
	$oThis.GetFlexTable( "PrivilegeHolders", "table", $sFormat,"text-align:left", "","","default","Privilege", $sEditParams, $sPlugins);

	SetThreadContext( "oTeam", NULL );
	SetThreadContext( "oParent", NULL );

}
##===========================================================================
## lsGroupDefList_Builtin
##
## Display text;bCountGroups|sCollationName or groupDef|...|sCollationName or groupDef
## groupDef = display text:sGetData request:type
##===========================================================================
variant SSC_DBObj::lsGroupDefList_Builtin( $sRequest, $oParent )
{
	$lsRetval = CList();
	switch($sRequest)
	{
		case "Voices":
			$lsRetval << "By Modified Date;byLastModifiedDate";
			$lsRetval << "By Modified Date and Importance;byModifiedDateAndNImportance";
			$lsRetval << "By Importance and Modified Date;byNImportanceAndModifiedDate";
			$lsRetval << "By Importance;byNImportance";
			$lsRetval << "By Workflow State;byWorkflowStatus";
			$lsRetval << "By Version State;byVersionStatus";
			$lsRetval << "By Markup Comment;byMarkupComment";
			return $lsRetval;
			break;
		case "Requirements":
			$lsRetval << "By Workflow State;byWorkflowStatus";
			$lsRetval << "By Target Satisfaction;bySatisfaction";
			$lsRetval << "By Last Modified Date;byLastModifiedDate";
			$lsRetval << "By Change Notices;byChangeNotices";
			$lsRetval << "By Version State;byVersionStatus";

			if( $oParent.classname == "SSC_SubSystem" OR $oParent.classname == "SSC_Category" )
			{
				$lsRetval << "By Folder;byFolder";
				$lsRetval << "By Owner;byOwner";
			};
			$lsRetval << "By Markup Comment;byMarkupComment";
			return $lsRetval;
			break;
		case "SurveyResults":
			$lsRetval << "Survey Results;bySurveyResults";
			return $lsRetval;
			break;
		case "ActionItems":
			$lsRetval << "By Status;byStatus";
			$lsRetval << "By Due Date;byDueDate";
			$lsRetval << "By Effort;byEffort";
			$lsRetval << "By Person;byAssignee";
			$lsRetval << "By Person and Due Date;byPersonAndDueDate";
			$lsRetval << "By Person and Effort;byPersonAndEffort";
			$lsRetval << "By Person and Importance;byPersonAndSImportance";
			$lsRetval << "By Due Date and Person;byDueDateAndPerson";
			$lsRetval << "By Due Date and Effort;byDueDateAndEffort";
			$lsRetval << "By Due Date and Importance;byDueDateAndSImportance";
			$lsRetval << "By Effort and Due Date;byEffortAndDueDate";
			$lsRetval << "By Effort and Importance;byEffortAndSImportance";
			$lsRetval << "By Effort and Person;byEffortAndPerson";
			$lsRetval << "By Importance;bySImportance";
			$lsRetval << "By Importance and Due Date;bySImportanceAndDueDate";
			$lsRetval << "By Importance and Effort;bySImportanceAndEffort";
			$lsRetval << "By Importance and Person;bySImportanceAndPerson";
			$lsRetval << "By Status and Due Date;byStatusAndDueDate";
			$lsRetval << "By Status and Effort;byStatusAndEffort";
			$lsRetval << "By Status and Person;byStatusAndPerson";
			$lsRetval << "By Status and Importance;byStatusAndImportance";
			$lsRetval << "By Project;byProject";
			break;
		case "Meetings":
			$lsRetval << "By Name;byName";
			$lsRetval << "By Called-by;byCalledBy";
			$lsRetval << "By Where;byLocation";
			$lsRetval << "By When;byWhen";
			$lsRetval << "By Status;byStatus";
			break;
		case "Sections":
		case "Groups":
		case "Tests":
		case "Folders":
		case "Directories":
		case "Documents":
		case "Breakdowns":
		case "Risks":
			$lsRetval << "By Modified Date;byLastModifiedDate";
			$lsRetval << "By Workflow State;byWorkflowStatus";
			$lsRetval << "By Version State;byVersionStatus";
			$lsRetval << "By Owner;byOwner";
			$lsRetval << "By Markup Comment;byMarkupComment";
			break;
		case "Notes":
			$lsRetval << "By Date;byCreatedDate";
			$lsRetval << "By Person;byChanger";
			$lsRetval << "By Item;byChangedItem";
			$lsRetval << "By Date and Item;byCreatedDateAndChangedItem";
			break;
		case "People":
		case "UserGroups":
			break;
		case "Reviews":
			$lsRetval << "By Modified Date;byLastModifiedDate";
			$lsRetval << "By Markup Comment;byMarkupComment";
			$lsRetval << "By Owner;byOwner";
			$lsRetval << "By Workflow State;byWorkflowStatus";
			return $lsRetval;
			break;
		default:
			$lsRetval << "By Modified Date;byLastModifiedDate";
			$lsRetval << "By Version State;byVersionStatus";
			$lsRetval << "By Markup Comment;byMarkupComment";
			return $lsRetval;
			break;
	};##switch
	return $lsRetval;
}
##===========================================================================
## GetCollation
##
## Purpose: To handle named collations, so instead of having to write "true|byDescription|byImportance" you can
## just have "byDescriptionAndImportance"
##===========================================================================
variant SSC_DBObj::GetCollation_Builtin( $sRequest )
{
	$sRetval = "";
	switch( $sRequest )
	{
		case "byModifiedDateAndNImportance":
			$sRetval = "true|byLastModifiedDate|byNImportance";
			break;
		case "byNImportanceAndModifiedDate":
			$sRetval = "false|byNImportance|byLastModifiedDate";
			break;
		case "byNImportance":
			$sRetval = "true|byNImportance";
			break;
		case "bySatisfaction":
			$sRetval = "true|bySatisfaction";
			break;
		case "byChangeNotices":
			$sRetval = "true|byChangeNotices";
			break;
		case "byFolder":
			$sRetval = "true|byFolder";
			break;
		case "bySurveyResults":
			$sRetval = "true|byTopic|byPrompt|byInput";
			break;
		case "byStatus":
			$sRetval = "true|byStatus";
			break;
		case "byDueDate":
			$sRetval = "true|byDueDate";
			break;
		case "byEffort":
			$sRetval = "true|byEffort";
			break;
		case "byPerson":
		case "byAssignee":
			$sRetval = "true|byAssignee";
			break;
		case "byPersonAndDueDate":
			$sRetval = "true|byAssignee|byDueDate";
			break;
		case "byPersonAndEffort":
			$sRetval = "true|byAssignee|byEffort";
			break;
		case "byPersonAndSImportance":
			$sRetval = "true|byAssignee|bySImportance";
			break;
		case "byDueDateAndPerson":
			$sRetval = "true|byDueDate|byAssignee";
			break;
		case "byDueDateAndEffort":
			$sRetval = "true|byDueDate|byEffort";
			break;
		case "byDueDateAndSImportance":
			$sRetval = "true|byDueDate|bySImportance";
			break;
		case "byEffortAndDueDate":
			$sRetval = "true|byEffort|byDueDate";
			break;
		case "byEffortAndSImportance":
			$sRetval = "true|byEffort|bySImportance";
			break;
		case "byEffortAndPerson":
			$sRetval = "true|byEffort|byAssignee";
			break;
		case "bySImportance":
			$sRetval = "true|bySImportance";
			break;
		case "bySImportanceAndDueDate":
			$sRetval = "true|bySImportance|byDueDate";
			break;
		case "bySImportanceAndEffort":
			$sRetval = "true|bySImportance|byEffort";
			break;
		case "bySImportanceAndPerson":
			$sRetval = "true|bySImportance|byAssignee";
			break;
		case "byStatusAndDueDate":
			$sRetval = "true|byStatus|byDueDate";
			break;
		case "byStatusAndEffort":
			$sRetval = "true|byStatus|byEffort";
			break;
		case "byStatusAndPerson":
			$sRetval = "true|byStatus|byAssignee";
			break;
		case "byStatusAndImportance":
			$sRetval = "true|byStatus|bySImportance";
			break;
		case "byName":
			$sRetval = "true|byDescription";
			break;
		case "byCalledBy":
			$sRetval = "true|byCalledBy";
			break;
		case "byLocation":
			$sRetval = "true|byLocation";
			break;
		case "byWhen":
			$sRetval = "true|byWhen";
			break;
		case "byStatus":
			$sRetval = "true|byStatus";
			break;
		case "byCreatedDate":
			$sRetval = "true|byCreatedDate";
			break;
		case "byChangedItem":
			$sRetval = "true|byChangedItem";
			break;
		case "byChanger":
			$sRetval = "true|byChanger";
			break;
		case "byCreatedDateAndChangedItem":
			$sRetval = "true|byCreatedDate|byChangedItem";
			break;
		case "byLastModifiedDate":
			$sRetval = "true|byLastModifiedDate";
			break;
		case "byWorkflowStatus":
			$sRetval = "true|byWorkflowStatus";
			break;
		case "byVersionStatus":
			$sRetval = "true|byVersionStatus";
			break;
		case "byProject":
			$sRetval = "true|byProject";
			break;
		case "byOwner":
			$sRetval = "true|byOwner";
			break;
		case "byMarkupComment":
			$sRetval = "true|byMarkupComment";
			break;
		default:
			## for cases where the request IS the encoding we wish to return
			$sRetval = super::GetCollation_Builtin( $sRequest );
			break;
	};
	return $sRetval;
}
##===========================================================================
## GetCollationEncoding
##
## Purpose: To allow for the pieces of an encoding to be named instead of having to write the whole
## encoding in the code. For example, a user can put "byDescription" in the encoding instead of " :sDescription:string".
##===========================================================================
variant SSC_DBObj::GetCollationEncoding( $sRequest )
{
	$sRetval = "";
	switch($sRequest)
	{
		case "byDescription":
			$sRetval = " :sDescription:string";
			break;
		case "byNImportance":
			$sRetval = "Importance of :sImportance:int";
			break
		case "bySImportance":
			$sRetval = "Priority of :sImportance:string";
			break
		case "byLastModifiedDate":
			$sRetval = "Modified :sModifiedDateAndTime_formatted:string";
			break;
		case "byCreatedDate":
			$sRetval = "Changed :sDateCreated_formatted:string";
			break;
		case "byChangedItem":
			$sRetval = ":sObject:string";
			break;
		case "byProject":
			$sRetval = " :sProjectName:string";
			break;
		case "byTopic":
			$sRetval = " :sTopic:string";
			break;
		case "byPrompt":
			$sRetval = " :sPrompt:string";
			break;
		case "byInput":
			$sRetval = " :sInput:string";
			break;
		case "byAssignee":
			$sRetval = "Assigned to :sAssignee:string";
			break;
		case "byDueDate":
			$sRetval = "Due :dtDueDate_formatted:string";
			break;
		case "byEffort":
			$sRetval = "Effort of :sEffort:string";
			break;
		case "byStatus":
			$sRetval = "Status of :sStatus:string";
			break;
		case "byOwner":
			$sRetval = "Owned by :sOwner:string";
			break;
		case "byChanger":
			$sRetval = "Changed by:sOwner:string";
			break;
		case "byCalledBy":
			$sRetval = "Called by :sOwner:string";
			break;
		case "byLocation":
			$sRetval = "Held in :sLocation:string";
			break;
		case "byWhen":
			$sRetval = "Start time :dtPlannedStart:string";
			break;
		case "byWorkflowStatus":

			## FOR MARKETING PURPOSES
			if ( GetDaoContext( "bChangeLoggingDemoOn" ) == true )
				$sRetval = " :sUDA_Workflow State:string";
			else
				$sRetval = " :sWorkflowState:string";
			break;

		case "bySatisfaction":
			$sRetval = " :sSatisfactionStatus:string";
			break;
		case "byChangeNotices":
			$sRetval = " :sStability:string";
			break;
		case "byApproval":
			$sRetval = " :sApprovalState:string";
			break;
		case "byObject":
			$sRetval = " :sDescription:Object";
			break;
		case "byFolder":
			$sRetval = " :sFolder:string";
			break;
		case "byVersionStatus":
			$sRetval = " :sState:string";
			break;
		case "byMarkupComment":
			$sRetval = " :sMarkupComment:multiAnd";
			break;
		default:
			$sRetval = super::GetCollationEncoding( $sRequest );
			break;
	};
	return $sRetval;
}
##===========================================================================
## GetFilter_Builtin
##===========================================================================
variant SSC_DBObj::GetFilter_Builtin( $sRequest )
{
	$sSubRequest = "";
	$sOriginalRequest = $sRequest;

	if( find( $sRequest, ":" ) != -1 )
	{
		$sSubRequest = Item( $sOriginalRequest, 2, Itemcount( $sOriginalRequest, ":" ), ":" );
		$sRequest = Item( $sOriginalRequest, 1, 1, ":" );
	};

	$lsRetval = CList();
	switch( $sRequest )
	{
		default:
			$lsRetval << super::GetFilter_Builtin( $sOriginalRequest );
			break;
	};
	return $lsRetval;
}
##===========================================================================
## GetSort_Builtin
##===========================================================================
variant SSC_DBObj::GetSort_Builtin( $sRequest )
{
	$sRetval = "";
	switch($sRequest)
	{
		case "sObject":

			$sRetval = "sObject" +  EOI + "S" + EOI + false;
			break;

		case "Timestamp":

			$sRetval = "sTimestamp" +  EOI + "N" + EOI + true;
			break;

		default:
			$sRetval = super::GetSort_Builtin( $sRequest );
			break;
	};
	return $sRetval;
}
##===========================================================================
## lsGetSortDefList_Builtin
##===========================================================================
variant SSC_DBObj::lsGetSortDefList_Builtin( $sRequest )
{
	$lsRetval = CList();
	switch($sRequest)
	{
		case "Notes":

			$lsRetval << "By Item|sObject";
			$lsRetval << "By Timestamp|Timestamp";
			break;

		default:
			$lsRetval << super::lsGetSortDefList_Builtin( $sRequest );
			break;
	};
	return $lsRetval;
}
##===========================================================================
## lsGetThemeList_Builtin
##===========================================================================
variant SSC_DBObj::lsGetThemeList_Builtin( $sRequest )
{
	$lsRetval = CList();
	switch($sRequest)
	{
		case "Requirements":
		case "Voices":
			$lsRetval << "Default Theme|default";
			break;
		case "AllVOC":
		case "AllReqs":
			$lsRetval << "Default Theme|Linker";
			break;
		default:
			$lsRetval << super::lsGetThemeList_Builtin( $sRequest );
			break;
	};
	return $lsRetval;
}

variant SSC_DBObj::sGetModTipsMarkup( $sContext )
{
	## if the context is TOC, just stop
	$bSinceLastCP = ::bModTipsSinceCheckpoint();
	if ( lower( $sContext ) == "toc" And $bSinceLastCP ) return "";

	## check for inline
	$bSkipNum = ::bModTipsAuditsInline();

	$sResult = "";
	$nChanges = CInt( sGetData( "NumberOfChanges" ) );

	if ( $bSkipNum )
		$sChar = "&#10026;";  ## 10026 - star in cicle 10687 - target with solid center
	else if ( $nChanges > 10 )
		$sChar = "&#9678";
	else
		$sChar = "&#" + (9311 + $nChanges );

	if ( $nChanges > 0 )
	{
		$sTagTitle = htmlencode( "you have changes" );

		## some extra attibutes can be added to help with processing information
		$sCR = ::bModTipsInActiveCR() ? "bInCR=true" : "";
		$sStart = "";
		if ( $bSinceLastCP ) {
			$sStart = $dao.Context.Get( "sModTipsDateRangeStart" );
		};

		$sResult = "<span class='HelpTip' sHelpId='sModTips' sRef='" + Ref + "' " + $sCR + $sStart + " style='cursor:pointer;font-weight:normal; COLOR: #ff0000; FONT-SIZE: 10pt'>&nbsp" + $sChar + "</span>";
	};
	return $sResult;
}

##===========================================================================
## sGetMarkupDecorations
##===========================================================================
variant SSC_DBObj::sGetMarkupDecorations( $sContext )
{
	$bExport = GetRequest( "sExport" ) != NULL? true:false;
	$sDelim = "";
	$sTagImages = "";
	$sStyle = "";
	$sTitle = "";
	$sSTRef = "";
	$sHLRef = "";

	## First check for context
	$loMarkups = $this.Context.Get("loMarkups", Lifespan.Session);

	## If we got a value, we need to make sure it is still valid
	if ($loMarkups != NULL)
	{
		## Get the latest markup modification date
		$oProjectMgr = oGetProjectManager();
		## Got directly to the map since NO CR is involved
		$msData = $oProjectMgr.msaData;
		$dtMarkupModified = pick( $msData, "dtMarkupModified" );
		##$dtMarkupModified = $oProjectMgr.vGetMapValue("DT","dtMarkupModified");
		if ($dtMarkupModified != NULL) {
			$dtMarkupCacheDate = $this.Context.Get("dtMarkupCacheDate", Lifespan.Session);
			## If modified date is newer we need to update the cache result
			if ($dtMarkupModified > $dtMarkupCacheDate) $loMarkups = NULL;
		};
	};
	if ($loMarkups == NULL)
	{

		$loMarkups = CList();
		##$debug = true;
		try
		{
			$loMarkups = loGetObjects( "Markups", "Mine" );
			## Cache the result and the date of the cache
			$this.Context.Set("loMarkups", $loMarkups, Lifespan.Session);
			$this.Context.Set("dtMarkupCacheDate", Now(), Lifespan.Session);
		}
		catch( $err )
		{
			##trace( $err );
		};
	};

	if (Count($loMarkups) > 0)
	{
		$sThemeFolder = ::sGetThemeFolder();

		$loMarkups/
		{
			$oCurr = *;
			switch( iType )
			{
				case 1:
					$sSTRef = "sSTRef='" + Ref + "' ";
					$sStyle += "color:red; text-decoration:line-through;";
					$sTitle += $sDelim + htmlencode(sText) + " - (" + sCreator + " on " + dtCreated + ")";
					$sDelim = "&#10;";
					break;
				case 2:
					$sHLRef += "sHLRef='" + Ref + "' ";
					$sStyle += "background-color:" + ::sGetColor( iHighliteColor ) + ";";
					$sTitle += $sDelim + htmlencode(sText) + " - (" + sCreator + " on " + dtCreated + ")";
					$sDelim = "&#10;";
					break;
				case 3:
					if( NOT $bExport )
					{
						$sTagTitle = htmlencode(sText) + " - (" + sCreator + " on " + dtCreated + ")";
						switch( $sContext )
						{
							case "body":
								$sTagImages += "<img bTag=true class='MarkUpImage' sRequest=" + $this.Ref + " sRef='" + $oCurr.Ref +  " '
								style='margin-top:-.025in;margin-left:3px' src='Images/" + $sThemeFolder + "/calloutIcons/" + iIcon + ".png'" +
								"Title=""" + $sTagTitle + """ />";
							break;
							default:
								$sTagImages += "<img bTag=true class='MarkUpImage' sRequest=" + $this.Ref + " sRef='" + $oCurr.Ref +  " '
								style='width:14px;height:14px;margin-left:3px' src='Images/" + $sThemeFolder + "/calloutIcons/" + iIcon + ".png'" +
								"align=absmiddle Title=""" + $sTagTitle + """ />";
						};
					};
					break;
				default:
			};
		};
	};

## COMMENTED out because in the end, it seemed too busy in the toc. Will check with Dale and David.
##  Maybe these are too noisy
##	$sState = sGetData( "sWorkflowState" );
##	if ( $sState != "" and NOT $bExport )
##	{
##		$sImgSrc = "Images/" + $sState + ".gif";
##		$sTagImages += "<" + "img title='" + $sState + "' ";
##		$sTagImages += "style='width:12px;height:12px;MARGIN-LEFT: 3px' src='" + $sImgSrc + "'" + ">";
##	};

	## add workflow icon when state tips are on
	if ( Not $bExport And ::bModTipsOn() )
		$sTagImages += sGetModTipsMarkup( $sContext );

	## add workflow icon when state tips are on
	$bStateTipsOn = GetDaoContext("bStateTipsOn");
	if ( Not $bExport And $bStateTipsOn )
	{
		## check that this has a valid workflow state
		$sState = sStatus;
		if ( $sState != "" )
		{
			$oState = oGetWorkflowState();
			$sStateIcon = "";
			if ( $oState != NULLOBJECT )
				$sStateIcon = $oState.sIconToUse;

			if ( $sStateIcon != "" )
			{
				##make sure we look in the images theme directory if no path
				$sStateIcon = ::resolveIconPath( $sStateIcon );
				$sTagTitle = htmlencode( $oState.sDescription );
				switch( $sContext )
				{
				case "body":
					$sTagImages += "<img bTag=true class='MarkUpImage' sRequest=" + $this.Ref + " sRef='" + $this.Ref +  " '
					style='margin-top:-.025in;margin-left:3px' src='" + $sStateIcon + "'" +
					" Title=""" + $sTagTitle + """ />";
				break;
				default:
					$sTagImages += "<img bTag=true class='MarkUpImage' sRequest=" + $this.Ref + " sRef='" + $this.Ref +  " '
					style='width:14px;height:14px;margin-left:3px;' src='" + $sStateIcon + "'" +
					" align=absmiddle Title=""" + $sTagTitle + """ />";
				};
			};
		};
	};

	## handle strike through regardless of change control support
	if ( Not $bExport )
	{
		## check if this is a CR clone
		$bDeleted = bIsPseudoDeleted();

		## add strike-through
		if ( $bDeleted )
			$sStyle += "color:red; text-decoration:line-through;";

		## add change request markups if this supports them
		if ( $this.bSupportsChangeControl() And GetRequest( "bHideCRTag" ) == null )
		{

			## check if there is any CR lock data
			$sCRNumbers = $this.sGetCRNumbers();

			if ( $sCRNumbers != "" )
			{
				## get tag title
				$sTagTitle = htmlencode( $sCRNumbers );
				switch( $sContext )
				{
					case "body":
						$sTagImages += "<img bTag=true class='MarkUpImage' sRequest=" + $this.Ref + " sRef='" + $this.Ref +  " '
						style='margin-top:-.025in;margin-left:3px' src='Images/" + $sThemeFolder + "/comment.png'" +
						"Title=""" + $sTagTitle + """ />";
					break;
					default:
						$sTagImages += "<img bTag=true class='MarkUpImage' sRequest=" + $this.Ref + " sRef='" + $this.Ref +  " '
						style='width:14px;height:14px;margin-left:3px;' src='Images/" + $sThemeFolder + "/comment.png'" +
						"align=absmiddle Title=""" + $sTagTitle + """ />";
				};
			};
		};
	};

	## look for custom tags
	if( NOT $bExport )
	{
		$oTagUDR = oGetAseBMItem( "AseData", "sUDR_CustomMarkups" );
		if ( $oTagUDR != nullobject )
		{
			## evaluate the code
			$sResponse = "";
			try
			{
				## read the code and evaluate it
				$sGetCode = $oTagUDR.sGetCode;
				Eval( $sGetCode );
			} catch( $err ) {
				$sResponse = "";
			};

			if ( $sResponse != "" )
				$sTagImages += $sResponse;

		};
	};

	$sRefs = $sSTRef + $sHLRef;
	##if( $sStyle != "" )
	##	$sStyle = "style='" + $sStyle + "' ";
	if( $sTitle != "" )
		$sTitle = "title='" + $sTitle + "' ";

	$sSnippetToShow = "sMarkupImages";
	##span to enclose all markup images so they can be reloaded properly
	$sMarkupSpan = "<span id='" + Ref + "' sRef='" + Ref + "' sItem='" + $sSnippetToShow + "' subscription='" + Ref + "~onMarkupChange~'>";
	$sTagImages = $sMarkupSpan + $sTagImages + "</span>";

	return $sRefs + eoi + $sStyle + eoi + $sTitle + eoi + $sTagImages;
}
##===========================================================================
## lsGetMenuItems_BuiltIn
## $sRequest|$sDisplay Name where $sRequest = the request sent to loGetObjects
##===========================================================================
variant SSC_DBObj::lsGetMenuItems_BuiltIn()
{
	$lsMenus = CList();

	$lsMenus << "Home|Home";

	if( bShowPage( "Details" ) )
		$lsMenus << "Details|Details";

	if( bShowPage( "Notes" ) )
		$lsMenus << "Notes|Notebook";

	if( bShowPage( "ActionItems" ) )
		$lsMenus << "ActionItems|Action Items";

	if( bShowPage( "Traceability" ) )
		$lsMenus << "Traceability|Traceability";

	if( bShowPage( "Reports" ) )
		$lsMenus << "Reports|Reports";

	if( bShowPage( "Attachments" ) )
		$lsMenus << "Attachments|Attachments";

	if( bShowPage( "History" ) )
		$lsMenus << "History|History";

	return $lsMenus;
}
##===========================================================================
## loGetObjects
##===========================================================================
variant SSC_DBObj::loGetObjects_Builtin( $sRequest, $sScope )
{
	$loMembers = CList();

	## Note that if the request is blank (all filters are turned off) then
	## return back  the empty list as long as the scope is not TOC or Tree
	if( $sRequest == "" and ( $sScope != "TOC" AND $sScope != "Tree" ) )
		return $loMembers;

	switch( $sScope )
	{
		case "TOC":
		case "HOQ":
		case "KJ":
		case "Search":
			$sScope = "Tree";
			break;
		case "TargetParents":
		case "TargetChildren":
			$loDerivatives = CList();
			$loDerivatives << loGetObjects( "TargetObjects", "Dynamic" );
			$sScope = SubStr( $sScope, 6 );
			$loDerivatives/ {
				$loMembers << loGetObjects( $sRequest, $sScope );
			};
			return $loMembers;
		case "SrcParents":
		case "SrcChildren":
			$sScope = SubStr( $sScope, 3 );
			if ( bReference ) {
				$oObj = oFindMyReference();
				if ( $oObj.isValid )
					$loMembers << $oObj.loGetObjects( $sRequest, $sScope );
			};
			return $loMembers;
		case "AllParents":
		case "AllChildren":
			$sScope = SubStr( $sScope, 3 );
			$loMembers << loGetObjects( $sRequest, "Target" + $sScope );
			$loMembers << loGetObjects( $sRequest, "Src" + $sScope );
		default:
			break;
	};
	##Handle Markups here to optimize decorated text
	if( Lower( $sRequest ) == "markups" )
	{
		$sLowScope = Lower( $sScope );
		if( $sLowScope == "mine" OR $sLowScope == "children" )
			$loMembers << loGetMarkups();
	}
	else if( $sRequest == "Sections" )
		$loMembers << loGetObjects_b( "Folders", $sScope )[ *.classname == "SSC_Category" ][ bIsDocumentSection() ];
	## makes sure we only get normal folders, not sections
	else if( $sRequest == "Folders" )
		$loMembers << loGetObjects_b( "Folders", $sScope )[ *.classname == "SSC_Category" ][ NOT bIsDocumentSection() ];
	else if( $sRequest == "ValidationTests" )
		$loMembers << loGetObjects_b( "Tests", $sScope )[ Lower( sGetData( "bValidate" ) ) == "true" ];
	else if( $sRequest == "VerificationTests" )
		$loMembers << loGetObjects_b( "Tests", $sScope )[ Lower( sGetData( "bVerify" ) ) == "true" ];
	else if( $sRequest == "Process_only" )
		$loMembers << loGetObjects_b( "Processes", $sScope )[ sType == "Process" ];
	else if( $sRequest == "Meetings" )
		$loMembers << loGetObjects_b( "Processes", $sScope )[ sType == "Meeting" ];
	else if( $sRequest == "Breakdowns" )
		$loMembers << loGetObjects_b( "Groups", "Top" );
	else if( Upper( $sRequest ) == "PROECESSTEMPLATES" )
	{
		$loMembers = /'Data Vault 1/'/COG_WorkflowTaskTemplate[ oParent == NULLOBJECT ];
		$loMembers = loAlphaSortByDescription( $loMembers );
	}
	else if ( Upper( $sRequest ) == "DERIVATIVES" )
	{
		## Get the request type that maps to this class
		$lsRequestTypes = ::lsGetRequestTypePossibilities( $this );
		$sRequestType = "";
		if ( Not IsEmpty( $lsRequestTypes ) )
		{
			$sRequestType = Pick( $lsRequestTypes, 0 );
		};

		## Get the project for this object
		$oProject = $this.oGetProject();

		## Get the derivative projects for this project
		$loProjects = CList();
		$loProjects << $oProject.loGetObjects_Builtin( "Projects", "Derivative" );

		## Not currently wanted, but just in case it's wanted later - Recursively add derivative projects (derivative of derivative, etc)
		## $loProjects // { *.loGetObjects_Builtin( "Projects", "Derivative" ) };

		## Get all objects that have the same sName/ID in the derivative projects
		$loProjects/
		{
			$oProject = *;
			$loMembers << $oProject.loGetObjects_Builtin( $sRequestType, "Below" )[ *.className == $this.className ][ *.'sName/ID' == $this.'sName/ID' ];
		};

		## Add the direct clones of the object
		$loMembers << loGetObjects( "TargetObjects", "All" );
	}
	else if (lower(item($sScope,1,1,"_")) == "ns") {
		## get dynamic objects
		$sRelation = "NS," + $sRequest + "," + upper(item($sScope,2,itemcount($sScope,"_"),"_"));
		$loMembers << $this.tcGetRelatedObjects($sRelation);
	}
	else
	{
		$loMembers << super::loGetObjects_Builtin( $sRequest, $sScope );
	};

	return $loMembers;
}

##===========================================================================
## loGetAllObjects
##===========================================================================
variant SSC_DBObj::loGetAllObjects($sScope)
{
	$loRetval = CList();
	$loRetval << loGetObjects_b( "Groups",$sScope );
	$loRetval << loGetObjects_b( "Folders", $sScope );
	$loRetval << loGetObjects_b( "Voices",$sScope );
	$loRetval << loGetObjects_b( "Requirements",$sScope );
	$loRetval << loGetObjects_b( "Risks",$sScope );
	$loRetval << loGetObjects_b( "Mitigations",$sScope );
	$loRetval << loGetObjects_b( "Tests",$sScope );
	$loRetval << loGetObjects_b( "Initiatives",$sScope );
	$loRetval << loGetObjects_b( "ActionItems",$sScope );

	return $loRetval;
}
##===========================================================================
## lsGetPageSections_Builtin
##
## NOTE: display name|prefetched flag|section request|section scope|iType|sFilter|sGrouping|sFormat|Visible when params
## prefetched flag: 0 = not prefetched, 1 = prefetched, 2 = prefetched, but headerless
## iType = 0 (standard) or 1 (table )
##===========================================================================
variant SSC_DBObj::lsGetPageSections_Builtin( $sRequest )
{
	$lsRetval = CList();
	switch($sRequest)
	{
		case "Home":
			$lsRetval << "default";
			$lsRetval << "General|2|General|Child|0||||";
			$lsRetval << "Detailed Description|1|DetailedDescription|Child|0||||";
			break;
		case "Dashboard":
			$lsRetval << "default";
			$lsRetval << "Dashboard|2|Dashboard|Child|0||||";
			break;
		case "Details":
			$lsRetval << "default";
			$lsRetval << "Status|1|Status|Child|0||||";
			$lsRetval << "Roles|1|Roles|Child|0||||";

			$oProject = $this.oGetProject();
			$loRows << $oProject.loGetUDAsByClass( $this.classname );
			if( NOT IsEmpty( $loRows ) )
				$lsRetval << "Custom Values|1|CustomValues|Child|0||||";
			break;
		case "Notes":
			$lsRetval <<"default";
			$lsRetval << "Notebook|1|Notes|Child|0||||";
			break;
		case "ActionItems":
			$lsRetval <<"Strict";
			$lsRetval << "Action Items|1|ActionItems|Child|1||||";
			break;
		case "Attachments":
			$lsRetval <<"default";
			$lsRetval << "Attachments|1|Attachments|Child_Add|1||||";
			break;
		case "History":
			$lsRetval <<"default";
			$lsRetval << "History|1|History|Child|0||||";
			$lsRetval << "Workflow Log|1|WorkflowLog|Child|0||||";

			## only show the audit log if auditing is active
			$iAuditLevel = iAuditLevel();
			if ( $iAuditLevel > 0 )
				$lsRetval << "Audit Log|1|AuditLog|Child|0||||";

            ## Derivative stuff
			$lsRetval << "Derived From|1|DerivedFrom|Child|0||||";
			$lsRetval << "Derivatives|1|Derivatives|Child|0||||";

			break;
		case "Privileges":
			$lsRetval <<"default";

			$sDesc = $this.sGetData( "sQualifiedDescription" );
			$sDesc = Item( $sDesc, 1, 1, eoi );

			$lsRetval << "Access Rights to '" + $sDesc + "'|1|Privileges|Child|0||||";
			break;
		default:
			$lsRetval << super::lsGetPageSections_Builtin( $sRequest );
			break;

	};
	return $lsRetval;
}

##===========================================================================
## GetNotebook
##===========================================================================
void SSC_DBObj::GetNotebook()
{
	$oThis = *;
	$bEditable = bIsEditable( "&sChange=DATA,NOTES" );
	$sThemeFolder = ::sGetThemeFolder();

	## Don't use a doctype on the notebook page because it breaks the background images
	$sTheme = $bEditable ? "default" : "readonly";
	PageSetup( $sThemeFolder, false );

	#inline
	<style type="text/css">
	.notebookBodyDiv
	{
/*		background-position-x:0px;
		backgroung-position-y:25%;
		background: url(Images/<% $sThemeFolder %>/spiral.gif);
		background-repeat:repeat-y;
*/		margin-top:16px;
		height:93%;
		border-top:1px solid #CCCCCC;
		z-index:300999;
	}
	</style>
	<script type="text/javascript" >
		function oGetTop()
		{
			var oTop = top;
			if ( oTop.opener && !oTop.opener.closed )
				oTop = oTop.opener.top;
			return oTop;
		};
	</script>

	<body sRef = '<%$oThis.Ref%>' onload="top.UpdateMenuBar( 'Notes' );this.focus();" onResize='top.setNotebookHeight();' style="position:absolute;">
		<%
			##needed for rich edit fields.
			GetSnippet( "oRichEditMenu" + eoi + $sTheme );
		%>
		<div>
	#endinline;


		$sSectionNames = sGetData( "sNotebookSections" );
		$lsSections = split( $sSectionNames, EOI );
		$sFirst = First( $lsSections );
		SetRequest( "sCurrSection", $sFirst );

		$nZIndex = 300998;
		$nLeft = 0;

		$lsSections/
		{
			$sCurr = *;
			##ALA-- Temporary Fix: renaming a section tacks an extra EOI onto sNotebookSections, and this results in blank section names
			## Here I strip those out until the back end is patched up
			if( $sCurr != "" )
			{
				$bActivate = $iternum == 0;
				$oThis.GetNotebookTab( $sCurr, $nZIndex, $nLeft, $bEditable, $bActivate );
				$nLeft += 110;
				$nZIndex -= 2;
			};
		};

		##tack a new section generator to the end
		#inline
			<div id = "newTabGenerator" scrolling=no>
			<img src = "Images/<% $sThemeFolder %>/skin2_tab_left_inactive.gif" style = "position:absolute;left:<%$nLeft%>px;top:0px;z-index:<%$nZIndex%>;"/>
			<span <%$bEditable? "contentEditable = true" : ""%>  class = "<%$bEditable? "EditableText":"NonEditableText"%>" sRef = <%Ref%> sItem = "NewNotebookSection" sValue = "" sEmptyPrompt='New Section...'
				style = "position:absolute;left:<%$nLeft + 5%>px;top:2px;z-index:<%$nZIndex + 1%>;width:100%;" sPromptColor='black'>
				New Section...
			</span>
			<img src = "Images/<% $sThemeFolder %>/skin2_tab_right_inactive.gif" style = "position:absolute;left:<%$nLeft + 99%>px;top:0px;z-index:<%$nZIndex%>"/>
			</div>
		</div>
		<div class = "notebookBodyDiv" id = 'sectionDiv'>
			<div id = "notebookMainDiv" style = "margin-left:10px;margin-top:15px; height:100%;">
				<%GetSection("Notes");%>
			</div>
		</div>


		<div id = "richEdit_frameDiv" scrolling=no style = "display:none;width:100%;margin-left:-40px;margin-top:15px;">
			<iframe id = "richEdit_frame"  scrolling=no name = "richEdit_frame" frameborder=0 width = 100% height=100% src = "blank.htm"></iframe>
		</div>

		</body>
		<script>
			top.setNotebookHeight();
		</script>
		</html>
		#endinline;
}

##===========================================================================
## GetNotebookTab
##===========================================================================
void SSC_DBObj::GetNotebookTab( $sText, $nZIndex, $nLeft, $bEditable, $bActivate )
{
	$nLeft = CInt($nLeft);
	$nZIndex = CInt($nZIndex);
	$sThemeFolder = ::sGetThemeFolder();

	$sDisplay = $sText;
	$nCharCount = StrLen( $sText );
	if( $nCharCount > 15 )
	{
		$sDisplay = SubStr( $sText, 0, 15 ) + "...";
	};

	#inline
	<div selected=<%$bActivate? "true":"false"%> onclick = "top.closeRichEdit(top.richEditButton); top.toggleNotebookSection('<%Ref%>', this )"
		sValue = "<%$sText%>" nLeft= "<%$nLeft%>" class='NotebookTabDiv'
		nZIndex = "<%$nZIndex%>" >
	<img src = "Images/<% $sThemeFolder %>/skin2_tab_left_<%$bActivate? "active":"inactive"%>.gif" style = "position:absolute;left:<%$nLeft%>px;top:0px;z-index:<%$nZIndex%>;"
		ondragstart='event.cancelBubble=true;' ondrop='event.cancelBubble=true;' ondragleave='event.cancelBubble=true;' />
		<span <%$bEditable? "contentEditable = true" : ""%> title='<%$sText%>' class = "<%$bEditable? "EditableText":"NonEditableText"%>"
			  sRef = <%Ref%> sItem = "sNotebookSection" sValue = "<%$sText%>"
			  style = "position:absolute;left:<%$nLeft + 5%>px;top:2px;z-index:<%$nZIndex + 1%>">
				<%htmlencode( $sDisplay )%>
		</span>

	<img src = "Images/<% $sThemeFolder %>/skin2_tab_right_<%$bActivate? "active":"inactive"%>.gif" style = "position:absolute;left:<%$nLeft + 99%>px;top:0px;z-index:<%$nZIndex%>"/>
	</div>
	#endinline;

}
##===================================================================================================================
## sGetRequestFromTagType
##
##===================================================================================================================
variant SSC_DBObj::sGetRequestFromTagType( $sTag )
{
	return SSC_AppObj::sGetRequestFromTagType( $sTag );
}

#*!***************************************************************************************************
 * <summary>
 * 	Returns the tag type for a given object request
 * </summary>
 * <visibility>
 * 	Advanced
 * </visibility>
 * <param name="$sRequest" type="String">The object request</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetTagTypeFromRequest( $sRequest )
{
	return SSC_AppObj::sGetTagTypeFromRequest( $sRequest );
}


##===================================================================================================================
## sGetClassNameFromTagType
##
##===================================================================================================================
variant SSC_DBObj::sGetClassNameFromTagType( $sTag )
{
	return SSC_AppObj::sGetClassNameFromRequest( SSC_AppObj::sGetRequestFromTagType( $sTag ) );

}
##===================================================================================================================
## sGetClassNameFromRequest
##
##===================================================================================================================
variant SSC_DBObj::sGetClassNameFromRequest( $sRequest )
{
	return SSC_AppObj::sGetClassNameFromRequest( $sRequest );
}
##===================================================================================================================
## sGetTagTypeFromClassName
##
##===================================================================================================================
variant SSC_DBObj::sGetTagTypeFromClassName( $sClass )
{
	return SSC_AppObj::sGetTagTypeFromClassName( $sClass );
}

##===================================================================================================================
## sGetDefaultIconFromClassName
##
##===================================================================================================================
variant SSC_DBObj::sGetDefaultIconFromClassName( $sClass )
{
	return SSC_AppObj::sGetDefaultIconFromClassName( $sClass );
}

##========================================================================
##	GetSearchPage
##
##
##========================================================================
void SSC_DBObj::GetSearchPage()
{
	$bAdvancedSearch = false;
	$oProject = oGetProject();

	$sRequest = GetRequest("sRequest");
	$sTocRequest = GetRequest( "sTocRequest" );

	$sDisplayRequest = $sRequest;

	if($sRequest == "Project")
		$sDisplayRequest = "All";

	$iShowPerPage = GetDaoContext( "iShowPerPagePreference" );
	if ( $iShowPerPage == null )
		$iShowPerPage = 15;

	$oApp = SSC_AppObj::oGet_s();
	$sAppRef = $oApp.Ref;
	$sThemeFolder = ::sGetThemeFolder();

	PageSetup("default",false);
	#inline
	<style type="text/css">
		.MarkUpLink
		{
			font-size:8pt;
			font-family:verdana;
		}
	</style>
	<%GetHeadJavascriptContent("Search" )%>
	<script type="text/javascript">
		var bAdvancedSearch = <%$bAdvancedSearch?"true":"false"%>;
		function SwitchSearch()
		{
			//Find and then switch visibility for Advanced and Simple search elements
			var aAdvSearch = top.getElementsByClassName(document, "*", "AdvSearch")
			var aSimpleSearch = top.getElementsByClassName(document, "*", "SimpleSearch")
			for( var i in aAdvSearch )
			{
				var elem = aAdvSearch[i];
				if (elem && elem.style) {
					elem.style.display = bAdvancedSearch ? 'none' : '';
				}
			}
			for( var i in aSimpleSearch )
			{
				var elem = aSimpleSearch[i];
				if (elem && elem.style) {
					elem.style.display = bAdvancedSearch ? '' : 'none';
				}
			}


			//Remember switched state.
			bAdvancedSearch = bAdvancedSearch ? false : true;
			top.searchMasterDiv.setAttribute("bAdvancedSearch", bAdvancedSearch);

			// After switching to Advanced Search run the search command to rerun the custom prompt
			if (bAdvancedSearch)
				top.Search(top.searchMasterDiv, null);
			else
				document.getElementById( "linkerframe" ).src = "blank.htm";
		}
	</script>
	<body>
	<div style = "margin-right:10px;">
	<table style="empty-cells: show; layout:fixed; width:100%;font-family:verdana;font-size:8pt;" align = center vAlign="top">
		<tr>
			<td colspan=4 align=center style="width:90%">
				<img onclick="top.CloseSearch();" src="images/<% $sThemeFolder %>/CloseRed.png" title = "Close" style = "float:right; cursor:pointer;"/>
				<br>
				<span class="SimpleSearch" >Find</span><span class="AdvSearch" style="display: none;">Find</span>
				<span onclick = "top.objectSelect = this; top.attributeSelect = getElementById('Search_SelectAttribute'); top.searchMasterDiv = getElementById('searchMasterDiv');"
					 oncontextmenu = "top.objectSelect = this; top.attributeSelect = getElementById('Search_SelectAttribute'); top.searchMasterDiv = getElementById('searchMasterDiv');"
				id = "Search_SelectObject" class=MarkUpLink sShowingWhat="Search_SelectObject" sHelpId="Search_What" sRef='<%$sAppRef%>' >
				<%$sDisplayRequest%></span>
				<span id='reqType' style='display:<% $sDisplayRequest == "Requirements" ? "inline":"none"%>;'>
				of type
				<span onclick = "top.reqTypeSelect = this; top.searchMasterDiv = getElementById('searchMasterDiv');"
					  oncontextmenu = "top.reqTypeSelect = this; top.searchMasterDiv = getElementById('searchMasterDiv');" sRef='<%$sAppRef%>'
					id = "Search_SelectReqType" class=MarkUpLink sShowingWhat="Search_SelectReqType" sHelpId="Search_Requirement_Type">
				All</span>
				</span>
				<span id='ProjectControl' style='display:<% $sDisplayRequest == "Projects" ? "none":"inline"%>;'>
				in
				<span onclick = "top.searchMasterDiv = getElementById('searchMasterDiv'); top.projectSelect = this;"
					oncontextmenu = "top.searchMasterDiv = getElementById('searchMasterDiv'); top.projectSelect = this;" sRef='<%$sAppRef%>'
				id = "Search_SelectProject" class=MarkUpLink  sShowingWhat="Search_SelectProject" sRequest = '<%$sRequest%>' sHelpId="Search_Where">
				<%$oProject.sDescription%></span>
				</span>

			</td>
		</tr>
		<tr>
			<td align=center colspan=4>
			<span style="float:right;">
				#endinline;
				if ( ::sGetSearchMode() != "Classic" )
				{
					#inline
					<span class="fakelink" sUrl="SearchLight.ase" onclick="top.OpenGenericSlider(this);" >Advanced</span>
					#endinline;
				};
				#inline
				<span class="SimpleSearch ActionLink" onclick="top.searchMasterDiv = getElementById('searchMasterDiv');SwitchSearch();" >
					Custom</span>
					<span class="AdvSearch ActionLink"
					onclick="top.searchMasterDiv = getElementById('searchMasterDiv');SwitchSearch();"
					style="display: none;">Classic</span>
			</span>
			</td>
		</tr>
		<tr>
			<td align=center colspan=4>
				<hr style="color:#666666;height:1px;" >
			</td>
		</tr>
		<tr>
			<td style="text-align:center;" colspan=4>

				<span class="SimpleSearch" >with</span><span class="AdvSearch" style="display: none;"></span>
				<span onclick = "top.searchMasterDiv = getElementById('searchMasterDiv'); top.attributeSelect = this;" sRef='<%$sAppRef%>'
				oncontextmenu = "top.searchMasterDiv = getElementById('searchMasterDiv'); top.attributeSelect = this;" id = "Search_SelectAttribute"
				class="MarkUpLink SimpleSearch" sShowingWhat="Search_SelectAttribute"  sRequest = '<%$sRequest%>'  sHelpId="Search_How">Description</span>
				<span class="SimpleSearch" >like</span>
				<span onclick = "top.searchMasterDiv = getElementById('searchMasterDiv');"
				oncontextmenu = "top.searchMasterDiv = getElementById('searchMasterDiv');" id = "Search_Custom" sRef='<%$sAppRef%>'
				class="MarkUpLink AdvSearch" sShowingWhat="Search_Custom"  sRequest = '<%$sRequest%>' sQuery = ''  sHelpId="Search_Custom" style="display: none;">Click here to choose your query.
				</span>

			</td>
		</tr>
		<tr class="SimpleSearch" id="SearchRow">
			<td style="position:relative;text-align:center;" colspan=4>
					<span style="text-align:left;width:180px;height:30px;display:inline-block;position:relative;background:white;background-position: center; background-image:url('Images/<% $sThemeFolder %>/img00005.gif'); background-repeat:no-repeat">
						<input tabindex=1 sAttribute = "sDescription" id="filterBox"
							onkeypress="top.Search(document.getElementById('searchMasterDiv'),event);"
							onkeydown="this.ownerDocument.getElementById('searching').style.display = 'none';"
							style="left:30px;top:7px;position:absolute;BORDER: #000000 0px solid; WIDTH: 140px; height:16px;FONT-SIZE: 12px; FONT-FAMILY: Courier New;"
							size="16" name="filterBox" sHelpId="Search_Search_Field">
						<input tabindex=2 onclick="top.ExecuteSearch(this.ownerDocument.getElementById('searchMasterDiv'), this.ownerDocument.getElementById( 'filterBox' ).value, this.ownerDocument.getElementById( 'filterBox' ).getAttribute('sAttribute') );"
							style="position:absolute;padding-right:0px;padding-left:0px;top:4px;right:-30px;width:25px;FONT-SIZE: 12px; FONT-FAMILY: Courier New;"
							type="submit" value="Go" name="Search">
						<div style="position:absolute;top:25px;right:-100px;width:60px;FONT-SIZE:8pt;FONT-FAMILY:verdana;">per page</div>
						<select id="ItemsPerPageOption" tabindex=3 style="position:absolute;top:5px;right:-100px;width:60px;FONT-SIZE:8pt;FONT-FAMILY:verdana;"
							onchange="top.sGetUrl( 'SetDaoContextString.ase?sKey=iShowPerPagePreference&lValue=' + this.value );" >
							<option <% $iShowPerPage == 15 ? "selected" : "" %> value=15 >15</option>
							<option <% $iShowPerPage == 25 ? "selected" : "" %> value=25 >25</option>
							<option <% $iShowPerPage == 50 ? "selected" : "" %> value=50 >50</option>
							<option <% $iShowPerPage == 100 ? "selected" : "" %> value=100 >100</option>
							<option <% $iShowPerPage == 1000 ? "selected" : "" %> value=1000 >1000</option>
							<option <% $iShowPerPage == 10000 ? "selected" : "" %> value=10000 >10000</option>
						</select>

					</span>
					<script> o=document.getElementById('filterBox'); o.value='*'; o.select(); o.focus(); </script>
			</td>
		</tr>
	</table>
	</br>
	<div style="text-align:center;">
	<div id = "searching" style = "font-weight:bold;font-family:verdana;font-size:8pt;color:black;display:none;">
		Searching...
	</div>
	<div id = "results" style = "font-weight:bold;font-family:verdana;font-size:8pt;color:black;display:none;">
		Results
	</div>
	</div>
	</br>
	<div id = 'searchMasterDiv' style='width:100%' sContext = 'Search' sLinkerParams = ""  sRef='<%$oProject.Ref%>' sTOCRequest='<%$sTocRequest%>'
			sGrouping = '' sFilter = '' sRequest = '<%$sRequest%>' sReqType=''  sShowingWhat='TablePage' bAdvancedSearch='<%$bAdvancedSearch?"true":"false"%>' >

		<iframe name="linkerframe" id="linkerframe" src="blank.htm" frameborder=0 style="width:100%;height:85%"></iframe>
	</div>
	</div>
	</body>
	#endinline;

}
##===========================================================================
## getDialogTemplate_Right
##===========================================================================
void SSC_DBObj::getDialogTemplate_Right( $sContext, $ssExclusions )
{
	$sThemeFolder = ::sGetThemeFolder();
	$iTop = ::iDialogTopStart();
	$iLeftIcon = ::iDialogIconStart( "right" );
	$iLeftText = ::iDialogTextStart( "right" );
	$iItemHeight = ::iDialogItemHeight();
	## exit early if this is deleted
	$bDeleted = bIsPseudoDeleted();
	if ( $bDeleted )
	{
		## check if we have modify access first, and if not check if we have delete access instead
		$sRestoreError = sOKToAccess( "MODIFY" );
		if ( $sRestoreError != "" ) {
			## If we still don't have access, we will still get the proper error in $sRestoreError
			$sRestoreError = sOKToAccess( "DELETE" );
		};

		## if there is no reason we can't restore this object, show action
		if( $sRestoreError == "" )
			$sAction = "top.OnRestore( this, '" + $sContext + "' );";
		else
			$sAction = "alert( top.URLDecode('" + URLEncode( $sRestoreError ) + "') );";

		#inline
			<!-- ##start of right panel -->
			<span sRef=<%Ref%> onclick="<%$sAction%> " style="cursor:pointer;">
				<img src="images/<% $sThemeFolder %>/undo14x14.png" title="Restore..." style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" class="HelpTip" sHelpId="Callout_Restore">
				<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:50px;height:13px;" class="HelpTip" sHelpId="Callout_Restore">
					Restore...
				</div>
			</span>
		#endinline;
		$iTop += $iItemHeight;

		$sLabel = GetGenString( "ksLabelDeletePermanently" );

		## check if we have access to permanently delete
		$sDeleteError = sOKToAccess( "ADMIN" );

		## if there is no reason we can't restore this object, show action
		if( $sDeleteError == "" )
			$sAction = "top.OnDeletePermanently( this, '" + $sContext + "' );";
		else
			$sAction = "alert( top.URLDecode('" + URLEncode( $sDeleteError ) + "') );";

		#inline
			<span sRef=<%Ref%> onclick="<%$sAction%> " style="cursor:pointer;">
				<img src="images/<% $sThemeFolder %>/_delete.png" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" title='<%$sLabel%>'>
				<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:150px;height:13px;" class="HelpTip" sHelpId="Callout_Restore">
					<% $sLabel%>
				</div>
			</span>
		#endinline;
		$iTop += $iItemHeight;

		return;
	};


	$oThis = *;

	$bTable = $sContext == "table"? true:false;
	$bBody = $sContext == "body" OR $sContext == "search"? true:false;
	#inline
		<!-- ##Start of Lines -->
		<div style="position:absolute;left:156px;top:38px;width:2px;height:130px;" >
			<img src="images/<% $sThemeFolder %>/img00002.gif"  width="10" height="138">
		</div>
		<div style="position:absolute;left:312px;top:38px;width:2px;height:130px;" >
			<img src="images/<% $sThemeFolder %>/img00002.gif"  width="10" height="138">
		</div>
		<!-- ##End of lines -->
	#endinline;

	$sModifyError = sModifyError();
	$bIsReference = bReference;
    $bAllReference = $bIsReference;
	$bCanModify = bCheckAccess( "MODIFYWOVERSION" );

	## Need to check if all items are linked for a requirement
	if ( $bIsReference AND (ClassName == "SSC_SysReq"))
	{
        $oLink = $oThis.oGetReferenceReq();
        ## If linked object is the same, only target is linked so version
        if ( $oLink == $oThis )
            $bAllReference = false;
	};

	if( NOT $bBody )
	{
		if( $bTable Or $bIsReference )
			$bCanClone = false;
		else
		{
			$bCanClone = $ssExclusions contains "Clone"? false:true;
			if( $bCanClone ) {
				## check existing rule
				$bCanClone = bCanClone();
				if ($bCanClone) {
					## check for command availability by workflow
					$iAvailable = SSC_WorkflowCmd::iGetStandardCommandAccess_s($this, "CLONE", NullObject);
					$bCanClone = $iAvailable != -1;
				};
			};
		};

		if( $bCanClone )
		{
			if( $bCanModify )
				$sAction = "top.OnClone();";
			else
				$sAction = "alert( top.URLDecode('" + URLEncode( $sModifyError ) + "') );";
			#inline
				<!-- ##start of right panel -->
				<span onclick="<%$sAction%> " style="cursor:pointer;">
					<img src="images/<% $sThemeFolder %>/_clone.png" title="Clone..." style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" class="HelpTip" sHelpId="Callout_Clone...">
					<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:50px;height:13px;" class="HelpTip" sHelpId="Callout_Clone...">
						Clone...
					</div>
				</span>
			#endinline;
			$iTop += $iItemHeight;
		};

		if ( $bIsReference Or ($ssExclusions contains "Delete") )
			$bCanDelete = false;
		else
		{
			## check for command availability by workflow
			$iAvailable = SSC_WorkflowCmd::iGetStandardCommandAccess_s($this, "DELETE", NullObject);
			$oProject = oGetProject();

			$bCanDelete = true;
			$bRequireAdmin = false;
			if ($iAvailable == -1) {
				## hide by workflow
				$bCanDelete = false;
			} else if ($iAvailable == 0) {
				## workflow has no opinion, so check fallback
				if ( $oProject != NullObject ) {
					$bRequireAdmin = $oProject.bHideDeleteCommands();
				};

				if( NOT $bRequireAdmin ) {
					## check privilege
					$bCanDelete = bCheckAccess( "DELETE" );
				} else {
					$bCanDelete = $oProject.bCheckAccess( "ADMIN" );
				};
			} else {
				$bCanDelete = true;
			};
		};

		## if delete is excluded, don't show the option
		if( $bCanDelete )
		{
			## check privilege
			$sOKToDelete = sOKToAccess( "DELETE" );

			if( $sOKToDelete == "" )
			{
				if( $bCanModify )
				{
					if( $bTable )
						$sAction = "top.DeleteFromTable( top.currTableItem, false );";
					else
						$sAction = "top.OnDelete( false );";
				}
				else
					$sAction = "alert( top.URLDecode('" + URLEncode( $sModifyError ) + "') );";
			}
			else
			{
				$sAction = "alert( top.URLDecode('" + URLEncode( $sOKToDelete ) + "') );";
			};
			#inline
			<span onclick="<%$sAction%>" style="cursor:pointer;">
				<img src="images/<% $sThemeFolder %>/_delete.png" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" class="HelpTip" sHelpId="Callout_Delete...">
				<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:110px;height:13px;" class="HelpTip" sHelpId="Callout_Delete...">
					Delete...
				</div>
			</span>
			#endinline;
			$iTop += $iItemHeight;
		};

		if ( $ssExclusions contains "Remove" ) {
			$bCanRemove = false;
		} else {
			$bCanRemove = bCanRemove();
		};

		## if we are in a table, and the parent object is a document section, then
		## we can only allow remove IF the datasrc for the document section is the document section iteself
		if ( $sContext == "table" ) {
			$oParent = GetRequest( "oParent" );
			if ( $oParent != NULL AND $oParent != NULLOBJECT ) {
				if ( $oParent.classname == "SSC_Category" AND $oParent.bIsDocumentation() ) {
					$sDataSrc = $oParent.sGetData( "sDocDataSource" );

					if ( Lower( $sDataSrc ) != "this section" ) {
						$bCanRemove = false;
					};
				} else if ( $oParent.classname == "SSC_Project" ) {
					## do not allow remove command in a project table
					$bCanRemove = false;
				};
			};
		};

		## if remove is still possible, consider workflow based opinions
		if ($bCanRemove) {
			## check for command availability by workflow
			$iAvailable = SSC_WorkflowCmd::iGetStandardCommandAccess_s($this, "REMOVE", NullObject);
			$bCanRemove = $iAvailable != -1;
		};

		if ( $bCanRemove )
		{
			## Removed modify access test because that needs to happen when the user tries to add remove the relationship
			if( $bTable )
				$sAction = "top.RemoveFromTable( top.currTableItem, false );";
			else
				$sAction = "top.OnRemove( false );";

			#inline
				<span onclick="<%$sAction%>" style="cursor:pointer;">
					<img src="images/<% $sThemeFolder %>/empty.gif" width="18" height="18" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop%>px;" class="HelpTip" sHelpId="Callout_Remove...">
					<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:110px;height:13px;" class="HelpTip" sHelpId="Callout_Remove...">
						Remove...
					</div>
				</span>
			#endinline;
			$iTop += $iItemHeight;
		};



	};
}
##===========================================================================
## CreateCommand
##===========================================================================
void SSC_DBObj::CreateCommand( $sRequest, $sLinkerParams, $sRef, $sParentClass, $iTop )
{
	switch( $sRequest )
	{
		case "Attachments":
			#inline
			<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
				<div class="ActionLink" onclick = "top.FlexTable_AttachFile(top.currBodyTable, '<% $sRef %>');"  sHelpId="Callout_Create_New"> Create New</div>
			</div>
			#endinline;
			break;
		case "PrivilegeHolders":
			#inline
		<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
			<div class = "MarkUpLink" sShowingWhat = 'NewUser' sContext='ksPriv_Default' sRequest=''
				sRef='<%$sRef%>' style="cursor:pointer;" > Create New User </div>
		</div>
		#endinline;
			break;
		case "MatlabScripts":
			#inline
				<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
					<div class="MarkUpLink" sShowingWhat='NewMatlabScript' sContext='table' sRef='<%$sRef%>' sRequest='<%$sRequest%>' style="cursor:pointer;" >Create New Script</div>
				</div>
				<div style="position:absolute;left:30px;top:<%$iTop + 20%>px;width:200px;height:16px;">
					<div class="MarkUpLink" sShowingWhat='UploadMatlabScript' sContext='table' sRef='<%$sRef%>' sRequest='<%$sRequest%>' style="cursor:pointer;" >Upload New Script</div>
				</div>
			#endinline;
		break;

		case "Requirements":
			#inline
			<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
				<div class="MarkUpLink" sShowingWhat='SSC_SysReq::NewReq' sContext='table' sRef='<%$sRef%>' sRequest='<%$sRequest%>' style="cursor:pointer;" > Create New Requirement</div>
			</div>
			#endinline;
			break;
		case "ActionItems":
			#inline
			<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
				<div class = "SidebarButton" sShowingWhat = 'ActionItemDetailed' sContext='table' sRef = '<%$sRef%>' style="cursor:pointer;"  sHelpId="Callout_Create_New" > Create New </div>
			</div>
			#endinline;
			break;
		case "Competitors":
			#inline
			<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
				<div class = "SidebarButton" sShowingWhat = 'NewCompetitor' sContext='table' sRef = '<%$sRef%>' style="cursor:pointer;"  sHelpId="Callout_Create_New" > Create New </div>
			</div>
			#endinline;
			break;
		case "Messages":
			#inline
			<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
				<div class = "SidebarButton" sShowingWhat = 'MessageDetailed' sContext='table' sRef = '<%$sRef%>' style="cursor:pointer;"  sHelpId="Callout_Create_New" > Create New </div>
			</div>
			#endinline;
			break;
		default:
			super::CreateCommand( $sRequest, $sLinkerParams, $sRef, $sParentClass, $iTop );
			break;
	};
}
##===========================================================================
## AddCommand
##===========================================================================
void SSC_DBObj::AddCommand( $sRequest, $sLinkerParams, $sRef, $sParentClass, $iTop )
{
	switch( $sRequest )
	{
		case "Attachments":
			#inline
				<div style="position:absolute;left:30px;top:<%$iTop%>px;width:160px;height:16px;">
					<div class="MarkUpLink" sShowingWhat='UploadExistingFile'
					sParentClass = "<%$sParentClass%>" sRef = '<%$sRef%>' sType = "LINK" sLinkerParams = "<%$sLinkerParams%>" sRequest = '<%$sRequest%>'
					sTableId = 'flexTable_<%$sRequest + $sLinkerParams%>' sHelpId="Callout_Upload_Local_File">
							Upload Local File
					</div>
				</div>

				<div style="position:absolute;left:30px;top:<%$iTop+20%>px;width:160px;height:16px;">
					<div class="MarkUpLink" sShowingWhat='UploadUrl'
					sParentClass = "<%$sParentClass%>" sRef = '<%$sRef%>' sType = "LINK" sLinkerParams = "<%$sLinkerParams%>" sRequest = '<%$sRequest%>'
					sTableId = 'flexTable_<%$sRequest + $sLinkerParams%>' sHelpId="Callout_Attach_from_Url">
							Attach from Url
					</div>
				</div>

			#endinline;

			if( $sParentClass != "SSC_Person" )
			{
				$sAction = "top.closeCallout();top.OpenPopout(top.currBodyTable,'LINK', this.getAttribute('sParentClass') );";

				$sCurrentLayout = GetRequest( "sCurrentLayout" );
				if( $sCurrentLayout == NULL )
					$sCurrentLayout = "";

				if( $sCurrentLayout != "Organization" )
				{
					#inline
						<div style="position:absolute;left:30px;top:<%$iTop+60%>px;width:160px;height:16px;">
							<div onclick="<%$sAction%>" class = "ActionLink"
							sParentClass = "<%$sParentClass%>" sRef = '<%$sRef%>' sType = "LINK" sLinkerParams = "<%$sLinkerParams%>" sRequest = '<%$sRequest%>'
							sTableId = 'flexTable_<%$sRequest + $sLinkerParams%>' sHelpId="Callout_Link_with_existing"> Add From Current Project </div>
						</div>
					#endinline;
				};

				$sAction = "top.closeCallout();top.OpenPopout(top.currBodyTable,'UNLINK', this.getAttribute('sParentClass') );";

				#inline
					<div style="position:absolute;left:30px;top:<%$iTop + 100%>px;width:160px;height:16px;">
							<div onclick="<% $sAction %>" class = "ActionLink"
							sParentClass = "<%$sParentClass%>" sRef = '<%$sRef%>' sType = "UNLINK" sLinkerParams = "<%$sLinkerParams%>" sRequest = '<%$sRequest%>'
							sTableId = 'flexTable_<%$sRequest + $sLinkerParams%>' sHelpId="Callout_Remove_Items"> Remove Items </div>
					</div>
				#endinline;
			};
			break;
		default:
			super::AddCommand( $sRequest, $sLinkerParams, $sRef, $sParentClass, $iTop );
			break;
	}
}
##=========================================================================
## sGetFlexColor
##=========================================================================
variant SSC_DBObj::sGetFlexColor( $sTag )
{
	$sColor = "";
	switch ( $sTag )
	{
		case "P"	: $sColor="Purple"; break;
		case "S"	: $sColor="Yellow"; break;
		case "CB"	: $sColor="Yellow"; break;
		case "DB"	: $sColor="Yellow"; break;
		case "UB"	: $sColor="Yellow"; break;
		case "DIR"	: $sColor="Yellow"; break;
		case "DOC"	: $sColor="Orange"; break;
		case "PSEC"	: $sColor="Purple"; break;
		case "SEC"	: $sColor="Purple"; break;
		case "I"	: $sColor="Orange"; break;
		case "F"	: $sColor="Purple"; break;
		case "V"	: $sColor="Cyan"; break;
		case "K"	: $sColor="Red"; break;
		case "M"	: $sColor="Green"; break;
		case "R"	: $sColor="Blue"; break;
		case "SP"	: $sColor="Blue"; break;
		case "N"	: $sColor="Blue"; break;
		case "A"	: $sColor="Yellow"; break;
		case "T"	: $sColor="Cyan"; break;
		case "WTP"  : $sColor = "Yellow"; break;
		case "WTPH" : $sColor = "Orange"; break;
		case "WTD"  : $sColor = "Green"; break;
		case "DFCT"  : $sColor = "Orange"; break;
		case "INIT"  : $sColor = "Green"; break;
	};

	if( $sColor == "" )
	{
		$lsReqTypes = SSC_AppObj::wvsGetAllowableObjTypes_s( "SSC_SysReq" );
		$lsReqTypes/
		{
			$sValue = Item( *, 2, 2, EOI );
			if( $sValue == $sTag )
				$sColor="Blue";
		};
	};

	if( $sColor == "" )
		$sColor = "Yellow";

	return $sColor;
}
##===========================================================================
## GetTheme
##===========================================================================
void SSC_DBObj::GetTheme_Builtin( $sRequest )
{
	$sExport = GetRequest( "sExport" );
	$bExporting = $sExport != null;
	##Used to determine styling which differs by version
	$iIEVersion = CInt($dao.Context.Get("nIEVersion"));
	$bCompOn = $dao.Context.Get("bCompOn");

	switch( $sRequest )
	{
		case "Documentation":

			## include word styles for WORD export and MHT
			$bIncludeWordStyles = $bExporting AND not ( $sExport=="Diff" OR $sExport == "HtmlFile" OR $sExport=="Archiving" OR $sExport=="ArchivingVirtual" OR $sExport == "Review" OR $sExport == "DirectPDF" );

			## don't include behaviors on Export
			$bDisableBehaviors = $sExport == "Word" OR $sExport == "MHTArchive" OR $sExport == "HtmlFile" OR $sExport=="Diff" OR $sExport=="Archiving" OR $sExport=="ArchivingVirtual" OR $sExport == "Review" OR $sExport == "DirectPDF";

			$iMatrixColumnHeaderHeight = (NOT $bExporting) OR ($sExport == "Word") ? $me.oPerson.sGetData( "iMatrixColumnHeaderHeight" ) : "2.0";
			#inline
			p.single
			{
				margin:0em 0px 0px 0px;
			}
			img
			{
				-MS-INTERPOLATION-MODE: bicubic;
			}
			#endinline;

			if( $bIncludeWordStyles )
			{
				$this.GetWordPageStyleBlocks();
			};

			#inline
			.PageSectionPlain
			{
				width:98%;
				float:left;
				display:inline;

				margin:0px;
			}

			.PageSection_Style2
			{
				float:left;
				display:inline;
				overflow-x:hidden;
				margin:5px;
				width:100%;
			}
			#endinline;

			if( NOT $bDisableBehaviors )
			{
				#inline
				@media print
				{
					.PageSectionPlain
					{
						width:98%;
						float:none;
						display:inline;
						overflow-x:auto;
						overflow-y:auto;
						margin:0px;
					}
					.PageSection_Style2
					{
						float:none;
						display:inline;
						overflow-x:auto;
						overflow-y:auto;
						margin:5px;
					}


				}
				#endinline;
			};

			#inline
			.SectionHeader_Style2
			{
				background-color:#a1a1a2;
				font-weight:normal;
				color:black;
				width:100%;
				padding:3px;
				display:block;
				font-family:verdana;
				font-size:8pt;
			}


			.SectionHeaderText_Style2
			{
				cursor:pointer;
				color:black;
				font-family:verdana;
				font-size:8pt;
				font-weight:normal;
				width:100%;
			}

			div.Section div.Section
			{
				margin-top:20px;
			}
			div.Section1
			{
				page:Section1;
			}

			#endinline;

			## add numeric styling
			if ( NOT $bExporting OR $sExport == "HtmlFile" )
			{
				#inline
				span.tgt_ult,span.tgt_nom,span.tgt_llt,span.tgt_ltol,span.tgt_utol,span.tgt_pm,span.tgt_sym,span.target
				{
					text-decoration:underline;
				}
				#endinline;
			};

			if ( $sExport == "MHTArchive" )
			{
				#inline
				span.SectionNum
				{
					mso-hide:all;
				}
				#endinline;
			};

			## Code to set the layout of the document to reflect the document's setting
			$sFontSize			= sGetData( "sDocFontSize" );
			$sFontSizeForTables	= sGetData( "sDocFontSizeForTables" );
			$sFontFamily		= sGetData( "sDocFontFamily" );

			#inline

			body, textarea, input /*, div, form, li, ol, p, select, td, tr, ul */
			{
				font-size:<%$sFontSize%>pt;
				font-family:<%$sFontFamily%>;
				font:<%$sFontSize%>pt <%$sFontFamily%>;
			}

			table, td, tr
			{
				font-size:<%$sFontSizeForTables%>pt;
				font-family:<%$sFontFamily%>;
			}

			div, form, li, ol, p, select,  ul
			{
				font-size:inherit;
			}

			.FT_Table, .FT_Table textarea, .FT_Table input, .FT_Table table, .TableForm td
			{
				font-size:<%$sFontSizeForTables%>pt;
				font-family:<%$sFontFamily%>;
			}

			.FMEA, .FMEA textarea, .FMEA input, .FMEA table
			{
				font-size:<%$sFontSizeForTables%>pt;
				font-family:<%$sFontFamily%>;
			}
			#endinline;

			if( $bIncludeWordStyles )
			{
				#inline
				p, ol, ul, table, textarea
				{
					mso-style-parent:"Normal";
					mso-margin-top-alt:auto;
					mso-margin-bottom-alt:auto;
					mso-pagination:widow-orphan;
				}
				#endinline;
			};

			#inline
			/*Styles to clear float on tables which
			 can lead to them escaping the area*/
			.MsoNormal::after
			{
				content: "";
				clear: both;
				display: table;
			}
			.MsoNormal *
			{
				clear: both;
			}
			.MsoNormal::before
			{
				content: "";
				clear: both;
				display: table;
			}

			p.MsoNormal, li.MsoNormal, div.MsoNormal
			{
				font-size:<%$sFontSize%>pt;
				font-family:"<%$sFontFamily%>";
			#endinline;

			if( $bIncludeWordStyles )
			{
				#inline
				mso-style-parent:"";
				mso-pagination:widow-orphan;
				#endinline;
			};

			#inline
			}
			h1
			{
				font-size:<%CInt($sFontSize) + 2%>.0pt;
			}
			h2, h3, h4, h5, h6
			{
				font-size:<%$sFontSize%>.0pt;
			}
			h1, h2, h3, h4, h5, h6, p.MsoHeading7, p.MsoHeading8, p.MsoHeading9
			{
				font-weight:bold;
				text-indent:0.00in;
				margin-right:0in;
				margin-bottom:12.0pt;
				page-break-after:avoid;
			#endinline;

			if( $bIncludeWordStyles )
			{
				#inline
				mso-style-next:Normal (Web);
				mso-pagination:widow-orphan;
				#endinline;
			};

			#inline
			}
			p.MsoHeading7, p.MsoHeading8, p.MsoHeading9
			{
				display:inline;
			}
			#endinline;

			if( $bIncludeWordStyles )
			{
				$sSectionNumber = "";
				$nItemcount = 0;

				if( ClassName == "SSC_Category" )
				{
					$sSectionNumber = sGetData( "sSectionNumber" );
					$nItemcount = ItemCount( $sSectionNumber, "." );
				};


				#inline

				h1.MsoHeading1
				{
					mso-outline-level:1;
					mso-list:l0 level1 lfo2;
				}

				h2.MsoHeading2
				{
					mso-outline-level:2;
					mso-list:l0 level2 lfo2;
				}
				h3.MsoHeading3
				{
					mso-outline-level:3;
					mso-list:l0 level3 lfo2;
				}

				h4.MsoHeading4
				{
					mso-outline-level:4;
					mso-list:l0 level4 lfo2;
				}

				h5.MsoHeading5
				{
					mso-outline-level:5;
					mso-list:l0 level5 lfo2;
				}

				h6.MsoHeading6
				{
					mso-outline-level:6;
					mso-list:l0 level6 lfo2;
				}
				p.MsoHeading7
				{
					mso-outline-level:7;
					mso-list:l0 level7 lfo2;
				}
				p.MsoHeading8
				{
					mso-outline-level:8;
					mso-list:l0 level8 lfo2;
				}
				p.MsoHeading9
				{
					mso-outline-level:9;
					mso-list:l0 level9 lfo2;
				}

				@list l0:level1
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 1 )
								"mso-level-start-at:" + Item( $sSectionNumber, 1, 1, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 1";
					mso-level-suffix:space;
					mso-level-text:"%1\.0";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level2
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount > 2 )
								"mso-level-start-at:" + Item( $sSectionNumber, 2, 2, "." ) + ";";
							##Special case for detecting the .0 that is added to level 1 values
							else if($nItemcount == 2 ){
								$nLevel = Item( $sSectionNumber, 2, 2, "." );
								if($nLevel == 0) $nLevel = 1;
								"mso-level-start-at:" + $nLevel + ";";
							};
						};
					%>
					mso-level-style-link:"Heading 2";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level3
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 3 )
								"mso-level-start-at:" + Item( $sSectionNumber, 3, 3, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 3";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2\.%3";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level4
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 4 )
								"mso-level-start-at:" + Item( $sSectionNumber, 4, 4, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 4";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2\.%3\.%4";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level5
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 5 )
								"mso-level-start-at:" + Item( $sSectionNumber, 5, 5, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 5";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2\.%3\.%4\.%5";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level6
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 6 )
								"mso-level-start-at:" + Item( $sSectionNumber, 6, 6, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 6";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level7
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 7 )
								"mso-level-start-at:" + Item( $sSectionNumber, 7, 7, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 7";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6.%7";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level8
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 8 )
								"mso-level-start-at:" + Item( $sSectionNumber, 8, 8, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 8";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6.%7.%8";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}

				@list l0:level9
				{
					<%
						if( $sSectionNumber != "" )
						{
							if( $nItemcount >= 9 )
								"mso-level-start-at:" + Item( $sSectionNumber, 9, 9, "." ) + ";";
						};
					%>
					mso-level-style-link:"Heading 9";
					mso-level-suffix:space;
					mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6.%7.%8.%9";
					mso-level-tab-stop:none;
					mso-level-number-position:left;
				}
				#endinline;
			};
				#inline
				.NonEditableText
				{
					display:inline;
				}

				.EditableText
				{
					cursor:text;
					display:inline-block;
				}

				.FT_Table .RichEditableText
				{
					width:100%;
					overflow-x:auto;
					overflow-y:hidden;
					height:100%;
				}

				.RichEditableText
				{
					cursor:text;
					display:block;
					/*position:relative;*/
					transition: outline 500ms ease;
					outline: none;
				}

				.RichEditableText:hover
				{
					/* No longer outline
					outline: 1px solid #3498db;
					*/
				}

				.FT_NodeNonEditText
				{
					/*NavigationLink color*/
					color:#15C;
					cursor:pointer;
					overflow-x:visible;
				}
				.LinkLook
				{
					/*NavigationLink color*/
					color: #15C;
					cursor:pointer;
					text-decoration: underline;
				}
				.Arial10
				{
					font-family:Arial;
					font-size:10pt;
				}
				.Arial12
				{
					font-family:Arial;
					font-size:12pt;
				}

				div.Intro					{ margin-left:0.00in; }
				h1.MsoHeading1				{ margin-left:0.00in; }
				div.Level1					{ margin-left:0.00in; }
				h2.MsoHeading2				{ margin-left:0.30in; }
				div.Level2					{ margin-left:0.30in; }
				h3.MsoHeading3, div.Level3	{ margin-left:0.30in; }
				h4.MsoHeading4, div.Level4	{ margin-left:0.30in; }
				h5.MsoHeading5, div.Level5	{ margin-left:0.30in; }
				h6.MsoHeading6, div.Level6	{ margin-left:0.30in; }
				p.MsoHeading7, div.Level7	{ margin-left:0.30in; }
				p.MsoHeading8, div.Level8	{ margin-left:0.30in; }
				p.MsoHeading9, div.Level9	{ margin-left:0.30in; }

				div.SubSections div.indent div.Section		{ margin-left:0.30in; }

				h1.MsoHeading1NoNumbering							{ margin-left:0.00in; }
				div.Level1NoNumbering								{ margin-left:0.00in; }
				h2.MsoHeading2NoNumbering							{ margin-left:0.30in; }
				div.Level2NoNumbering								{ margin-left:0.30in; }
				h3.MsoHeading3NoNumbering, div.Level3NoNumbering	{ margin-left:0.30in; }
				h4.MsoHeading4NoNumbering, div.Level4NoNumbering	{ margin-left:0.30in; }
				h5.MsoHeading5NoNumbering, div.Level5NoNumbering	{ margin-left:0.30in; }
				h6.MsoHeading6NoNumbering, div.Level6NoNumbering	{ margin-left:0.30in; }
				p.MsoHeading7NoNumbering, div.Level7NoNumbering		{ margin-left:0.30in; }
				p.MsoHeading8NoNumbering, div.Level8NoNumbering		{ margin-left:0.30in; }
				p.MsoHeading9NoNumbering, div.Level9NoNumbering		{ margin-left:0.30in; }

				br.breakhere
				{
					page-break-before: always
				}

				.SidebarButton
				{
					cursor:pointer;
				}

				.SidebarButtonNoDialog
				{
					cursor:pointer;
				}

				.TargetName
				{
					width:40px;
				}

				.FT_Table .autoCompleteText
				{
				}

				.autoCompleteText
				{
					margin-top:-2px; /* let's try this because the field seems to decend below text on the same line */
					background-color:transparent;
					border:0px
				}

				.FT_Table
				{
					border-collapse: collapse;
					empty-cells:show;
					word-wrap:break-word;
					/* text-align:center;  commented because it prevents a tabledef from overriding */
				}

				.FormalTable
				{
				}
				.FormalTable .FT_Table
				{
					/* text-align:left;  commented because it prevents a tabledef from overriding */
					vertical-align:top;
					table-layout:fixed;
					/* border: 1px solid gray; turned off because it seems to prevent a cell from delaring what it wants */
				}

				.MatrixTable
				{
				}
				.MatrixTable .FT_Table
				{
				}

				.MatrixScrollPicker
				{
					text-align:center;
					font-size:8pt;
					cursor:pointer;
					border-collapse: collapse;
				}
				.MatrixScrollPicker TD
				{
					width:15px;
					height:15px;
					border-left: 1px solid #D3D3D3;
					border-top: 1px solid #D3D3D3;
					border-bottom: 1px solid #D3D3D3;
					border-right: 1px solid #D3D3D3;
				}

				.SimpleList
				{
				}
				.SimpleList .FT_Table
				{
					text-align:left;
				}

				.FMEA
				{
					width: 100%;
				}

				.FMEA .FT_Table
				{

					table-layout:fixed;
					border: .75pt solid gray;
				}

				.FT_Header
				{
					background-color:white;
					page-break-inside:avoid;
					page-break-after:avoid;
					vertical-align: bottom;
				}

				.FormalTable .FT_Header
				{
					padding:2px;
					font-weight: bold;
					border: 1px solid gray;
					background-color:#D3D3D3;
					vertical-align: bottom;
					/*text-align:left; commented because it prevents a tabledef from overriding */
				}

				.MatrixTable .FT_Header
				{
				#endinline;
					##Text Rotation styling is dependent on browser versioning
					if($iIEVersion <= 8 OR $bCompOn){
					#inline
						vertical-align:bottom;
					#endinline;
					};
				#inline
				}

				.SimpleList .FT_Header
				{
					padding:5px;
					font-weight: bold;
					background-color:#D3D3D3;
					vertical-align: bottom;
				}

				.FMEA .FT_Header
				{
					height: 18px;
					font-weight: bold;
					background-color:#D3D3D3;
					border: .75pt solid gray;
					vertical-align: bottom;
				}

			#endinline;
			if ( $sExport != "Word" AND $sExport != "MHTArchive" ) {
			#inline
				.FT_Row
				{
					page-break-inside:avoid;
				}
			#endinline;
			};
			#inline

				.FT_Cell
				{
				}

				.FormalTable .FT_Cell
				{
					vertical-align:top;
					border-top: 1px solid gray;
					border-left: 1px solid gray;
					border-right: 1px solid gray;
					border-bottom: 1px solid gray;
					padding:2px;
				}

				.MatrixTable .FT_Cell
				{
					border: .75pt solid gray;
				}

				.SimpleList .FT_Cell
				{
					padding:5px;
				}

				.FMEA .FT_Cell
				{
					border: .75pt solid gray;
				}

				.RowDetailTable .FT_Cell:only-child
				{
					vertical-align:top;
					border:none;
					padding:2px;
				}

				@font-face
				{
					font-family: 'overpassregular';
					src: url('Styles/Overpass_Regular-webfont.eot');
					src: url('Styles/Overpass_Regular-webfont.eot?#iefix') format('embedded-opentype'),
						 url('Styles/Overpass_Regular-webfont.woff') format('woff'),
						 url('Styles/Overpass_Regular-webfont.ttf') format('truetype'),
						 url('Styles/Overpass_Regular-webfont.svg#overpassregular') format('svg');
					font-weight: normal;
					font-style: normal;

				}

				.FT_TableIcon
				{
					cursor:pointer;
					margin-left:.025in;
					vertical-align: top;
				}


				.FormalTable .sortable
				{
					cursor:pointer;
				}

				.MatrixTable #header
				{
				}

				.MatrixTable #Rating
				{
					background-repeat: no-repeat;
					background-position: center;
					text-align:center;
				}

				.MatrixTable #ColParado
				{
					background-color:#3b9f65;
					width:15px;
				}

				.MatrixTable #Importance
				{
				}

				.MatrixTable #Voice
				{
					margin-left:5px;
				}

				.MatrixTable #VoiceCat
				{
					margin-left:5px;
					background-color:white;
				}

				.MatrixTable #VoiceHeader
				{
					background-color:white;
					font-weight:bold;
					text-decoration:underline;
				}

				.MatrixTable #ImpHeader
				{
					background-color:white;
					font-weight:bold;
					text-decoration:underline;
					width:100px;
				}

				.MatrixTable #RoofItem
				{
					white-space: nowrap;
					word-wrap:normal;
					cursor:default;

					#endinline;


					##Text Rotation styling is dependent on browser versioning
					if($iIEVersion <= 8 OR $bCompOn){
						#inline
						writing-mode: tb-rl;
						Filter: FlipH FlipV;
						#endinline;
					}
					else if($iIEVersion == 9){
						#inline
							-ms-transform-origin: 0% 0%;
    						-ms-transform: rotate(270deg);
    						width:<%$iMatrixColumnHeaderHeight%>in;
    						margin-left: 8px;
							position: absolute;
							/*padding on the left is on the bottom after rotate*/
							padding-left:2px;
						#endinline;
					}
					else{
						#inline
							transform-origin: 0% 0%;
    						transform: rotate(270deg);

    						width:<%$iMatrixColumnHeaderHeight%>in;
    						margin-left: 8px;
							position: absolute;
							/*padding on the left is on the bottom after rotate*/
							padding-left:2px;
							-webkit-transform: rotate(270deg);
							-webkit-transform-origin: 0% 0%;
						#endinline;
					};

				#inline
					max-height:<%$iMatrixColumnHeaderHeight%>in;
				}

				#endinline;
				if( NOT $bDisableBehaviors )
				{
					#inline
					@media print
					{
						.MatrixTable #RoofItem
						{
							background-color:white;
							writing-mode: tb-rl;
							Filter: FlipH FlipV FlipV;
							text-align:left;
							padding-top:5px;
							cursor:default;
							height:100%;
						}
						.MatrixTable .FT_Cell
						{
							display:block;
						}
						.MatrixTable .FT_Header
						{
							display:block;
						}
						tr
						{
							display:block;
						}
					}
					#endinline;
				};
				#inline
				.MatrixTable #PughRoofItem
				{
					color:#3b9f65;
					font-weight:bold;
					text-align:center;
					text-decoration:underline;
					background-color:white;
				}

				#endinline;

					##Text Rotation styling is dependent on browser versioning
					##sVtext is an attribute added to tags which need this rotation
					##when the attribute =vv we are styling the v&v table
					if($iIEVersion <= 8 OR $bCompOn){
					##must be handeled on outer tag
						#inline
						[sVText=vv]
						{

								width:.2in;
								min-height:0.95in;
								white-space:nowrap;
								text-align:left;
								padding-top: 10px !important;
								writing-mode: tb-rl;
								Filter: FlipH FlipV;
						#endinline;
								##a quirk in IE8 requires the left padding to be overwritten
								if($iIEVersion == 8){
						#inline
								padding-left: 0px !important;
						#endinline;
								};
						#inline
						}
						#endinline;
					}
					else if($iIEVersion == 9){
					##must be handled on inner tag
						#inline
						[sVText=vv]
						{
								max-width:.2in;
								height:0.95in;
								white-space:nowrap;
								text-align:left;
								/*must be marked !important so as not to be
									overwritten by the styling on the class*/
								padding-bottom:10px !important;
						}
						[sVText=vv] div
						{
							height:.2in;
							width:0.95in;
							-ms-transform-origin: 0% 100%;
    						-ms-transform: rotate(270deg) translateY(100%);
						}
						#endinline;
					}
					else{
					##must be handled on inner tag
						#inline
						[sVText=vv]
						{
								max-width:.2in;
								height:0.95in;
								white-space:nowrap;
								text-align:left;
								/*must be marked !important so as not to be
									overwritten by the styling on the class*/
								padding-bottom:10px !important;
						}
						[sVText=vv] div
						{
							height:.2in;
							width:0.95in;
							-ms-transform-origin: 0% 100%;
    						-ms-transform: rotate(270deg) translateY(100%);
							-webkit-transform: rotate(270deg) translate(0%, 100%);
							-webkit-transform-origin: 0% 100%;
						}
						#endinline;
					};

					##Text Rotation styling is dependent on browser versioning
					##sVtext is an attribute added to tags which need this rotation
					##when the attribute =milestone we are styling the test milestone table
					if($iIEVersion <= 8 OR $bCompOn){
					##must be handeled on outer tag
						#inline
						[sVText=milestone]
						{
								width:1in;
								height:1in;

								text-align:left;

						}
						[sVText=milestone]div
						{
								width:1in;
								height:1in;
								vertical-align:top !important;
								text-align:left;
								writing-mode: tb-rl;
								Filter: FlipH FlipV;
						}
						#endinline;
					}
					else if($iIEVersion == 9){
					##must be handled on inner tag
						#inline
						[sVText=milestone]
						{
								max-width:.4in;
								height:1in;
								text-align:left;
						}
						[sVText=milestone] div
						{
							height:.4in;
							width:1in;
							-ms-transform-origin: 0% 100%;
    						-ms-transform: rotate(270deg) translateY(100%);
						}
						#endinline;
					}
					else{
					##must be handled on inner tag
						#inline
						[sVText=milestone]
						{
								max-width:.4in;
								height:1in;
								white-space:nowrap;
								text-align:left;
						}
						[sVText=milestone] div
						{
							height:.4in;
							width:1in;
							-ms-transform-origin: 0% 100%;
    						-ms-transform: rotate(270deg) translateY(100%);
							-webkit-transform: rotate(270deg) translate(0%, 100%);
							-webkit-transform-origin: 0% 100%;
						}
						#endinline;
					};

				#inline

				.verticalTableColumn
				{
					white-space: nowrap;
					padding-top:5px;
					cursor:default;
					<% $bExporting? "mso-rotate:90;" : ""%>
				#endinline;

					##Text Rotation styling is dependent on browser versioning
					if($iIEVersion <= 8 OR $bCompOn){
						#inline
						writing-mode: tb-rl;
						Filter: FlipH FlipV;
						background-color:transparent;
						#endinline;
					}
					else if($iIEVersion == 9){
						#inline
						-ms-transform-origin: 0% 100%;
						-ms-transform:rotate(270deg) translateY(100%);
						background-color:transparent;
						#endinline;
					}
					else{
						#inline
						transform-origin: 0% 100%;
						transform:rotate(270deg) translateY(100%);
						-webkit-transform: rotate(270deg) translate(0%, 100%);
						-webkit-transform-origin: 0% 100%;
						background-color:transparent;
						#endinline;
					};

				#inline
					height:<%$iMatrixColumnHeaderHeight%>in;
				}
				.FT_Header .verticalTableColumn
				{
					white-space: nowrap;
					padding-top:5px;
					cursor:default;
					<% $bExporting? "mso-rotate:90;" : ""%>
				#endinline;

					##Text Rotation styling is dependent on browser versioning
					if($iIEVersion <= 8 OR $bCompOn){
						#inline
						writing-mode: tb-rl;
						Filter: FlipH FlipV;
						background-color:transparent;
						#endinline;
					}
					else if($iIEVersion == 9){
						#inline
						-ms-transform-origin: 0% 100%;
						-ms-transform:rotate(270deg) translateY(100%);
						background-color:transparent;
						#endinline;
					}
					else{
						#inline
						transform-origin: 0% 100%;
						transform:rotate(270deg) translateY(100%);
						-webkit-transform: rotate(270deg) translate(0%, 100%);
						-webkit-transform-origin: 0% 100%;
						background-color:transparent;
						#endinline;
					};

				#inline
					height:<%$iMatrixColumnHeaderHeight%>in;
				}

				.groupedHeaderCell
				{
					background-color:#E8E8E8;
					border:1px solid gray;
					padding: 3px;
					text-align:left;
					cursor:pointer;
					color:black;
				}
				.MenuIcon
				{
					visibility:visible;
				}

				.reportDiv
				{
					margin-left:15px;
					margin-top:10px;
					/*ActionLink color*/
					color: #1A7BB2;
					text-decoration:underline;
					font-size:10pt;
					font-family:Arial;
					cursor:pointer;

				}

				.link
				{
					/*NavigationLink color*/
					color:#15C;
					cursor:pointer;
					text-decoration: underline;
				}



				.RapidAdderPrompt
				{
					font-size:<%CInt($sFontSize)-2%>pt;
					MARGIN-TOP: 5px;
					DISPLAY: block;
					MARGIN-LEFT: 5px;
					COLOR: #aaaaaa;
				}
				.RapidAdderPromptWithAutocomplete
				{
					font-size:<%CInt($sFontSize)-2%>pt;
					MARGIN-TOP: 5px;
					DISPLAY: block;
					MARGIN-LEFT: 5px;
					COLOR: #aaaaaa;
					border:0;
					background-color:transparent;
				}
				.ListWidgetRapidAdder
				{
					MARGIN-TOP: 5px;
					DISPLAY: inline;
					COLOR: #aaaaaa;
					min-height:10px;
				}
				.ListWidgetRapidAdderWithAutocomplete
				{
					MARGIN-TOP: 5px;
					DISPLAY: inline;
					COLOR: #aaaaaa;
					border:0;
					background-color:transparent;
					width:inherit;
				}
				.FT_Node
				{
					font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
					font-size: 11px;
					display:block;
					overflow-x:hidden;
					overflow-y:auto;
					margin-left:0in;
					margin-top:.05in;
					padding:0in;

				}
				.FT_Node_Grouped
				{
					font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
					font-size: 11px;
					display:block;
					overflow-x:hidden;
					overflow-y:auto;
					margin-left:0in;
					margin-top:.05in;
					padding:0in;

				}
				.FT_StickyNote
				{
					font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
					font-size: 11px;
					display:block;
					overflow-x:hidden;
					overflow-y:auto;
					border:1px solid gray;
					padding:.05in;
					margin-left:2px;
					margin-top:4px;
					margin-right:10px;
					margin-bottom:5px;

				}
				.FT_Node .FT_Tree .FT_StickyNote
				{
					margin-left:16px;
				}
				.FT_StickyNote .FT_Tree .FT_StickyNote
				{
					margin-left:37px;
				}
				.FT_Tree_Header
				{
					float:right;
					font-family:verdana;
					font-weight:bold;
					font-size:8pt;
					margin-left:5px;
					margin-right:5px;
					display:inline;
				}
				.FT_Tree_Cell
				{
					float:right;
					font-family:verdana;
					font-size:8pt;
					margin-left:5px;
					margin-right:5px;
					display:inline;
					overflow:hidden;
				}
				.FT_PlusMinus
				{
					float:left;
					cursor:pointer;
					margin-top:-.025in;
					margin-left:0in;
					margin-right:2px;

				}
				.FT_NodeIcon
				{
					float:left;
					cursor:pointer;
					margin-left:.026in;
					padding-right:2px;
					vertical-align: top;

				}
				.Help_NodeIcon
				{
					float:left;
					margin-top:-.025in;
					margin-left:.026in;
					margin-right:2px;

				}
				.FT_NodeIcon_NonSelect
				{
					float:left;
					cursor:pointer;
					margin-left:.026in;
					margin-right:2px;
					vertical-align: top;

				}
				.TocBody .FT_Node
				{
					margin-left:-.05in;
				}
				.FT_NodeNonEditText:hover
				{
					text-decoration: underline;
				}
				.FT_FakeNodeNonEditText:hover
				{
					text-decoration: underline;
				}
				.FT_FakeNodeNonEditText
				{
					/*NavigationLink color*/
					color:#15C;
					cursor:pointer;
					overflow-x:visible;
				}
				.TocBody .FT_Node .FT_NodeEditText
				{
					margin-left:0in;
				}
				.FT_Tree
				{
					margin-top:0in;
					clear:both;
				}
				.FT_Node .FT_Tree
				{
					margin-top:0in;
					clear:both;
				}
				.TocBody .FT_Node .FT_Tree
				{
					margin-left:.2in;
				}
				.TocBody .FT_StickyNote .FT_Tree
				{
					margin-left:0px;
					margin-top:0in;
					padding-top:.025in;
					clear:both;
				}

				.fakelink
				{
					/*ActionLink Color*/
					color: #1A7BB2;
					cursor:pointer;
					text-decoration: underline;
				}
				.s5-EventTopicsQuestionsHeading
						{margin:12.0pt 0in; font-size:10.0pt;
						font-family:Arial;
						font-weight:bold;
						text-decoration:underline;
						text-underline:single;}
				.s5a-EventQuestionTopic
						{margin-top:12.0pt;
						margin-right:0in;
						margin-bottom:12.0pt;
						margin-left:.25in;
						background:#DCD1EB;
						font-size:10.0pt;
						font-family:Arial;
						cursor:pointer;}
				.s5b-EventQuestionTitle
						{margin-top:12.0pt;
						margin-right:0in;
						margin-bottom:0in;
						margin-left:.5in;
						margin-bottom:.0001pt;
						font-size:10.0pt;
						font-family:Arial;
						text-decoration:underline;
						text-underline:single;
						cursor:pointer;}
				.s5c-EventQuestionText
						{margin-top:6.0pt;
						margin-right:0in;
						margin-bottom:6.0pt;
						margin-left:.5in;
						font-size:10.0pt;
						font-family:Arial;
						cursor:pointer;}
				.s5d-EventVoiceInput{
						margin-top:0in;
						margin-right:0in;
						margin-bottom:0in;
						margin-left:.75in;
						margin-bottom:.0001pt;
						text-indent:-.25in;
						tab-stops:list .75in;
						font-size:10.0pt;
						font-family:Arial;
						color:#FF6600;}

				.WatermarkDiv
				{
					display: table;
					position: fixed;
					width: 100%;
					height: 100%;
					top: 0px;
					left: 0px;
					text-align: center;
					z-index: -1;
				}

				.WatermarkSpan
				{
					/* 80px is used as it is the largest which allows
					 * a 12 letter word (Confidential) to fit on a monitor
					 * with 1024x768 resolution.
					 */
					font-size: 80px;
					font-weight: bold;
					color: #e9e9e9;
				#endinline;
				if($iIEVersion <= 8 OR $bCompOn){
					#inline
					display: inline-block;
					position: relative;
					top: 50%;
					#endinline;
				}
				else{
					#inline
					display: table-cell;
					vertical-align: middle;
					#endinline;
				};
				#inline
				}

				.WatermarkInnerSpan
				{
					/*Only used in compatibility mode*/
					position: relative;
					top: -50%;
				}

				.Rotate45DegreesCC
				{
				#endinline;
				if($iIEVersion <= 8 OR $bCompOn){
					#inline
					display: inline-block;
					/*background prevents pixelation of edges*/
					background-color: white;
					filter: progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=0.7071067811865476, M12=0.7071067811865475, M21=-0.7071067811865475, M22=0.7071067811865476);
					#endinline;
				}
				else if($iIEVersion == 9){
					#inline
					-ms-transform: rotate(-45deg);
					#endinline;
				}
				else{
					#inline
					transform: rotate(-45deg);
					-webkit-transform: rotate(-45deg);
					#endinline;
				};
				#inline
				}


			#endinline;
			break;
		default:
			super::GetTheme_Builtin( $sRequest );
			break;
	};

	## add in some special CSS content for RTE fields
	AddRTESpecialContentCSS( $sRequest );

}

#******************************No Longer Used*******************************
##===========================================================================
## GetChildPageSizeSettings
##===========================================================================
void SSC_DBObj::GetChildPageSizeSettings()
{
	##do nothing
}
***************************************************************************#

##===========================================================================
## GetFTEntry
##===========================================================================
void SSC_DBObj::GetFTEntry( $nLevels, $sContext, $sRequest, $sNodeStyle, $lsParams,$sFilter,$bCountGroups, $oParent, $vsCols, $vsCellStyles, $vsTagAttrs, $bUnderlineTreeRows )
{
	##Trace("GetFTEntry: " + $nLevels + " / " + $oParent.Ref + " / " + $this.Ref);

	$oThis = *;
	$sTag = $oThis.sGetTagType();

	## my title should be my description plus information about my primary group. However, if I am shown in a tree
	## within my primary group, then we will show only my description since it is clear enough who my boss is.

	$sTitleToUse = "sQualifiedDescription";

	if( Upper( $sRequest ) != "PROCESSTEMPLATES" AND $sRequest != "PrivilegeHolders" )
	{
		if ( $sRequest == "Documentation" )
		{
			if ( $sTag == "DIR" or $sTag == "DOC" or $sTag == "SEC" or $sTag == "PSEC" )
				$sTitleToUse = "sDescriptionWithSection";
			else
			{
				$sTitleToUse = "sDescriptionWithSectionAndGroup";
			};
		}
		else
		{
			## handles adding the section number for search frame
			if ( $sTag == "DIR" or $sTag == "DOC" or $sTag == "SEC" or $sTag == "PSEC" )
				$sTitleToUse = "sDescriptionWithSection";
			else
			{
				$sVisualParentClass = $oParent.classname;
				$oMyPrimaryGroup = oGetPrimaryGroup();
				$oMyParentsPrimaryGroup = $oParent.oGetPrimaryGroup();

				## for the tree, if our parent is a subsystem, then let he, himself be considered his
				## parent group
				if ( $sVisualParentClass == "SSC_SubSystem" )
				{
					$oMyParentsPrimaryGroup = $oParent;

					##for a subsystem we need a different request so that we can add italics to the display.
					## as sQualifiedDescription is used in other places and we ONLY want the italics in the TOC
					if( $sTag == "S" )
						$sTitleToUse = "sQualifiedDecriptionWithItalics";
				};

				if ( $oMyParentsPrimaryGroup == $oMyPrimaryGroup )
					$sTitleToUse = "sDescriptionWithID";
			};
		};
	};

	$sTitle = sGetFTText( $sTitleToUse, false, "sValidate = 'none' sEmptyPrompt='New'" );

	## Need to change the request if we currently have a documentation subsystem in our hand, so
	## that the altered request will carry down from this point in the tree
	if ( ( $sContext == "TOC" ) AND ( $oThis KindOf "SSC_SubSystem_Base" ) )
		if ( bIsDocumentation() )
		{
			## get the user preference for filtering
			$bFilterDocuments = $me.bFilterDocumentTree();

			## if we are not filtering, use the documentation request
			if ( Not $bFilterDocuments )
				$sRequest = "Documentation";
		};

	$bDeleted = bIsPseudoDeleted();

	$bHasChildren = null;

	if( $bDeleted )
		$loMembers = CList();
	else
	{
		## my subitems
		if( $sContext == "search" )
			$loMembers = loGetObjects( $sRequest, "TOC" );
		else
		{
			## determine if the loGetObjects can be skipped
			$bSkipGetObjects = ( $nLevels < 1 And $sFilter == "" );
			if ( $bSkipGetObjects )
			{
				$sKey = $this.Ref + eoi + $oParent.Ref;
				$ssHints = GetRequest( "ssHints" );

				## look for hint to expand this item
				$bSkipGetObjects = ( IsEmpty( $lsParams ) And ( $ssHints == null Or Not ( $ssHints Contains $sKey ) ) )
			};

			## don't bother collecting children under some very specific situations
			## where there is no filter, grouping, and no level value
			if ( $bSkipGetObjects )
			{
				$loMembers = CList();
				## check for subobjects
				$bHasChildren = bHasObjects( $sRequest, $sContext );
			}
			else
				$loMembers = loGetObjects( $sRequest, $sContext );
		};
	};

	if( $sFilter != "" )
	{
		$lsFilters = GetFilter($sFilter);
		$loMembers = loFilterList( $loMembers, $lsFilters, false );
	};

	## save the original for use later
	SetRequest( "lsParams", $lsParams );

	## call my base method to do it
	GetFTEntry( $sTag, $nLevels, $sTitle, $bHasChildren, $loMembers, $sContext, $sRequest,
				$sNodeStyle,$lsParams,$sFilter,$bCountGroups, $oParent, $vsCols, $vsCellStyles, $vsTagAttrs, $bUnderlineTreeRows );
}

##===========================================================================
## bHasObjects_Builtin
## determine is a given kind/scope produces a non-empty object list
## using the most trivial implementation, of just getting the objects
##===========================================================================
variant SSC_DBObj::bHasObjects_Builtin( $sRequest, $sScope )
{
	$sUScope = upper( $sScope );
	if ( $sUScope == "TOC" Or $sUScope == "TREE" )
		$bHasObjects = bHasObjects_b( $sRequest, $sScope );
	else
	{
		$loObjects = loGetObjects_Builtin( $sRequest, $sScope );

		## check if this is empty or not
		$bHasObjects = Not IsEmpty( $loObjects );
	};

	return $bHasObjects;

}

##===========================================================================
## GetPage( sShowingWhat ) - You should call GetPage
##===========================================================================
void SSC_DBObj::GetPage_Builtin( $sShowingWhat )
{
	$oThis = *;
	switch ( $sShowingWhat )
	{
		case "Home":
		case "Dashboard":
		case "Details":
		case "Values":
		case "Markups":
		case "AssociatedItems":
		case "Attachments":
		case "History":
		case "Preferences":
		case "Privileges":
			$lsPageDefs = lsGetPageSections($sShowingWhat);
			if(IsEmpty($lsPageDefs))
			{
				::Redirect( "comingsoon.ase?sFeature=" + $sShowingWhat );
				break;
			};
			WriteStandardPage( $lsPageDefs, $sShowingWhat );
			break;
		case "ActionItems":
			##needed for tables so they can check for display preferences
			SetRequest( "sPageRequest", $sShowingWhat );
			GetSnippet( "ActionItemsBlockPageOpening" );
			GetSnippet( "ActionItemsBlock" );
			GetSnippet( "StandardWordPageClosing" );
			break;
		case "Version":
			$bActions = true;
			VersionReport($oThis, $bActions);
			break;
		case "Notes":
			GetNotebook();
			break;
		case "Traceability":
			$sTraceType	= GetRequest( "sTraceType" );

			if ( $sTraceType == NULL )
				$sTraceType = GetDaoContext( "sTraceType" );
			else
				SetDaoContext( "sTraceType", $sTraceType );

			if ( $sTraceType == NULL )
				$sTraceType = "Normal";

			if ( $sTraceType == "Normal" )
			{
				$lsPageDefs = lsGetPageSections($sShowingWhat);
				if(IsEmpty($lsPageDefs))
				{
					::Redirect( "comingsoon.ase?sFeature=" + $sShowingWhat );
					break;
				};
				WriteStandardPage( $lsPageDefs, $sShowingWhat );
			}
			else if ( $sTraceType == "Graphical" )
			{
				$sContext		= GetRequest( "sContext" );
				$sRequest		= GetRequest( "sRequest" );
				$sNodeStyle		= GetRequest( "sNodeStyle" );

				GetFlexMindPage( $sContext, $sRequest, $sNodeStyle );
			}
			else if ( $sTraceType == "StigGraphical" )
			{
				$sContext		= GetRequest( "sContext" );
				$sRequest		= GetRequest( "sRequest" );
				$sNodeStyle		= GetRequest( "sNodeStyle" );

				GetStigPage( $sContext, $sRequest, $sNodeStyle );
			};

			break;
		case "DerivedDifferencesReport":
			$sVersion = GetRequest( "sVersion" );
			if( $sVersion == NULL )
				$sVersion = "";
			DerivedDifferencesReport( $sVersion );
			break;
		default:
			super::GetPage_Builtin( $sShowingWhat );
			break;
	};
}

##===========================================================================
## GetDashboard
##===========================================================================
void SSC_DBObj::GetDashboard() {
	## Set Defaults
	JSONObject $joConfig;
	JSONObject $joContent;
	$joConfig.Set( "rows", 3 );
	$joConfig.Set( "cols", 3 );
	$joConfig.Set( "sparse", false );
	$joConfig.Set( "hideEmpties", false );
	$joConfig.Set( "hideLines", false );
	$joConfig.Set( "content", $joContent );

	GetDashboard( $joConfig );
}

void SSC_DBObj::GetDashboard( JSONObject $joConfig )
{
	## get rows and columns (use defaults if not in config)
	$iRows = $joConfig.Get( "rows" );
	$iCols = $joConfig.Get( "cols" );
	if ( Not $iRows ) $iRows = 3;
	if ( Not $iCols ) $iCols = 3;

	$bSparse = $joConfig.Get( "sparse" );
	JSONObject $joContent = $joConfig.Get( "content" );
	JSONObject $joSnippets;

	if ( Not $bSparse AND $joContent.Size() < ( $iRows * $iCols ) ) {
		$joSnippets = GetDefaultDashboardContent();
	};

	if ( NOT $joContent.IsEmpty() ) {
		$joSnippets.Add( $joContent );
	};

	#inline
		<style type="text/css">

			.i
			{
				border:1px solid gray;
				background-color:white;
				vertical-align:top;
				height:168px;
			}
			.centercontent
			{
				height:138px;
				overflow-y:hidden;
				padding-top:0px;
				padding-left:3px;
				width:100%;
				text-align:center;
			}
			.content
			{
				text-align:left;
				height:150px;
				overflow-y:auto;
				padding-top:3px;
				padding-left:3px;
				width:99%;
				padding-bottom:12px;
			}
			.fullcontent
			{
				text-align:left;
				height:168px;
				overflow-y:auto;
				padding-top:3px;
				padding-left:3px;
				width:99%;
			}
			.fullcontent_double
			{
				text-align:left;
				height:200px;
				overflow-y:auto;
				overflow-x:auto;
				padding-top:3px;
				padding-left:3px;
				width:99%;
			}
			.a
			{
				height:10px;
			}
	#endinline;

	## are we adding the classes that create the lines to connect the cells
	## if hide lines is not specified, we default to showing them
	if ( NOT $joConfig.Get( "hideLines" ) ) {
	#inline
			.b
			{
				height:10px;
				border-bottom:1px solid blue;
			}
			.c
			{
				height:10px;
				border-bottom:1px solid blue;
				border-left:1px solid blue;
			}
			.d
			{
				height:10px;
				border-bottom:1px solid blue;
				border-right:1px solid blue;
			}
			.e
			{
				height:10px;
				border-left:1px solid blue;
			}
			.f
			{
				height:10px;
				border-top:1px solid blue;
				border-left:1px solid blue;
			}
			.g
			{
				height:10px;
				border-top:1px solid blue;
				border-right:1px solid blue;
			}
			.l
			{
				border-bottom:1px solid gray;
				background-color: #D3D3D3; ## #9CC7FF; #FFFF99;
				padding:2px;
				height:18px;
			}
		#endinline;
		};

		## determine which cells are empty so we don't spend time in GetSnippet calls
		$lsEmpties = CList();
		for ( $iRow = 1; $iRow <= $iRows; $iRow += 1 ){
			$lsRowEmpties = Clist();
			for ( $iCol = 1; $iCol <= $iCols; $iCol += 1 ){
				if ( NOT $joSnippets.Get( $iRow + "_" + $iCol ) )
					$lsRowEmpties << "Dashboard_" + $iRow + "_" + $iCol;
			};
			if ( Count( $lsRowEmpties ) == $iCols )
				$lsEmpties << "Dashboard_" + $iRow + "_All";
			$lsEmpties << $lsRowEmpties;
		};

		## if we are hiding empty boxes, add classes to remove those borders
		## default is to show empty cells if hideEmpties is not specifically set to true
		if ( $joConfig.Get( "hideEmpties" ) And NOT IsEmpty( $lsEmpties ) ) {
				$sEmptyCSSClasses = "." + join( $lsEmpties, ", ." );
		#inline
			<% $sEmptyCSSClasses %> {
				border: none;
			}

		#endinline;
		};

		#inline
			.ll
			{
				/*NavigationLink color*/
				color:#15C;
				text-decoration:underline;
				cursor:pointer;
			}
			.t
			{
				border-collapse: collapse;
				empty-cells:show;
				font-family: verdana;
				font-size: 8pt;
				text-align:center;
				table-layout:fixed;
				width:100%;
			}

		</style>

		<div style="background-color:white;padding:4px;" >
			<table class=t cellspacing=0 cellpadding=0 >
			<tr>
				<td></td>
				<td style="width:0px;"></td>
				<td></td>
				<td style="width:10px;"></td>
				<td style="width:10px;"></td>
				<td></td>
				<td style="width:0px;"></td>
				<td></td>
				<td style="width:10px;"></td>
				<td style="width:10px;"></td>
				<td></td>
				<td style="width:0px;"></td>
				<td></td>
			</tr>
			<tr>
				<td class="i Dashboard_1_1" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_1_1" ? "" : GetSnippet( $joSnippets.Get( "1_1" ) );%>
				</td>
				<td></td>
				<td></td>
				<td class="i Dashboard_1_2" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_1_2" ? "" : GetSnippet( $joSnippets.Get( "1_2" ) );%>
				</td>
				<td></td>
				<td></td>
				<td class="i Dashboard_1_3" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_1_3" ? "" : GetSnippet( $joSnippets.Get( "1_3" ) );%>
				</td>
			</tr>
			<tr>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
			<tr>
				<td></td>
				<td></td>
				<td class="c Dashboard_1_1"></td>
				<td class="b Dashboard_1_1"></td>
				<td class="b Dashboard_1_1"></td>
				<td class="b Dashboard_1_1"></td>
				<td class="e Dashboard_1_2"></td>
				<td class="b Dashboard_1_3"></td>
				<td class="b Dashboard_1_3"></td>
				<td class="b Dashboard_1_3"></td>
				<td class="d Dashboard_1_3"></td>
				<td></td>
				<td></td>
			</tr>
			<tr>
				<td class="a"></td>
				<td class="a" colspan="2"></td>
				<td class="a" colspan="2"></td>
				<td class="a"></td>
				<td class="e Dashboard_1_All"></td>
				<td class="a"></td>
				<td class="a" colspan="2"></td>
				<td class="a" colspan="2"></td>
				<td class="a"></td>
			</tr>
			<tr>
				<td class="i Dashboard_2_1" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_2_1" ? "" : GetSnippet( $joSnippets.Get( "2_1" ) );%>
				</td>
				<td class="b Dashboard_2_1"></td>
				<td class="b Dashboard_2_1"></td>
				<td class="i Dashboard_2_2" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_2_2" ? "" : GetSnippet( $joSnippets.Get( "2_2" ) );%>
				</td>
				<td class="b Dashboard_2_3"></td>
				<td class="b Dashboard_2_3"></td>
				<td class="i Dashboard_2_3" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_2_3" ? "" : GetSnippet( $joSnippets.Get( "2_3" ) );%>
				</td>
			</tr>
			<tr>
				<td class="a"></td>
				<td class="a"></td>
				<td class="a"></td>
				<td class="a"></td>
			</tr>
			<tr>
				<td></td>
				<td></td>
				<td class="b Dashboard_3_1"></td>
				<td class="b Dashboard_3_1"></td>
				<td class="b Dashboard_3_1"></td>
				<td class="b Dashboard_3_1"></td>
				<td class="e Dashboard_3_All"></td>
				<td class="b Dashboard_3_3"></td>
				<td class="b Dashboard_3_3"></td>
				<td class="b Dashboard_3_3"></td>
				<td class="b Dashboard_3_3"></td>
				<td></td>
				<td></td>
			</tr>
			<tr>
				<td></td>
				<td></td>
				<td class="f Dashboard_3_1"></td>
				<td class="a Dashboard_3_1"></td>
				<td class="a Dashboard_3_1"></td>
				<td class="a Dashboard_3_1"></td>
				<td class="e Dashboard_3_2"></td>
				<td class="a Dashboard_3_3"></td>
				<td class="a Dashboard_3_3"></td>
				<td class="a Dashboard_3_3"></td>
				<td class="g Dashboard_3_3"></td>
				<td></td>
				<td></td>
			</tr>
			<tr>
				<td class="i Dashboard_3_1" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_3_1" ? "" : GetSnippet( $joSnippets.Get( "3_1" ) );%>
				</td>
				<td></td>
				<td></td>
				<td class="i Dashboard_3_2" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_3_2" ? "" : GetSnippet( $joSnippets.Get( "3_2" ) );%>
				</td>
				<td></td>
				<td></td>
				<td class="i Dashboard_3_3" colspan="3" rowspan="2">
					<% $lsEmpties CONTAINS "Dashboard_3_3" ? "" : GetSnippet( $joSnippets.Get( "3_3" ) );%>
				</td>
			</tr>
			<tr>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
			</table>
		</div>
	#endinline;

}

##===========================================================================
## GetDashboard
##===========================================================================
variant SSC_DBObj::GetDefaultDashboardContent()
{
	JSONObject $joDefaults;

	$joDefaults.Set( "1_1", "DashboardNW" );
	$joDefaults.Set( "1_2", "DashboardN" );
	$joDefaults.Set( "1_3", "DashboardNE" );
	$joDefaults.Set( "2_1", "DashboardW" );
	$joDefaults.Set( "2_2", "DashboardC" );
	$joDefaults.Set( "2_3", "DashboardE" );
	$joDefaults.Set( "3_1", "DashboardSW" );
	$joDefaults.Set( "3_2", "DashboardS" );
	$joDefaults.Set( "3_3", "DashboardSE" );

	return $joDefaults;
}


##----------------------------------------------------------------------------
## FIX ME -- Moved here for now but DEFINITELY NEEDS CLEANUP
##----------------------------------------------------------------------------
##===========================================================================
## loGetObjectsFromProject
##===========================================================================
variant SSC_DBObj::loGetObjectsFromProject( $sRequest )
{
	$sSubRequest = "";
	if( find( $sRequest, EOI ) != -1 )
	{
		$sSubRequest = Item( $sRequest, 2, 9999, EOI );
		$sRequest = Item( $sRequest, 1, 1, EOI );
	};

	$oProject = ::oProjectCurrentlyBeingViewed();
	$loObjects = CList();
	if( $sRequest == "PeopleAndGroups" )
	{
		$oAppObj = SSC_AppObj_Base::oGet_s();
		$loObjects << $oAppObj.loGetObjects_b( "People", "Below" );
		$loObjects << $oAppObj.loGetObjects_b( "usergroups", "Below" );
	}
	else if( $sRequest == "UserGroups" )
	{
		$oAppObj = SSC_AppObj_Base::oGet_s();
		$loObjects << $oAppObj.loGetObjects_b( "usergroups", "Below" );
	}
	else if( $sRequest == "People" )
	{
		$oAppObj = SSC_AppObj_Base::oGet_s();
		$loObjects << $oAppObj.loGetObjects_b( "People", "Below" );
	}
	else if( find( $sRequest, "ksPriv" ) != -1 )
	{
		$loObjects << loGetObjects_b( $sRequest, "Candidates" );
		##$loObjects << loGetObjects_b( "PrivilegeHolders", "Below" );
	}
	else if( $sRequest == "PrivilegeHolders" )
	{
		$loObjects << loGetObjects_b( $sRequest, "Below" );
	}
	else if( $sRequest == "Attachments_All" )
	{
		##this is a special scope only used for attachments
		$loObjects << $oProject.loGetObjects( "Attachments", "All" );
	}
	else if( $sRequest == "Roles" )
	{
		$oAppObj = SSC_AppObj_Base::oGet_s();
		$loObjects << $oAppObj.loGetObjects_b( "Roles", "Below" );
	}
	else if( $sRequest == "Projects" )
	{
		$oAppObj = SSC_AppObj_Base::oGet_s();
		$loObjects << $oAppObj.loGetObjects_b( "ActiveProjects", "Below" );
	}
	else if( Upper( $sRequest ) == "UDAS" )
	{
		$oRegistrar = oGetLocalRegistrar();

		if( $sSubRequest == "" )
		{
			$lsClasses = AseRegistrar::wsGetUserExtensibleClasses_s();
			$lsClasses/
			{
				$sClass = *;
				$loObjects << AseAttribute::loGetUDAsByClass_s( $sClass, $oRegistrar );
			};
		}
		else
			$loObjects << AseAttribute::loGetUDAsByClass_s( $sSubRequest, $oRegistrar );
	}
	else if( $sRequest == "OutputLinks" OR $sRequest == "CommonInputs" )
	{
		$loObjects << $oProject.loGetObjects( "Requirements", "Below" );
	}
	else if( $sRequest == "Directories" )
	{
		## this is only for the linker
		$loObjects = $oProject.loGetObjects( "Documents", "Below" )[iSubSysType == 201];
	}
	else if( $sRequest == "Documents" )
	{
		## this is only for the linker
		$loObjects = $oProject.loGetObjects( "Documents", "Below" )[iSubSysType == 202];
	}
	else if( $sRequest == "Organizations" )
	{
		$oAppObj = SSC_AppObj_Base::oGet_s();
		$loObjects << $oAppObj.loGetObjects_b( "Organizations", "Below" );
	}
	else
	{
		$loObjects << $oProject.loGetObjects( $sRequest, "Below" );
	};

	return $loObjects;
}
##===========================================================================
## GetFlexTableCell
##===========================================================================
void SSC_DBObj::sGetFlexTableCell($sData,$bMakeEditable,$sTags,$bLinked,$oRequestor)
{
	$sOriginal = $sData;
	if( find($sData,EOI) != -1 )
	{
		$lsData = split($sData,EOI);
		$sSupData = pick($lsData,1);
		$sData = First($lsData);
	};
	switch( $sData )
	{
		case "sSensitivity":
		case "sPercentContribution":
			$oThis = *;
			$oRequestor.GetSensitivityTrace($oThis, $sData);
			break;

		case "sOwnerLink":

			$oOwner = oGetByRole( "OWNER" );
			if ( $oOwner != NULLOBJECT )
				$sResponse = $oOwner.GetLink();

			break;
		case "sVersion":
			SetRequest("oParent",$oRequestor);
			GetSnippet($sData);
			break;


		case "sDataSection":
			$sData = "sTargetValueByName" + EOI + $sSupData;
			SetRequest( "bMakeEditable", $bMakeEditable );
			SetRequest( "sTags", $sTags );
			GetSnippet( $sData );
			break;
		case "RatingPareto":
			## the first time this is called per table it calculates the max score for the current table
			$nMax = GetThreadContext( "nMaxRatingScore" );
			if( $nMax == NULL )
			{
				##compute the max and set it on the context
				$loObjects = GetThreadContext( "loFlexTableObjects" );
				$nMax = $oRequestor.nGetRatingScoreMax( $loObjects );
				SetThreadContext( "nMaxRatingScore", $nMax );
			};

			## continue calling down to GetSnippet to draw the pareto for the object,
			## as the code to draw the pareto is in GetSnippet on the Requirement
			SetRequest( "bMakeEditable", $bMakeEditable );
			SetRequest( "sTags", $sTags );
			SetRequest( "sParentRef", $oRequestor.Ref );
			GetSnippet( $sData );
			break;
		case "Derived Differences Link":
			$oRequestor.GetSnippet( "Derived Differences Link" );

			break;
		default:
			super::sGetFlexTableCell( $sOriginal, $bMakeEditable, $sTags, $bLinked, $oRequestor );

			break;
	};
}

##==================================================================================
## lsGetSnippetList
##==================================================================================
variant SSC_DBObj::lsGetSnippetList($sRequest)
{
	$lsSnippetList = CList();
	$sClass = sGetClassNameFromRequest( $sRequest );

	$oRegistrar = oGetLocalRegistrar();

	## gather all snippets for this class and are NOT disabled (using proper inheritance)
	$loSnippets = AseSnippet::loGetSnippetsByClass_s( $sClass, $oRegistrar )[ bDisabled == false ];

	$loSnippets/
	{
		$sName = *.sName;
		$sDescription = *.sDescription;
		$lsSnippetList << $sDescription + "|" + $sName;
   	};

   	## add namespace snippets
   	$lsSnippetList << SSC_AppObj_Base::lsGetNameSpaceConfigOptions( $this, $sClass, $sRequest, "snippet" );

	switch( Upper( $sRequest ) )
	{
		case "VOICES":
			$lsSnippetList << SSC_VOC_Base::lsGetSnippetList_Builtin();
			break;
		case "REQUIREMENTS":
			$lsSnippetList << SSC_SysReq_Base::lsGetSnippetList_Builtin();
			break;
		case "GROUPS":
		case "BREAKDOWNS":
		case "DOCUMENTS":
			$lsSnippetList << SSC_SubSystem_Base::lsGetSnippetList_Builtin();
			break;
		case "ACTIONITEMS":
			$lsSnippetList << SSC_Action::lsGetSnippetList_Builtin();
			break;
		case "RISKS":
			$lsSnippetList << SSC_Risk::lsGetSnippetList_Builtin();
			break;
		case "MITIGATIONS":
			$lsSnippetList << SSC_Mitigation_Base::lsGetSnippetList_Builtin();
			break;
		case "TESTS":
		case "STEPS":
		case "DEFAULTSTEPS":
		case "MILESTONESTEPS":
			$lsSnippetList << SSC_Test::lsGetSnippetList_Builtin();
			break;
		case "ATTACHMENTS":
			$lsSnippetList << SSC_ExtDocument_Base::lsGetSnippetList_Builtin();
			break;
		case "NOTES":

			## For now, notes don't have Item Name, etc, so let's clear the list. They also don't currently have customizations.
			$lsSnippetList = SSC_Note::lsGetSnippetList_Builtin();
			break;
		case "DEFECTS":
		case "DEFECTSBYMILESTONE":
			$lsSnippetList << SSC_Defect_Base::lsGetSnippetList_Builtin();
			break;
		case "FOLDERS":
		default:
			$lsSnippetList << COG_Base::lsGetSnippetList_Builtin();
			break;
	};
	return $lsSnippetList;
}

#*!***************************************************************************************************
 * <summary>
 * 	Returns a list of table definitions available for the object types as a list of strings in the format "Description|Name". Possible types include:
 *     VOICES
 *     REQUIREMENTS
 *     GROUPS
 *     DOCUMENTS
 *     ACTIONITEMS
 *     RISKS
 *     MITIGATIONS
 *     TESTS
 *     ATTACHMENTS
 *     NOTES
 *     DEFECTS
 *     FOLDERS
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
 * <returns>String List</returns>
*****************************************************************************************************#
variant SSC_DBObj::lsTableDefList($sRequest)
{
	$lsTableDefList = CList();
	$sClass = sGetClassNameFromRequest( $sRequest );

	if( GetRequest( "bInTree" ) == NULL )
	{
		$lsTableDefList << "Item Name|Item Name";
		$lsTableDefList << "Item Name Qualified|Item Name Qualified";
		$lsTableDefList << "Item Name Undecorated|Item Name Undecorated";
		$lsTableDefList << "Item Name Qualified and Undecorated|Item Name Qualified and Undecorated";
		$lsTableDefList << "Item Link|Item Link";
		$lsTableDefList << "Item Link Qualified|Item Link Qualified";
		$lsTableDefList << "Item Link Undecorated|Item Link Undecorated";
		$lsTableDefList << "Item Link Qualified and Undecorated|Item Link Qualified and Undecorated";
		$lsTableDefList << "Item Name w/Indentation|Item Name w/Indentation";
		$lsTableDefList << "Item Name Qualified by Project Name|Item Name Qualified by Project Name";
		$lsTableDefList << "Item Name Qualified by Project Name And Version|Item Name Qualified by Project Name And Version";
		$lsTableDefList << "Workflow|Workflow";
	};

	$oRegistrar = oGetLocalRegistrar();

	## gather all table defs for this class and are NOT disabled (using proper inheritance)
	$loCustomTableDefs = AseTableDef::loGetTableDefsByClass_s( $sClass, $oRegistrar )[ bDisabled == false ];

	$loCustomTableDefs/
	{
		$sName = *.sName;
		$sDescription = *.sDescription;
		$lsTableDefList << $sDescription + "|" + $sName;
   	};

   	## gather all namespace based table defs
   	$lsTableDefList << SSC_AppObj_Base::lsGetNameSpaceConfigOptions( $this, $sClass, $sRequest, "tabledef" );

	switch( Upper( $sRequest ) )
	{
		case "VOICES":
			$lsTableDefList << SSC_VOC_Base::lsTableDefList_Builtin($sRequest);
			break;
		case "REQUIREMENTS":
			$lsTableDefList << SSC_SysReq_Base::lsTableDefList_Builtin($sRequest);
			break;
		case "GROUPS":
		case "BREAKDOWNS":
		case "DOCUMENTS":
			$lsTableDefList << SSC_SubSystem_Base::lsTableDefList_Builtin($sRequest);
			break;
		case "ACTIONITEMS":
			$lsTableDefList << SSC_Action::lsTableDefList_Builtin($sRequest);
			break;
		case "RISKS":
			$lsTableDefList << SSC_Risk::lsTableDefList_Builtin($sRequest);
			break;
		case "MITIGATIONS":
			$lsTableDefList << SSC_Mitigation_Base::lsTableDefList_Builtin($sRequest);
			break;
		case "TESTS":
		case "STEPS":
		case "DEFAULTSTEPS":
		case "MILESTONESTEPS":
			$lsTableDefList << SSC_Test::lsTableDefList_Builtin($sRequest);
			break;
		case "ATTACHMENTS":
			$lsTableDefList << SSC_ExtDocument_Base::lsTableDefList_Builtin($sRequest);
			break;
		case "NOTES":

			## For now, notes don't have Item Name, etc, so let's clear the list. They also don't currently have customizations.
			$lsTableDefList = SSC_Note::lsTableDefList_Builtin($sRequest);
			break;
		case "DEFECTS":
		case "DEFECTSBYMILESTONE":
			$lsTableDefList << SSC_Defect_Base::lsTableDefList_Builtin($sRequest);
			break;
		case "FOLDERS":
		default:
			$lsTableDefList << COG_Base::lsTableDefList_Builtin( $sRequest );
			break;
	};
	return $lsTableDefList;
}
##==================================================================================
## lsFMEADefList
##==================================================================================
variant SSC_DBObj::lsFMEADefList( $sRequest )
{
	$lsDefList = CList();
	$oRegistrar = oGetLocalRegistrar();

	## gather all table defs for this class and are NOT disabled (using proper inheritance)
	$loCustomTableDefs = AseTableDef::loGetFMEATableDefsByClass_s( $sRequest, $oRegistrar )[ bDisabled == false ];

	$loCustomTableDefs/
	{
		$sName = *.sName;
		$sDescription = *.sDescription;
		$lsDefList << $sDescription + "|" + $sName;
   	};
   	$lsDefList << "Default|Default";
   	$lsDefList << "FMEA Using Score Calculation|FMEA Using Score Calculation";
   	$lsDefList << "FMEA with Mitigation RPN Columns|FMEA with Mitigation RPN Columns";
   	$lsDefList << "FMEA with Mitigation SxO Columns|FMEA with Mitigation SxO Columns";
   	$lsDefList << "Risks FMEA|Risks FMEA";
   	$lsDefList << "Requirements FMEA|Requirements FMEA";

	return $lsDefList;
}
##===================================================================================
## GetFlexTableSection
##
##===================================================================================
void SSC_DBObj::GetFlexTableSection( $sRequest, $sPlugins )
{
	## Check if any format hints were passed in
	$sLinkerParams = GetRequest("sLinkerParams");
	if( $sLinkerParams == NULL )
		$sLinkerParams = "";

	$sEditParams = GetRequest( "sEditParams" );
	if( $sEditParams == NULL )
		$sEditParams = "";

	$sFormat = GetRequest( "sFormat" );
	if( $sFormat == NULL OR $sFormat == "" )
	{
		$sFormat = "Standard";
		$sClassname = $this.classname;
		## If a VOC or requirement pointing to the other, use a RatingLinks format
		if((($sClassname == "SSC_VOC")AND($sRequest == "Requirements")) OR (($sClassname == "SSC_SysReq")AND($sRequest == "Voices")))
			$sFormat = "RatingLink";
		## Handle roof links as a special case
		if($sLinkerParams == "Interactions")
			$sFormat = "RoofLink";
		## If a risk showing mitigations, use the RiskChild format
		if(($sClassname == "SSC_Risk")AND($sRequest == "Mitigations"))
			$sFormat = "RiskChild";
		## If a privilege object use the privilege format
		if(($sClassname == "SSC_Privilege")AND($sRequest == "PeopleAndGroups"))
			$sFormat = "Privilege";

		if( $sRequest == "Requirements" AND ($sClassname != "SSC_VOC"))
			$sFormat = "Reqs_Standard";
	};

	$sFilter = GetRequest( "sFilter" );
	if( $sFilter == NULL )
		$sFilter = "";

	$sGrouping = GetRequest( "sGrouping" );
	if( $sGrouping == NULL )
		$sGrouping = "";

	GetFlexTableSection( $sRequest, $sPlugins, $sLinkerParams, $sEditParams, $sFormat, $sFilter, $sGrouping );
}

##===================================================================================
## GetFlexTableSection
##
##===================================================================================
void SSC_DBObj::GetFlexTableSection( $sRequest, $sPlugins, $sLinkerParams )
{
	$sEditParams = GetRequest( "sEditParams" );
	if( $sEditParams == NULL )
		$sEditParams = "";

	$sFormat = GetRequest( "sFormat" );
	if( $sFormat == NULL OR $sFormat == "" )
	{
		$sFormat = "Standard";
		$sClassname = $this.classname;
		## If a VOC or requirement pointing to the other, use a RatingLinks format
		if((($sClassname == "SSC_VOC")AND($sRequest == "Requirements")) OR (($sClassname == "SSC_SysReq")AND($sRequest == "Voices")))
			$sFormat = "RatingLink";
		## Handle roof links as a special case
		if($sLinkerParams == "Interactions")
			$sFormat = "RoofLink";
		## If a risk showing mitigations, use the RiskChild format
		if(($sClassname == "SSC_Risk")AND($sRequest == "Mitigations"))
			$sFormat = "RiskChild";
		## If a privilege object use the privilege format
		if(($sClassname == "SSC_Privilege")AND($sRequest == "PeopleAndGroups"))
			$sFormat = "Privilege";

		if( $sRequest == "Requirements" AND ($sClassname != "SSC_VOC"))
			$sFormat = "Reqs_Standard";
	};

	$sFilter = GetRequest( "sFilter" );
	if( $sFilter == NULL )
		$sFilter = "";

	$sGrouping = GetRequest( "sGrouping" );
	if( $sGrouping == NULL )
		$sGrouping = "";

	GetFlexTableSection( $sRequest, $sPlugins, $sLinkerParams, $sEditParams, $sFormat, $sFilter, $sGrouping );
}

#*!***************************************************************************************************
 * <summary>
 * 	Renders a flex table using simplfied parameters
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$sRequest" type="String">The object request</param>
 * <param name="$sPlugins" type="String">Any string parameters to apply</param>
 * <param name="$sLinkerParams" type="String">How the objects link to the parent showing the table, should be "Child", "Parent" or "Interactions"</param>
 * <param name="$sEditParams" type="String">How objects can be added to the table, should be "Create", "Add", "Both" or "None" </param>
*****************************************************************************************************#
void SSC_DBObj::GetFlexTableSection( $sRequest, $sPlugins, $sLinkerParams, $sEditParams )
{
	$sFormat = GetRequest( "sFormat" );
	if( $sFormat == NULL OR $sFormat == "" )
	{
		$sFormat = "Standard";
		$sClassname = $this.classname;
		## If a VOC or requirement pointing to the other, use a RatingLinks format
		if((($sClassname == "SSC_VOC")AND($sRequest == "Requirements")) OR (($sClassname == "SSC_SysReq")AND($sRequest == "Voices")))
			$sFormat = "RatingLink";
		## Handle roof links as a special case
		if($sLinkerParams == "Interactions")
			$sFormat = "RoofLink";
		## If a risk showing mitigations, use the RiskChild format
		if(($sClassname == "SSC_Risk")AND($sRequest == "Mitigations"))
			$sFormat = "RiskChild";
		## If a privilege object use the privilege format
		if(($sClassname == "SSC_Privilege")AND($sRequest == "PeopleAndGroups"))
			$sFormat = "Privilege";

		if( $sRequest == "Requirements" AND ($sClassname != "SSC_VOC"))
			$sFormat = "Reqs_Standard";
	};

	$sFilter = GetRequest( "sFilter" );
	if( $sFilter == NULL )
		$sFilter = "";

	$sGrouping = GetRequest( "sGrouping" );
	if( $sGrouping == NULL )
		$sGrouping = "";

	GetFlexTableSection( $sRequest, $sPlugins, $sLinkerParams, $sEditParams, $sFormat, $sFilter, $sGrouping );
}

## ====================================================================
## Method Name: sStripExtraHTMLTags
## Owner Class: SSC_DBObj
## Strips <html>, <head>, and <body> tags from rich text fields
## Assumes there are 0 or 1 of each
## TODO: Change all regex replaces to replace with "" instead of " "
##       whenever ASE regex fix available
## ====================================================================
variant SSC_DBObj::sStripExtraHTMLTags( $s )
{
	## Split on CRLF so the regex doesn't have to run against an enormous string
	$lsLines = Split( $s, CRLF );
	$bFoundHtmlOpenTag = false;
	$bFoundHtmlCloseTag = false;
	$bFoundHeadOpenTag = false;
	$bFoundHeadCloseTag = false;
	$bFoundBodyOpenTag = false;
	$bFoundBodyCloseTag = false;
	$bLookingForOpenTagFinish = false;
	$vOut = CVector( String );

	$lsLines/
	{
		$sLine = *;

		## Look for a > to finish an open tag (ex. <html CRLF>)
		if ( $bLookingForOpenTagFinish )
		{
			$sTmpLine = $sLine ~ "s/[^>]*>/ /i";
			$bLookingForOpenTagFinish = $sLine == $sTmpLine;
			if ( $bLookingForOpenTagFinish == false )
			{
				$sLine = $sTmpLine;
			};
		};

		if ( $bLookingForOpenTagFinish == false )
		{
			if ( $bFoundHtmlOpenTag == false )
			{
				$sTmpLine = $sLine ~ "s/<html\b[^>]*(>)?/ /i";
				$bFoundHtmlOpenTag = $sLine != $sTmpLine;
				if ( $bFoundHtmlOpenTag )
				{
					$sLine = $sTmpLine;

					if ( $re1 == "" )
					{
						## Need to find >
						$bLookingForOpenTagFinish = true;
					};
				};
			};

			if ( $bLookingForOpenTagFinish == false And $bFoundHtmlOpenTag And $bFoundHtmlCloseTag == false )
			{
				$sTmpLine = $sLine ~ "s/<\/html\b[^>]*>/ /i";
				$bFoundHtmlCloseTag = $sLine != $sTmpLine;
				if ( $bFoundHtmlCloseTag )
				{
					$sLine = $sTmpLine;
				};
			};

			if ( $bLookingForOpenTagFinish == false And $bFoundBodyOpenTag == false )
			{
				$sTmpLine = $sLine ~ "s/<body\b[^>]*(>)?/ /i";
				$bFoundBodyOpenTag = $sLine != $sTmpLine;
				if ( $bFoundBodyOpenTag )
				{
					$sLine = $sTmpLine;
					if ( $re1 == "" )
					{
						## Need to find >
						$bLookingForOpenTagFinish = true;
					};
				};
			};

			if ( $bLookingForOpenTagFinish == false And $bFoundBodyOpenTag And $bFoundBodyCloseTag == false )
			{
				$sTmpLine = $sLine ~ "s/<\/body\b[^>]*>/ /i";
				$bFoundBodyCloseTag = $sLine != $sTmpLine;
				if ( $bFoundBodyCloseTag )
				{
					$sLine = $sTmpLine;
				};
			};

			if ( $bLookingForOpenTagFinish == false And $bFoundHeadOpenTag == false )
			{
				$sTmpLine = $sLine ~ "s/<head\b[^>]*(>)?/ /i";
				$bFoundBodyOpenTag = $sLine != $sTmpLine;
				if ( $bFoundBodyOpenTag )
				{
					$sLine = $sTmpLine;
					if ( $re1 == "" )
					{
						## Need to find >
						$bLookingForOpenTagFinish = true;
					};
				};
			};

			if ( $bLookingForOpenTagFinish == false And $bFoundHeadOpenTag And $bFoundHeadCloseTag == false )
			{
				$sTmpLine = $sLine ~ "s/<\/head\b[^>]*>/ /i";
				$bFoundBodyCloseTag = $sLine != $sTmpLine;
				if ( $bFoundBodyCloseTag )
				{
					$sLine = $sTmpLine;
				};
			};
		};

		$vOut << $sLine;
	};
	return Join( $vOut, CRLF );
}

#*!***************************************************************************************************
 * <summary>
 * 	Replaces partial image uploads with the correct managed doc url where possible
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <param name="$s" type="String">RTE contents</param>
 * <returns>RTE contents with partial image uploads fixed where possible</returns>
*****************************************************************************************************#
variant SSC_DBObj::sHandlePartialImageUploads( $s )
{
	$bHasPartialImageUpload = Find( $s, "ephox-salmon-upload-image-in-progress" ) > -1;
	if ( Not $bHasPartialImageUpload )
	{
		return $s;
	};

	## Get all of the image uploads that have started in this session for this object
	$sAvailableRTEIDS = $this.Context.Get( "SSC_ExtDocument_ALLRTEIDS" );
	if ( $sAvailableRTEIDS == NULL )
	{
		$sAvailableRTEIDS = "";
	};

	$lsAvailableRTEIDS = Split( $sAvailableRTEIDS, EOI );
	$lsAvailableRTEIDS[ * != "" ]/
	{
		$sRTEID = *;
		$sDocRefAndExt = $dao.Context.Get( "SSC_ExtDocument_" + $sRTEID );
		$sDocRef = Item( $sDocRefAndExt, 1, 1, EOI );
		$oDoc = CObj( $sDocRef );
		if ( $oDoc )
		{
			## get the connection object back for this document
			## get the "real" requestor
			$oRealObj = $this.oGetPrivilegingObj();

			## If a category we need to check if it is a proxy for another object
			if ( $oRealObj.classname == "SSC_Category" )
			{
				## Check for proxy
				$oProxy = $oRealObj.oActualObj;
				if ( $oProxy.IsValid ) $oRealObj = $oProxy;
			};
			$oCon = $oDoc.oGetLinkObj( $oRealObj, "" );
			if ( $oCon )
			{
				$sID = $oCon.sID;
				$sExt = Item( $sDocRefAndExt, 2, 2, EOI );

				## construct the appropriate content for this document, including version content
				$sToSend = "ManagedDoc/" + $oRealObj.Ref + "/" + $sID + "." + $sExt + "?sConID=" + $sID + "&iVersion=-1&eoi";

				## Find any divs that have the partial upload class, check if their ID matches, and replace the whole segment with the correct image tag
				$sRegex = "s#<img.*?src=""[^""]*?"".*?data-ephox-salmon-image-upload=""" + $sRTEID + """.*?class=""ephox-salmon-upload-image-in-progress"">";
				$sRegex += "#<img src=""" + $sToSend + """ onresize=""if(top.imageResizeEvent)top.imageResizeEvent( this, event );"" />#gi";
				$s = $s ~ $sRegex;
			};
		};
	};

	return $s;
}

#*!***************************************************************************************************
 * <summary>
 * 	Encodes attachment image links for storage in the cockpit
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$s" type="String">The string to encode</param>
 * <param name="$sRequest" type="String">The originator data request of the string</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sEncodeManagedDocUrl( $s, $sRequest )
{
	$oThis = *;
	## get the name/id
	$sThisID = $oThis.'sName/ID';

	## check project pointer (if there is one)
	$oThisProj = $oThis.oGetProject();

	## keep track of what documents are used
	$woUsed = CSet();

	## get set of documents associated with owning object (if it can have any)
	$tcDocs = $this.tcGetRelatedObjects( "ATTACHMENTS" );

	## build connection map
	$mMapping = $oThis.msoGetConnectionMap();

	## Fix any "%7C" values that IE puts in for pipes
	$s = $s ~ "s#\%7C#\|#g";

	## clear the url up to the ManagedDoc word, globally
	## Now uses [^""] (anything but ") instead of . (anything) to prevent removal
	## of regular links that begin with $sHttpType and come before a managed doc
	$sHttpType = GetDaoContext("PROTOCOL_TYPE");
	$s = $s ~ "s#" + $sHttpType + "://[^""]*?ManagedDoc#ManagedDoc#gi";

	## Strip all of the <html>, <head>, and <body> tags
	$s = sStripExtraHTMLTags( $s );

	## Handle partial image uploads, they should have started at least and therefore completed their update txns
	$s = sHandlePartialImageUploads( $s );

	## replace the ref with the object id, globally
	$iDoc = find( $s, "ManagedDoc/" );

	## Initialize the set in case nothing goes into it
	$wsoDocs = CSet();

	## if there are NO managed doc refs, skip much of this work
	if ( $iDoc > 0 )
	{
		## find replacements
		$lsReplacements = CList();

		## search out the managed doc links and prepare replacements
		while ( $iDoc > 0 )
		{
			## I have the START tag, so get the END
			$iEnd = find( $s, "eoi", $iDoc ) + 3;
			$iLen = $iEnd - $iDoc;

			if ( $iLen > 0 )
			{
				## this is the whole URL
				$sUrl = SubStr( $s, $iDoc, $iLen );

				## find the ref ID
				if ( $sUrl ~ "m#ManagedDoc/(d\|.*?)\/(.*?)\.(.*?)\?.*?eoi#" )
				{
					$sRefID = $re1;
					$sConID = $re2;
					$sExt = $re3;

					## find the document from this object
					$oSrc = CObj( $sRefID );

					if ( $oSrc != $oThis )
					{
						## if this maps to a different object, it means we
						## copied this from somewhere and need to fix it
						$oDoc = SSC_ExtDocument::oGetAttachmentFromConnection_s( $oSrc, $sConID );

						$oSrcProj = $oSrc.oGetProject();

						## depending on the nature of this document copy it or reference it
						if ( $oDoc.bIsImageDoc() Or $oSrcProj != $oThisProj )
						{
							$oDoc = $oDoc.oCopy( $oThis, -1 );

							## fix the project pointer and image settings
							$oDoc.SetImageCopyData( $oSrcProj );
						};

						## register this
						$oThis.Register( $oDoc, NullObject, "" );

						## add this to the docs collection
						$tcDocs << $oDoc;

						$oCon = $oThis.oGetLinkObj( $oDoc, "" );
						$sNewConID = $oCon.sID;

						## add this to the replacements
						$lsReplacements << $sUrl + EOI + "ManagedDoc/" + $sThisID + "/" + $sNewConID + "." + $sExt + "?sConID=" + $sNewConID + "&iVersion=-1&eoi";
					}
					else
					{
						## look in my pre-constructed mapping
						$oDoc = pick( $mMapping, $sConID );

						## if I couldn't find the document, there is one strange case
						if ( $oDoc == null )
						{
							## try to locate the document
							$sKey = "AttachByConnectID_" + $sConID;
							if ( $oThis.Context.Contains( $sKey ) )
							{
								## get document
								$oDoc = $oThis.Context.Get( $sKey );
								if ( $oDoc.IsValid )
								{
									## reattach this object
									$oThis.Register( $oDoc, NullObject, "" );

									## add this to the docs collection
									$tcDocs << $oDoc;

									$oCon = $oThis.oGetLinkObj( $oDoc, "" );
									$sNewConID = $oCon.sID;

									## add this to the replacements
									$lsReplacements << $sUrl + EOI + "ManagedDoc/" + $sThisID + "/" + $sNewConID + "." + $sExt + "?sConID=" + $sNewConID + "&iVersion=-1&eoi";
								};
							};
						};
					};


					## remember this DOC
					if ( $oDoc And $oDoc != NULLOBJECT )
						$wsoDocs << $oDoc;
				};

				## advance
				$iDoc = find( $s, "ManagedDoc/", $iDoc + 10 );
			}
			else
			{
				## exit out since we had a processing error
				$iDoc = -1;
			};
		};

		## add standard replacement
		$lsReplacements << "ManagedDoc/" + $oThis.Ref + "/" + EOI + "ManagedDoc/" + $sThisID + "/";

		## perform the replacement
		$lsReplacements/
		{
			$sOld = item( *, 1, 1, eoi );
			$sNew = item( *, 2, 2, eoi );

			## do the replacement
			$s = Replace( $s, $sOld, $sNew );
		};
	};

	## go through and properly determine what connections are in use for this data
	$tcDocs/
	{
		## set doc ptr
		$oDoc = *;

		## get connection for this document
		$oCon = $oThis.oGetLinkObj( $oDoc, "" );

		## If no connection object, throw imbedded image error
		if ( $oCon == NullObject ) throw(GetGenString("ErrorMissingAttachmentConnection"));

		## if the document is USED by this request, mark it on the connection
		## otherwise, remove it from it

		if (( Not IsEmpty( $wsoDocs ) ) And ( $wsoDocs CONTAINS $oDoc ))
			$oCon.AddConsumer( $sRequest );
		else
		{
			## If this item is being audited, we need to mark this connection as used in an audit log
			if ($oThis.iAuditLevel() > 0)
				$oCon.AddMapValue("S","bUsedInAudit", "TRUE");
			$oCon.RemoveConsumer( $sRequest );
		};
	};

	return $s;
}

#*!***************************************************************************************************
 * <summary>
 * 	Decodes image attachment links to display on the page
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$s" type="String">Rich text content</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sDecodeManagedDocUrl( $s )
{
	## get this
	$oThis = *;

	$sExport = GetRequest( "sExport" );
	$sExport = ( $sExport == NULL ? "":$sExport );

	$bExport = ( $sExport == "" ? false:true );

	## Make sure we are decoding from the perspective of where the data is coming from
	if ( bReference ) {
		$oRef = $oThis.oFindReferenceSource();
		if ( $oRef ) {
			$s = $oRef.sDecodeManagedDocUrl( $s );
		};
	};

	## if this is NOT an export, route this to a simple method
	if ( $bExport )
		$s = $oThis.sDecodeManagedDocUrl_e( $s );
	else
		$s = $oThis.sDecodeManagedDocUrl_v( $s );

	## pre process the string looking for dynamic content.
	$sOrig = $s;
	try
	{
		## The following matches spans with [ id=custom | id="custom" | id='custom' ] AND [ datasrc='(value)' | datasrc="(value)" | datasrc=(value) ]
		## It checks for either order as compatibility mode switched it so the datasrc is first.
		## Here's what I used to test this regex if you want to modify it (explanation further down):
		##
		## $sRegex = "m#<span(?=\s|>)(?=[^>]*\bid(?:\s)?=([""'])?custom\b(?(1)\1)[^""'])(?=[^>]*\bdatasrc(?:\s)?=([""'])?([^\b\s>]*)\b(?(2)\2)[^""'])(?=([^\/>]*))(?:(?!\/span>)(?!\/>).)*[^>]*>#i";
		## $ls = CMap( String, Boolean, True );
		## $ls << CMap( "<span id=""custom"" datasrc='asource@project />", True); ## This test passes, but the user will likely see an error because the data source will be 'asource@project
		## $ls << CMap( "<span id='custom' datasrc='asource@project' />", True);
		## $ls << CMap( "<span id='custom' datasrc=asource@project anotherattr='test' />", True);
		## $ls << CMap( "<span id=custom datasrc='asource@project' />", True);
		## $ls << CMap( "<span id=custom datasrc='asource@project'></span>", True);
		## $ls << CMap( "<span id=""custom"" datasrc='asource@project'></span>", True);
		## $ls << CMap( "<span id=""customnot"" datasrc='asource@project'></span>", False);
		## $ls << CMap( "<span id=""custom"" datasrc=asource@project anotherattr=test></span>", True);

		## $bPassed = True;

		## GetKeys( $ls )/
		## {
			## $s = *;
			## $bExpected = Pick( $ls, $s );
			## $b = $s ~ $sRegex;

			## $bPassed = $bPassed And $b == $bExpected;

			## "Expected: " + $bExpected + CRLF;
			## "Actual  : " + $b + CRLF;

			## StrToHtmlEntity($s) + CRLF;
			## "    " + $re0 + CRLF;
			## "    " + $re1 + CRLF;
			## "    " + $re2 + CRLF;
			## "    " + $re3 + CRLF;

		## };

		## "Test status: ";
		## if ( $bPassed )
		## {
			## "Passed";
		## }
		## else
		## {
			## "Failed";
		## };

		## Explanation:
		## <span(?=\s|>) => Match <span followed by either a space or a > to ensure this is actually a span tag and not a spanandmoretext tag
		## (?=[^>]*\bid(?:\s)?=([""'])?custom\b(?(1)\1)[^""']) => Forward lookahead to ensure that the id attribute is custom
		##    Details: Match characters that are not > (so we stay in the span tag) until we find a word boundary then "id", then allow an optional whitespace character, then match an = sign.
		##      Optionally capture the leading quote type, make sure the following word is "custom", then if the leading quote was captured, match that the closing quote is the same as well.
		##      Ensure the next character is not either quote type.
		## (?=[^>]*\bdatasrc(?:\s)?=([""'])?([^\b\s>]*)\b(?(2)\2)[^""']) => Forward lookahead to ensure we have a datasrc attribute (and capture it)
		##    Details: Match characters that are not > (so we stay in the span tag) until we find a word boundary then "datasrc", then allow an optional whitespace character, then match an = sign.
		##      Optionally capture the leading quote type, capture until a word boundary or whitespace, then if the leading quote was captured, match that the closing quote is the same as well.
		##      Ensure the next character is not either quote type.
		## (?=([^\/>]*)) => forward lookahead to capture all of the current attributes of the span to use when rebuilding it. Looks for a / or > to stop
		## (?:(?!\/span>)(?!\/>).)*[^>]*> => Eat the string looking for a /span> (first since it would be farther down the string and this is greedy) or a />. Then eat until > (end of tag)
		while ( $s ~ "m#<span(?=\s|>)(?=[^>]*\bid(?:\s)?=([""'])?custom\b(?(1)\1)[^""'])(?=[^>]*\bdatasrc(?:\s)?=([""'])?([^\b\s>]*)\b(?(2)\2)[^""'])(?=([^\/>]*))(?:(?!\/span>)(?!\/>).)*[^>]*>#i" )
		{
			## #re3 now has the id
			$sDataSrc = $re3;
			## #re4 now has all of the attributes inside the span tag
			$sAllAttrs = $re4;

			$sThisKey = Item( $sDataSrc, 2, 2, "@" );
			## change the dash in eoi
			$sThisKey = replace( $sThisKey, "~", eoi );

			##Extra options for dynamic spans.
			##Note: Does not change link.
			switch( Lower( $sThisKey ) )
			{
				case "this":
					$oObjToUse = GetRequest( "oObjToUseForRichTextDataContext" );
					if( Not $oObjToUse ) $oObjToUse = $oThis;
					$oObj = $oObjToUse;
					break;

				case "project":
					$oObj = $oThis.oGetProject();
					break;

				default:
					$oObj = COG_Base::oGetByEKey_s( $sThisKey );
			};

			if ( $oObj )
			{
				$sRequest = Item( $sDataSrc, 1, 1, "@" );
				$sRequest = Replace( $sRequest, "&#4;", EOI );

				$sInnerText = $oObj.sGetData( $sRequest );

				if( find( $sInnerText, EOI ) != -1 )
					$sInnerText = Item( $sInnerText, 2, 2, EOI );

				if ( $sInnerText == "" )
					$sInnerText = "blank";

				$sReplaceWith = "<_span_ " + $sAllAttrs + " >" + $sInnerText + "</_span_>";
			}
			else
				$sReplaceWith = ""; ## clear it because it ain't there anymore!

			$sFind = $re0;

			$s = Replace( $s, $sFind, $sReplaceWith, true );
		};
		$s = Replace( $s, "_span_", "span" );
	}
	catch( $e )
	{
		$s = $sOrig;
	};

	return $s;
}

## ====================================================================
## Method Name: sDecodeManagedDocUrl_v
## Owner Class: Global
## ====================================================================
variant SSC_DBObj::sDecodeManagedDocUrl_v( $s )
{
	## get this
	$oThis = *;

	## replace manageddoc string with proper reference
	$sOrig = "ManagedDoc/" + $oThis.'sName/ID' + "/";
	$sNew = "ManagedDoc/" + $oThis.Ref + "/";

	## do a replace
	$s = Replace( $s, $sOrig, $sNew );

	return $s;
}

## ====================================================================
## Method Name: sDecodeManagedDocUrl_e
## Owner Class: Global
## ====================================================================
variant SSC_DBObj::sDecodeManagedDocUrl_e( $s )
{
	## get this
	$oThis = *;
	$sThisRef = Ref;

	$sExport = GetRequest( "sExport" );
	$sSubExport = GetRequest( "sSubExport" );

	$bExport = true;

	$iCount = 0;
	$loDocs = CList();

	## build connection map
	$mMapping = $oThis.msoGetConnectionMap();

	## set defaults that work for real exports (outside the system)
	$bKeepManageLink = false;
	$bUseRefID = false;
	$bUseCurrentVersion = true;

	switch ($sExport)
	{
		case "Diff":
			$bKeepManageLink = true;
			$bUseRefID = true;
			$bUseCurrentVersion = false;
			break;

		case "Review":
		case "Archiving":
		case "ArchivingVirtual":
		case "Search":
			$bKeepManageLink = true;
			$bUseRefID = false;
			$bUseCurrentVersion = false;
			break;
		default:
			## need to point to files on DISK
			$sHost = Lower( ::sGetServerFullName() );
			## Use SERVICE_PORT instead of SERVER_PORT because using the master port allows consistency
			## in export paths. Since the image paths are used to identify the images in the mht, Word's
			## differencing shows the images as different if the ports vary.
			$sPort = GetRequest( "SERVICE_PORT" );
			if ( $sPort != "" And $sPort != "80" And $sPort != "443" ) $sHost = $sHost + ":" + $sPort;
			break;
	};


	## find managedDoc refs
	$iFind = find( $s, "ManagedDoc/", 1 );

	## get image list
	$vsImages = $dao.Context.Get( "vsCheckPointImages" );

	$sLeft = "";
	$sRight = $s;

	## continue while we find some
	while ( $iFind > 0 )
	{
		## start of src
		$iSrcStart = $iFind;

		## find boundaries of src string
		$iSrcEnd = find( $s, "eoi", $iFind ) + 3;
		## strip out the pieces of this content
		$iLen = $iSrcEnd - $iSrcStart;

        ## If bad string and eoi missing we need to not generate ASE error
        if ( $iLen < 1 )
            $sUrl = "";
        else
            $sUrl = SubStr( $s, $iSrcStart, $iLen );

		## found this
		$bFound = false;


		## search the source string
		if ( $sUrl ~ "m#ManagedDoc/(.*?)\/(.*?)\.(.*?)\?.*?eoi#" )
		{
			$sNameID = $re1;
			$sConID = $re2;
			$sExt = $re3;

			## locate the connection
			$oDoc = pick( $mMapping, $sConID );

			if ( $oDoc )
			{
				## get connection from document
				$oCon = $oThis.oGetLinkObj( $oDoc, "" );

				## get version from connection
				## for ARCHIVE we need to use a special interface that will predict the next version
				if ( $bUseCurrentVersion )
					$iVersion = ( $oCon != nullobject ? $oCon.iGetRefVersion( "" ) : -1 );
				else
					$iVersion = ( $oCon != nullobject ? $oCon.iGetArchiveVersion() : -1 );

				## we found this document
				$bFound = true;

				if ( $bKeepManageLink )
				{

					## need to embed the actual version number into the source
					## construct the path with the version information
					$sFilename = "image." + $sExt;
					$sImgSrc = "";

					## use this object reference of the
					if ( $sExport == "Diff" )
					{
						$dtDiffTime = GetRequest( "dtDiffTime" );
						if( $dtDiffTime != NULL )
						{
							## check if this is for MODTIPS
							$bModTips = ::bModTipsOn();

							$oAttach = $oDoc;

							$msaData = $oAttach.msaData;
							if( NOT IsEmpty( $msaData ) )
	    						$oOLEImage = pick($msaData, "oImage");

							$bHasOLEImage = $oOLEImage != NULL;

							if( $bHasOLEImage )
							{
								$oAttach = $oOLEImage;
							};

							SetRequest( "iUTCOffset", 0 );

							$loAudits = $oAttach.loGetAllAuditEntries( null, null, $dtDiffTime, $bModTips )[ iType == 0 AND sProperty == "binFile" ];

							SetRequest( "iUTCOffset", NULL );

							$oAudit = First( $loAudits );

							$sFilename = $oAttach.sGetFilename(-1);

							if( $oAudit == NULL OR $oAudit.dtCreated == $oAttach.dtModified )
								$sImgSrc =  "ManagedDoc/" + $oAttach.Ref + "/" + $sFilename;
							else
								$sImgSrc =  "ManagedDoc/" + $oAudit.Ref + "/" + $sFilename;
						}
						else
						{
							$sRef = $oDoc.Ref;
							if ( $sSubExport == "notCheckpointed" )
							{
								$sRef = $oDoc.Ref;
								$sFilename = $oDoc.sGetFilename(-1);
								$sImgSrc = "ManagedDoc/" + $sRef + "/" + $sFilename + "?iVersion=" + $iVersion + "&eoi";
							};
						};
					}
					## store the image on the review so if it gets removed from the document, the review will still contain it
					else if ( $sExport == "Review" )
					{
						if ( $sSubExport != "Compare" )
						{
							$sReview = GetRequest( "oReview" );
							$oReview = CObj( $sReview );
							$oObj = $oDoc.oCopy( $oReview, -1 );
							$oReview.Register( $oObj, NULLOBJECT, "" );
						};
						$sFilename = $oDoc.sGetFilename(-1);
						$sRef = $oDoc.Ref;
					}
					else
					{
						## if we aren't using REFID, use external key
						## which would include the project ID
						$sRef = $oDoc.sGetEKey();

						## remember these EKeys, in case these need to get checkpointed downstream
						if ( Not $bUseCurrentVersion And $vsImages != null )
							$vsImages << $sRef;

					};

					## build source string if not already done
					if ( $sImgSrc == "" )
						$sImgSrc = "ManagedDoc/" + $sRef + "/" + $sFilename + "&iVersion=" + $iVersion + "&eoi";
				}
				else
				{
					## If exporting to an HTML file, we need to put in a link to the Files folder in the
					## html directory
					if ( $sExport == "HtmlFile" )
					{
						$sPath = urldecode(GetRequest("sExportPath"));
						$sFilename = $oDoc.sGetFilename(-1);
						$sPath = $sPath + $sFilename;
						$sFilepath = "Files\\" + $sFilename;
					}
					else
					{
						## Need to get the root web folder to assemble the correct HTTP(S) request
						## Get the full path
						$sPath = GetRequest( "PATH_TRANSLATED" );
						## Get the script name portion
						$sScriptName = Replace( GetRequest( "SCRIPT_NAME" ), "/", "\" );
						## Remove the root from the script name
						$lsScriptName = Split( $sScriptName, "\" );
						$sRoot = pick( $lsScriptName, 1 );
						## Replace the script name portion with "ROOT\temp\"
						$sPath = Replace( $sPath, $sScriptName, "\" + $sRoot + "\temp\" );
						## use images file name so that word compare recognizes images are the same on different exports
						$sPath += $sConID + "." + $oDoc.sGetFileExtension();

						## Now create the full path for downloading the file
						$nCount = ItemCount( $sPath, "\" );
						$sHttpType = GetDaoContext("PROTOCOL_TYPE");
						$sPathForDownload = $sHttpType + "://" + $sHost + "/" + $sRoot + "/temp/" + Item( $sPath, $nCount, $nCount, "\" );

						## excapes the '\' characters in the filepath to avoid confusing the regular expression
						$sFilepath = Replace( $sPathForDownload, "\", "\\" );

					};

					## copy from database to a specific file location
					$oDoc.CopyToFile( $sPath, $iVersion, True );

					## Register the temp file so it is deleted on logout
					if ( $sExport == "MHTArchive" )
						SSC_ExtDocument::RegisterTempImage_s( $sPath );
					## HtmlExports will delete the whole directory so no need to register
					else if ( $sExport != "HtmlFile" )
						COG_AppObj::RegisterTempFile_s($sPath);

					$sImgSrc = $sFilepath;
				};

				## do the actual string replacement and make sure to remove any height:auto tags from images
				$sSafeUrl = Replace( $sUrl, "?", "\?" );
				$sSafeUrl = Replace($sSafeUrl, ".", "\.");
				$sSafeImgSrc = Replace($sImgSrc, ".", "\.");
				$re = "s#(<img[^>]*?)([^>]*?)" + $sSafeUrl + "([^>]*?)(height ?: ?auto;)([^>]*?>)#$1$2" + $sSafeImgSrc + "$3$5#gi";
				$s = $s ~ $re;
				$re = "s#(<img[^>]*?)(height ?: ?auto;)([^>]*?)" + $sSafeUrl + "([^>]*?>)#$1$3" + $sSafeImgSrc + "$4$5#gi";
				$s = $s ~ $re;

				## if it doesn't have height tags
				$s = Replace( $s, $sUrl, $sImgSrc );
			};

			## if we didn't locate the correct document, add an IMAGE UNAVAILABLE tag instead
			if ( Not $bFound )
			{
				## find images with this connection ID and replace them
				## find where there is an image tag (shortest match) that is not an attached document to
				## the object and replace it with the [image deleted] tag
				$re = "s/<img([^>]*)" + $sNameID + "\\" + $sConID + "\." + "([^>]*)>/<font style='color=red'>[... Image Unavailable ...]</font>/gi";
				$s = $s ~ $re;
			};
		};

		## look for next one
		$iFind = $iFind + 10;
		$iFind = find( $s, "ManagedDoc/", $iFind );
	};

	return $s;
}

#*!***************************************************************************************************
 * <summary>
 * 	Runs a given command on the object
 * </summary>
 * <visibility>
 * 	Advanced
 * </visibility>
 * <param name="$oThis" type="Object">The object to run the command on</param>
 * <param name="$sCommand" type="String">The command</param>
*****************************************************************************************************#
void SSC_DBObj::RunCommandHandler( $oThis, $sCommand )
{
	switch ( $sCommand )
	{
		case "Versioning":
		 	$loItems = GetRequest( "loItems" );
		 	if ( $loItems == NULL )
			{
				if( $oThis != NULL )
				{
					$oThis = GetRequest( "oThis" );
					$loItems = CList( $oThis  );
				}
				else
					$loItems = CList();
			};

			$ssThis = GetRequest( "ssThis" );
			if( $ssThis ) $ssThis/{ $loItems << CObj( * ); };

			$sRequest = GetRequest( "sRequest" );

			## if there is ONLY one item in the list, get it out
			$sClass = "";
			$oVerObj = NULLOBJECT;
			if ( Count( $loItems ) == 1 )
			{
				$oVerObj = First( $loItems );
				$sClass = $oVerObj.Classname;
			};

			try
			{
				SSC_DBObj::HandleVersionAction_s( $loItems, $sRequest, GetRequest( "sName" ), GetRequest( "sStatusDate" ), GetRequest( "sComments" ) );

				::StopProgressBar();
			}
			catch( $sErr )
			{
				$error = ::sGetErrorString($sErr);

				if ( ($sRequest == "ksCreateMasterVersion") Or ($sRequest == "ksCheckIn") )
				{
					## pass error back
					$sRet = URLEncode( $error );
					#inline
					<script>
						top.FinishImport( "<%$sRet%>" );
					</script>
					#endinline;
				}
				else
				{
					## pass error back
					$error;
				};

				throw($error);
				break;
			};

			## make sure we have an $oThis object
			if( $oThis != NULL )
			{
				if ( ($sRequest == "ksCheckIn") Or ($sRequest == "ksCheckOut") )
				{
					## When creating Master version of Documents(attachments) and Applications (Matlab, Excel etc), we will never
					## call this method statically.

					#inline
					<script>
						top.PublishEvent( "<%$oThis.Ref%>", "onRefresh", "no-body");
						var oBody = top.oGetCenterPage();
						oBody.window.location = oBody.window.location;
						top.closeCallout();
					</script>
					#endinline;
				};
			}
			else
			{
				#inline
				<script>
					top.closeCallout();
				</script>
				#endinline;
			};

		break;
		case "NewNote":
			$sText = GetRequest("sText");
			$sSection = GetRequest("sSection");
			$sReview = GetRequest( "sReview" );
			$sType = GetRequest( "iType" );

			if ( $sReview == null ) $sReview = "";

			try
			{
				## add the requested section if necessary
				if ( $sSection != "" )
				{
					$sSectionNames = $oThis.sGetData("sNotebookSections");

					if ( $sSectionNames ~ CStr( "m/" + $sSection + "/" ) == false )
					{
						SetRequest("sSetDataCommand","Add");
						$sJnk = $oThis.SetData("sNotebookSection", $sSection );
					};
				};

				$oNewNote = SSC_Note::oCreate_s($oThis,NULLOBJECT,"&sSection=" + URLEncode($sSection) + "&sText=" + URLEncode( $sText ) + "&sReview=" + URLEncode( $sReview ));
			}
			catch( $sErr )
			{
				## Parse out the error message
				$error = ::sGetErrorString($sErr);
				throw($error);
			};
			$oNewNote.SetData( "sAuthor", $me.oPerson.sGetName() );
			$oNewNote.SetData( "dtCreated", Now( ) );
			$oNewNote.SetAttr( "iType", $sType );
			$oNewNote.GetNotebookSection($sSection, true);
			break;

		case "NewNotebookSection":
			$sText = GetRequest("sText");
			SetRequest("sSetDataCommand","Add");
			$sRet = $oThis.SetData("sNotebookSection",$sText);
			if( find( $sRet, "Error:" ) != -1 )
			{
				## pass error back in two parts
				$error = "Error" + EOI + $sRet;
				$error;
			}
			else
			{
				$nZIndex = GetRequest("nZIndex");
				$nLeft = GetRequest("nLeft");
				$oThis.GetNotebookTab( $sText, $nZIndex, $nLeft, true, false );
			};
			break;
		case "NewCompetitor":
			$sDescription = GetRequest( "sDescription" );
			$sSymbol = GetRequest( "sSymbol" );
			try
			{
				$oCompetitor = SSC_Competitor::oCreate_s( $oThis, NULLOBJECT, "&sDescription=" + URLEncode( $sDescription ) + "&sSymbol=" + $sSymbol );
			}
			catch( $sErr )
			{
				## Parse out the error message
				$error = ::sGetErrorString($sErr);
				throw($error);
			};
			break;
		case "SaveEmbeddedApp":
		    ## First save the image file
		    SetRequest("sAction", "NewAppPic");
		    SetRequest("bReturnLink", true);
            $oImage = SSC_ExtDocument_Base::oAttachFile_s( $oThis );
            $sImageLink = GetThreadContext("sItemLink");
            ## Now save the applicaiton and relate it to the image
			$sFile = GetDaoContext( "sFirstFile" );
			$sSrcFile = GetDaoContext( "sFirstSrcFile" );
			SetDaoContext( "sFile", $sFile );
			SetDaoContext( "sSrcFile", $sSrcFile );
		    SetRequest("sAction", "NewEmbeddedApp");
		    SetThreadContext("sRelatedImageRef", $oImage.Ref);
            $oApp = SSC_ExtDocument_Base::oAttachFile_s( $oThis );
            $sAppLink = GetThreadContext("sItemLink");

            ## Now generate the HTML to display and open the application. This should be the thin client HTML and can be
			## If the formatting or content of the dblclick event changes, the RegEx in COG_Base::sGetRichEditableText must be updated as well.
            #inline
                <IMG src="<%$sImageLink%>"
  					ondblclick="javascript:if(window.oGetTop)oGetTop().OpenExtApp( '<%$sAppLink%>', 'ExtAppInfo', false )">
		    #endinline;
			break;
		case "UpdateItemValueDifferences":
			$oPreviousObj = GetRequest( "oPreviousObj" );
			$sCPVersion = GetRequest( "sCPVersion" );
			if( $sCPVersion == NULL )
				$sCPVersion = "";

			$oThis.UpdateItemValueDifferences( $oPreviousObj, $sCPVersion );
			break;
		case "SetDataFromDerivedObject":
			$oPreviousObj = GetRequest( "oPreviousObj" );
			$sProperty = GetRequest( "sProperty" );

			$oThis.SetDataFromDerivedObject( $oPreviousObj, $sProperty );
			break;
		case "AddParent":
			$oParent = GetRequest( "oParent" );
			$oThis.AddParent( $oParent );
			break;

	};
}
##===========================================================================
## lsGetMainMenuItems_BuiltIn
##
##Purpose: Generates a pre-defined list of menus to be made into buttons/trees
##Inputs: N/A
##Outputs: Returns the list of strings.
##===========================================================================
variant SSC_DBObj::lsGetMainMenuItems_BuiltIn()
{
	$lsMenus = CList();

	$lsMenus << "Reqs|All";

	return $lsMenus;
}
##===========================================================================
## loGetFlexTableParentBucket
## Gets the links already available with the object (of the request type)
##===========================================================================
variant SSC_DBObj::loGetFlexTableParentBucket( $sRequest, $sLinkerParams, $sContext )
{
	if( $sRequest == "custom" )
		$loParentBucket = CList();

	##Attachments_All is a special request for the linker that needs to be patched up
	##here
	else if( ( $sRequest == "Attachments_All" ) )
		$sRequest = "Attachments";

	else
		$loParentBucket = super::loGetFlexTableParentBucket( $sRequest, $sLinkerParams, $sContext );
	return $loParentBucket;
}
##===========================================================================
## RememberTableFormat
##===========================================================================
void SSC_DBObj::RememberTableFormat( $sPageRequest, $sSection, $sObjectRequest, $sFormat )
{

	## only available for Action Items and Attachments for now

	switch( Upper( $sObjectRequest ) )
	{
		case "ATTACHMENTS":
		case "ACTIONITEMS":
			$sPageRequestDisplay = $sPageRequest;
			if( Upper( $sPageRequest ) == "ACTIONITEMS" )
				$sPageRequestDisplay = "Action Items";

			$sObjectRequestDisplay = $sPageRequest;
			if( Upper( $sObjectRequest ) == "ACTIONITEMS" )
				$sObjectRequestDisplay = "Action Items";

			$sKey = "TABLE_DISPLAY_PREF:" + $sPageRequest + eoi + $sPageRequestDisplay;
			$sKey += ":" + $sSection + ":" + $sObjectRequest + eoi + $sObjectRequestDisplay + ":SSC_DBObj" + eoi + "All Project Data Items";
			$bJnk = $me.oPerson.bSetPersonalPref( $sKey, $sFormat );

			UpdateSavedTablePreferences( $sKey, $sFormat );
			break;
	};
}
##===========================================================================
## sGetTableDisplayPreference
##===========================================================================
variant SSC_DBObj::sGetTableDisplayPreference( $sPageRequest, $sSection, $sObjectRequest )
{
	$sValue = "";
	$mssTablePreferences = mssGetSavedTablePreferences();
	if( NOT IsEmpty( $mssTablePreferences ) )
	{
		$sKey = $sPageRequest + ":" + $sSection + ":" + $sObjectRequest;
		## key will always have SSC_DBObj - see RememberTableFormat
		$sClassDisplay = WosAseStaticHelper::sGetClassDisplayName_s( "SSC_DBObj" );
		$sValue = Pick( $mssTablePreferences, $sKey + ":SSC_DBObj" + eoi + $sClassDisplay );
		if( $sValue == null )
			$sValue = "";
	};

	return $sValue;
}
##===========================================================================
## loGetFlexTableObjects
## Gets all available requested type of objects that will be made available
## $sRequest is the object type for the call to loGetObjects
## $sLinkerParams is the scope for the call to loGetObjects
## $sFilter is a filter string - This seems to only be considered if blank and linking and then this routine
##			returns an empty list.
## $sContext is who is calling this routine. Current choices are:
##		table, Linker, HOQLinker, PrivilegeLinker, Unlinker, export, body, and custom
## in the flex table
##===========================================================================
variant SSC_DBObj::loGetFlexTableObjects( $sRequest, $sContext, $sFilter, $sLinkerParams )
{
	## Privilege works as a linker scope, but not as a loGetObjects scope
	if( $sLinkerParams == "Privilege" )
		$sLinkerParams = "Children";

	return super::loGetFlexTableObjects( $sRequest, $sContext, $sFilter, $sLinkerParams );
}
##================================================================================================================================
## nGetAuthenticationFlag
##
##==================================================================================================================================
variant SSC_DBObj::nGetAuthenticationFlag( $sKind, $vVar1, $vVar2, $vVar3 )
{
	## default this to off
	$iSignLevel = 0;

	## if the project stage doesn't allow signatures, then we're done
	$oProject = oGetProject();
	if ( $oProject == NULLOBJECT )
		return $iSignLevel;
	$oStage = $oProject.oGetWorkflowState();
	if ( $oStage == NULLOBJECT or $oStage.bSignaturesEnabled == false )
		return $iSignLevel;

	$oThis = *;

	switch ( Upper( $sKind ) )
	{
		case "VERSIONING":
			$sRequest = CStr( $vVar1 );

			## check authentication requirements
			$iSignLevel = $oStage.iCheckSignatureLevel( $sRequest, $sKind );
			break;

		case "COMMAND":
			$oCommand = CObj( $vVar2 );
			if( $oCommand != NULLOBJECT )
			{
				if( $oCommand.bSignatureRequired )
				{
					$iSignLevel = CInt( $oCommand.sGetData( "iSignatureLevel" ) );
				};
			};
			break;

		case "ASSOCIATE":
		case "PROPERTY":
		case "DELETE":
		case "IMPORT":

			switch( $sKind )
			{
				case "DELETE":
					$nKind = 2;
					break;
				case "PROPERTY":
					$nKind = 3;
					break;
				case "ASSOCIATE":
					$nKind = 4;
					$oToLinkTo = CObj( $vVar2 );
					break;
				case "IMPORT":
					$nKind = 5;
					break;
			};

			$oState = oGetWorkflowState();
			if ( $oState != NULLOBJECT )
				$iSignLevel = $oState.iEditRequiresSignature( $nKind, $vVar1, $vVar2, $vVar3 );
			break;

		case "CREATE":
			$nKind = 1;

			##class is sometimes passed back as "sTag" +EOI + $sTag, and we must use that
			## to get the raw class name
			$sClassname = CStr( $vVar2 );
			if( find( $sClassname, EOI ) != -1 )
				$sClassname = sGetClassNameFromTagType( Item( $sClassname, 1, 1, EOI ) );

			## generic subtype handler
			$sObjectSubtype = GetRequest( "sObjectSubtype" );
			if( $sObjectSubtype != NULL )
				$vVar3 = $sObjectSubtype;
			else
			{
				## Specific for Reqs
				$sObjectSubtype = GetRequest( "sSubtype" );
				if( $sObjectSubtype != NULL )
					$vVar3 = $sObjectSubtype;
				else
				{
					$sObjectSubtype = GetRequest( "sReqType" );
					if( $sObjectSubtype != NULL )
						$vVar3 = $sObjectSubtype;
				};
			};

			$oState = oGetWorkflowState();
			if ( $oState != NULLOBJECT )
				$iSignLevel = $oState.iEditRequiresSignature( $nKind, $vVar1, $sClassname, $vVar3 );
			break;
	};

	return $iSignLevel;
}

#*!***************************************************************************************************
 * <summary>
 * 	This method gets the header for the differences report
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$sPurpose" type="String">DocumentDisplay or ProjectDisplay</param>
 * <param name="$sPrevVersion" type="String">The previous version key</param>
 * <param name="$bVersionDiff" type="Boolean">Whether we are diffing versions of an object, or, if false, diffing an original and a derivative object</param>
*****************************************************************************************************#
void SSC_DBObj::GetDiffHeader( $sPurpose, $sPrevVersion, $bVersionDiff )
{

	$oThis = *;

    ## Do not display the link if part of the project display since it will already be there
    if ( $sPurpose == "DocumentDisplay" )
    {
        if( GetRequest( "sExport" ) != NULL )
        {
            $sClassDisplay = WosAseStaticHelper::sGetClassDisplayName_s( $oThis.classname );
            $sDescription = Item($oThis.sGetData("sQualifiedDescription"),2,2,EOI);
            #inline
            <span style='font:12pt verdana;color:#15C;'><%$sClassDisplay%>: <%$sDescription%></span>
            <div style="margin-left:35px; ">
            #endinline;
        }
        else
        {
            #inline
            <span style='font:8pt verdana;'><%$oThis.GetSnippet( "sItemLinkQualified" )%></span>
            <div style="margin-left:35px; ">
            #endinline;
        };
    }
    else if ( $sPurpose != "ProjectDisplay" )
    {
        if( GetRequest( "sExport" ) != NULL )
        {
            $sClassDisplay = WosAseStaticHelper::sGetClassDisplayName_s( $oThis.classname );
            $sDescription = Item($oThis.sGetData("sQualifiedDescription"),2,2,EOI);
            #inline
            <div>
            <span style='font:12pt verdana;color:#15C;'><%$sClassDisplay%>: <%$sDescription%></span>
            #endinline;
        } else
        {
 	        #inline
	        <div>
	        <span style='font:8pt verdana;'><%$oThis.GetSnippet( "sItemLinkQualified" )%></span>
	        <hr />
	        #endinline;
	    };
    };

	$sCurVersion = "Latest";

	if ( $bVersionDiff )
	{
		#inline
		<div><b>
		Differences between version '<%$sPrevVersion%>' and version '<%$sCurVersion%>'
		</b></div>
		<br><br>
		#endinline;
	} else {
		#inline
		<div><b>
		Differences between version '<%$sPrevVersion%>' in original and version '<%$sCurVersion%>' in derived
		</b></div>
		<br><br>
		#endinline;
	};
}

##================================================================================================================================
## GetDifferences
##
## This method reports the differences on a single DBObj
## Inputs:
## $oPreviousObj is the previous verson of the object and $oThis is the current version
## $sPurpose defines the purpose the routine is being called for:
##     "SingleDisplay" -- The differences are being displayed on a single object.
##     "ProjectDisplay" -- The differences are being displayed between two project versions
##     "ProjectPrint" -- The differences are being printed between two project versions
##     "ChangeRequest" -- The differences are being displayed for a change request (Not sure if this is necessary yet)
##================================================================================================================================
void SSC_DBObj::GetDifferences( $oPreviousObj, $sPurpose, $bVersionDiff )
{
	$oThis = *;

    ## If object passed in is history manager, we need to get the oOwner or oControlledItem object
	$oPrevObj = $oPreviousObj;
    if ( $oPreviousObj.Classname == "SSC_HistoryManager" ) $oPrevObj = $oPreviousObj.oOwner;
	if ( $oPreviousObj.Classname == "SSC_HistoryItem" ) $oPrevObj = $oPreviousObj.oControlledItem;

	## do the actual detailed differences
	$mssDiffs = $oThis.mssGetDifferences( $oPrevObj, "", true );

	## process these results (using the original object)
	ProcessDifferences( $oPreviousObj, $sPurpose, $bVersionDiff, $mssDiffs );
}

##================================================================================================================================
## ProcessDifferences
##
## This method reports the differences on a single DBObj
## Inputs:
## $oPreviousObj is the previous verson of the object and $oThis is the current version
## $sPurpose defines the purpose the routine is being called for:
##     "SingleDisplay" -- The differences are being displayed on a single object.
##     "ProjectDisplay" -- The differences are being displayed between two project versions
##     "ProjectPrint" -- The differences are being printed between two project versions
##     "ChangeRequest" -- The differences are being displayed for a change request (Not sure if this is necessary yet)
##================================================================================================================================
void SSC_DBObj::ProcessDifferences( $oPreviousObj, $sPurpose, $bVersionDiff, $mssDiffs )
{
	$oThis = *;

    ## Need to set the current project pointer so requirement differences can function
    $oProject = $oThis.oGetProject();
    SetThreadContext("oCurrentDiffProject", $oProject);

    ## Need to get the version before we remap the object
	if (($oPreviousObj.Classname == "SSC_HistoryItem") OR ($oPreviousObj.Classname == "SSC_HistoryManager"))
		$sPrevVersion = $oPreviousObj.sName;
	else
		$sPrevVersion = "Latest";

    ## If object passed in is history manager, we need to get the oOwner object
    if ( $oPreviousObj.Classname == "SSC_HistoryManager" ) $oPreviousObj = $oPreviousObj.oOwner;
	if ( $oPreviousObj.Classname == "SSC_HistoryItem" ) $oPreviousObj = $oPreviousObj.oControlledItem;

    ##$debug=true;
    ##Trace($mssDiffs);

	## exit out if there are NO differences for this object
	if ( IsEmpty( $mssDiffs ) )
	{
	    if ( $sPurpose == "SingleDisplay" )
	    {
	        #inline
	        <div>
	        <span style='font:8pt verdana;'>No differences for: <%$oThis.GetSnippet( "sItemLinkQualified" )%></span>
	        </div>
	        #endinline;
	    } else
	        "No differences found.";
	    return;
	};

    ## Put in a heading with links
    if ( $sPurpose == "SingleDisplay" AND GetRequest( "sExport" ) == NULL)
    {
	    #inline
	    <head>
	    <title>Cockpit Differences Report</title>
		<%::headContentForAllPages()%>
	    <script type="text/javascript" src="scripts/top.js"></script>
	    </head>
	    <div style = "font-family:verdana;text-align:center;color:#666666;">
		    <span style="font-weight:bold;">Differences Report</span>
		    <span  class='noprint ActionLink' style = "cursor:pointer;margin-left:10px;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
			    onClick = "oGetTop().ExportReportToWord(window.location, event, this.ownerDocument.body, '' );">Word</span>
		    <span  class='noprint ActionLink' style = "cursor:pointer;margin-left:10px;font-family:verdana;text-align:center;font-size:7pt;text-decoration:underline;"
				    onClick = "window.print();">Print</span>
	    </div>
	    <br>
	    #endinline;
	};

	## strip the attribute differences, since properties will replace this
	$wsAttrs = CSet();

	## get the attribute changes
	$vsAttrs = pickrange( $mssDiffs, "ATTRIBUTE", "ATTRIBUTE~" );

	## now process the properties

	## only get the UDAs if there are any differences
	$bIncludeUDAs = false;
	if ( $vsAttrs CONTAINS "msaCustomData" )
		$bIncludeUDAs = true;

    $bHeaderDone = false;
	$iDiffCount = 0;

	$sClassname = $oThis.classname;

	##Trace("Get all properties: " + $oThis.sDescription);
	##Trace($mssDiffs);
	##Trace($oPreviousObj.msaData);
	##Trace($oThis.msaData);
	$vsProperties = $oThis.vsGetAllProperties( true, $bIncludeUDAs );
	##Trace($vsProperties);
	$lsRows = CList();
	$vsProperties/
	{
		$sProperty = *;

		$bIsMultivalueUDA = AseAttribute::bIsMultivalueUDA( $oThis, $sProperty, $sClassname );

		## new vs old
		## read old and new properties
		$sOld = $oPreviousObj.sGetData( $sProperty );

		if ( NOT $bIsMultivalueUDA AND ItemCount( $sOld, EOI ) > 1 )
			$sOld = Item( $sOld, 2, 2, EOI );

		$sNew = $oThis.sGetData( $sProperty );
		if ( NOT $bIsMultivalueUDA AND ItemCount( $sNew, EOI ) > 1 )
			$sNew = Item( $sNew, 2, 2, EOI );
        ##Trace($sProperty + ": " + $sOld + " / " + $sNew);
		## property is different
		if ( $sOld != $sNew )
		{
			$lsThisRow = CList();

			## determine if this is a rich text property
			$bRich = $oThis.bIsRichTextProperty( $sProperty );

			if ( $bRich )
			{
				## Before we actually add the row, see if they really are different by comparing the
				## raw value. This is necessary because embedded images use KC object references
				$sTxt1 = $oThis.sGetRawRichText( $sProperty );
				$sTxt2 = $oPreviousObj.sGetRawRichText( $sProperty );

				$sTxt1 = $oThis.sDecodeManagedDocUrl( $sTxt1 );
				$sTxt2 = $oPreviousObj.sDecodeManagedDocUrl( $sTxt2 );

                ##Trace("Raw diff: " + $sTxt2 + " / " + $sTxt1);
				if ( $sTxt1 != $sTxt2 )
				{
        			$lsThisRow << "<tr>";
		        	$lsThisRow << "<td style='border:1px solid gray;'>" + $oThis.sGetPropertyName( $sProperty ) + "</td>";
				    $lsThisRow << "<td style='border:1px solid gray;' colspan=2>";
				    $lsThisRow << "<div style='padding-left:10px;padding-right:10px;'>";
					## Replaced the old RTFDiff because it wasn't handling the ManagedDoc links properly when running as a slave
				    ## $lsThisRow << "<script language='JavaScript'>document.write( top.GetRTFDiff( '" + $oThis.Ref + "', '" + $oPreviousObj.Ref + "', '" + $sProperty + "' ) )</script>";
				    $lsThisRow << ::sDiff($sTxt2, $sTxt1);
					$lsThisRow << "</div>";
				    $lsThisRow << "</td>";
        			$lsThisRow << "</tr>";

		        	## add this to the full content
			        $lsRows << $lsThisRow;
				};
			}
			else if( $bIsMultivalueUDA )
			{
				##need to compare the checkbox html values
				$sTxt1 = $oThis.sGetSnippet( $sProperty );
				$sTxt2 = $oPreviousObj.sGetSnippet( $sProperty );

				if ( $sTxt1 != $sTxt2 )
				{
        			$lsThisRow << "<tr>";
		        	$lsThisRow << "<td style='border:1px solid gray;'>" + $oThis.sGetPropertyName( $sProperty ) + "</td>";
				    $lsThisRow << "<td style='border:1px solid gray;'>" + $sTxt2 + "</td>";
					$lsThisRow << "<td style='border:1px solid gray;'>" + $sTxt1 + "</td>";
        			$lsThisRow << "</tr>";

		        	## add this to the full content
			        $lsRows << $lsThisRow;
				};
			}
			else
			{
				## Need to translate the values
				if ( ($sOld != "") AND (StrLen($sOld) < 128) ) $sOld = GetGenString($sOld);
				if ( ($sNew != "") AND (StrLen($sNew) < 128) ) $sNew = GetGenString($sNew);
    			$lsThisRow << "<tr>";
	    		$lsThisRow << "<td style='border:1px solid gray;'>" + $oThis.sGetPropertyName( $sProperty ) + "</td>";
				$lsThisRow << "<td style='border:1px solid gray;'>" + $sOld + "</td>";
				$lsThisRow << "<td style='border:1px solid gray;'>" + $sNew + "</td>";
    			$lsThisRow << "</tr>";

	    		## add this to the full content
		    	$lsRows << $lsThisRow;
			};

		};
	};

	if ( Not IsEmpty( $lsRows ) )
	{
		$iDiffCount = $iDiffCount + Count($lsRows);
        if ( Not $bHeaderDone )
        {
            $bHeaderDone = true;
            GetDiffHeader($sPurpose, $sPrevVersion, $bVersionDiff );
        };
		## compare properties
		#inline
		<div>
		<span style='font:8pt verdana;font-weight:bold;'>Properties</span>
		<br><br>
		<div style='margin-left:20px;'>
		<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
		<col style='width:2in;'>
		<col style='width:2in;'>
		<col style='width:2in;'>
		<tr>
			<th style='border:1px solid gray;'>Name</th>
		#endinline;
		if ( $bVersionDiff )
		{
		    #inline
			<th style='border:1px solid gray;'>Old Value</th>
			<th style='border:1px solid gray;'>New Value</th>
		    #endinline;
		} else
	    {
		    #inline
			<th style='border:1px solid gray;'>Original Value</th>
			<th style='border:1px solid gray;'>Derived Value</th>
		    #endinline;
	    };
		#inline
		</tr>
		#endinline;

		$lsRows;

		#inline
		</table>
		</div>
		</div>
		#endinline;
	};

	## get the value changes
	$vsValues = pickrange( $mssDiffs, "VALUE", "Value~" );
	if ( $vsValues )
	{
		$iDiffCount = $iDiffCount + Count($vsValues);
        if ( Not $bHeaderDone )
        {
            $bHeaderDone = true;
            GetDiffHeader($sPurpose, $sPrevVersion, $bVersionDiff);
        };

		#inline
		<div>
		<br>
		<span style='font:8pt verdana;font-weight:bold;'>Value Changes</span>
		<br><br>
		<div style='margin-left:20px;'>
		<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
		<col style='width:2in;'>
		<col style='width:4in;'>
		<tr>
			<th style='border:1px solid gray;'>Data Item</th>
		    #endinline;
		    if ( $bVersionDiff )
		    {
		        #inline
			    <th style='border:1px solid gray;'>Differences</th>
                #endinline;
            } else
            {
		        #inline
			    <th style='border:1px solid gray;'>Differences</th>
                #endinline;
            };
		#inline
		</tr>
		#endinline;

		$vsValues/
		{
			$sValue = *;
			$sOld = item( $sValue, 3, 3, eoi );
			$sNew = item( $sValue, 2, 2, eoi );
			$sName = item( $sValue, 1, 1, eoi );

			if( find( $sValue, "ManagedDoc" ) != -1 )
			{
				$sOld = $oThis.sDecodeManagedDocUrl( $sOld );
				$sNew = $oThis.sDecodeManagedDocUrl( $sNew );
			};

			#inline
			<tr>
				<td style='border:1px solid gray;'><%$sName%></td>
				<td style='border:1px solid gray;'>
				<div style='padding-left:10px;padding-right:10px;'>
				<%::sDiff( $sOld, $sNew )%>
				</div>
				</td>
			</tr>
			#endinline;

		};

		#inline
		</table>
		</div>
		</div>
		#endinline;
    };

	## get the role changes
	$vsRoles = pickrange( $mssDiffs, "ROLE", "ROLE~" );
	if ( $vsRoles )
	{
		$iDiffCount = $iDiffCount + Count($vsRoles);
        if ( Not $bHeaderDone )
        {
            $bHeaderDone = true;
            GetDiffHeader($sPurpose, $sPrevVersion, $bVersionDiff);
        };
		#inline
		<div>
		<br>
		<span style='font:8pt verdana;font-weight:bold;'>Roles</span>
		<br><br>
		<div style='margin-left:20px;'>
		<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
		<col style='width:2in;'>
		<col style='width:2in;'>
		<col style='width:2in;'>
		<tr>
			<th style='border:1px solid gray;'>Role</th>
			<th style='border:1px solid gray;'>Person / Group</th>
			<th style='border:1px solid gray;'>Change</th>
		</tr>
		#endinline;

		$vsRoles/
		{
			$sRole = *;
			$sOld = item( $sRole, 2, 2, eoi );
			$sNew = item( $sRole, 3, 3, eoi );
			$sRole = item( $sRole, 1, 1, eoi );

			## now, get the nice name for this
			$sNiceRole = SSC_Role::sGetNiceRoleName_s( $sRole );

			## compare role holders from new to old
			#inline
			<tr>
				<td style='border:1px solid gray;'><%$sNiceRole%></td>
				<td style='border:1px solid gray;'><%$sOld%></td>
				<td style='border:1px solid gray;'><%$sNew%></td>
			</tr>
			#endinline;
		};

		#inline
		</table>
		</div>
		</div>
		#endinline;
	};


	## check if there are ANY relation changes
	$vsRelationDiffs = pickrange( $mssDiffs, "RELATION:", "RELATION:~" );

	if ( $vsRelationDiffs )
	{
		$iDiffCount = $iDiffCount + Count($vsRelationDiffs);
        if ( Not $bHeaderDone )
        {
            $bHeaderDone = true;
            GetDiffHeader($sPurpose, $sPrevVersion, $bVersionDiff);
        };

		#inline
		<div>
		<br>
		<span style='font:8pt verdana;font-weight:bold;'>Connections</span>
		<div style='margin-left:20px;'>
		#endinline;


		## get the relationship types
		$vsRelations = $oThis.vsGetDirectRelations();

		## go through these relations and add information
		$vsRelations/
		{
			$sRelation = *;
			$vsDiffs = pickrange( $mssDiffs, "RELATION:"+$sRelation );

			if ( $vsDiffs != null And Not IsEmpty( $vsDiffs ) )
			{
			    ## Get the two parts
			    $sType = Item( $sRelation, 1, 1, "," );
			    $sScope = Item( $sRelation, 2, 2, "," );

			    ## Special case all data to just show the scope
			    if ( $sType == "ALLDATA" )
				    $sNiceRelation = $sScope;
                else
				    $sNiceRelation = $sType + " ( " + Replace( $sScope, EOI, "-" ) + " )";

				#inline
				<br>
				<div>
				<span style='font:8pt verdana;font-weight:bold;'><%$sNiceRelation%></span>
				<br><br>
				<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
				<col style='width:1in;'>
				<col style='width:2in;'>
				<col style='width:1in;'>
				<col style='width:1in;'>
		        <tr>
			        <th style='border:1px solid gray;'>Change</th>
			        <th style='border:1px solid gray;'>Related Item</th>
		            #endinline;
		            if ( $bVersionDiff )
		            {
		                #inline
			            <th style='border:1px solid gray;'>Old</th>
			            <th style='border:1px solid gray;'>New</th>
                        #endinline;
                    } else
                    {
		                #inline
			            <th style='border:1px solid gray;'>Original</th>
			            <th style='border:1px solid gray;'>Derived</th>
                        #endinline;
                    };
                #inline
		        </tr>
				#endinline;

				$vsDiffs/
				{
					$sDiff = *;
                    ##Trace("Diff: " + $sDiff);
					$sChange = Item( $sDiff, 1, 1, Chr(4) );
					$sDescr = Item( $sDiff, 2, 2, Chr(4) );
					$sKey = Item( $sDiff, 3, 3, Chr(4) );
					$sRatingOld = Item( $sDiff, 4, 4, Chr(4) );
					$sRatingNew = Item( $sDiff, 5, 5, Chr(4) );

					## If rating values are not blank, they need to be converted to the correct displayed item

					## get this object
					##Trace("Key: " + $sKey);
					$oObj = COG_Base::oGetByEKey_s( $sKey );
					##Trace($oObj);

					## Map the change to the correct string
					if ( $bVersionDiff )
					{
					    $sChange = GetGenString($sChange);
					}
					else
					{
					    if ( $sChange == "Removed" )
					        $sChange = GetGenString("OnlyInOriginal");
					    else if ( $sChange == "Added" )
					        $sChange = GetGenString("OnlyInDerived");
					    else
    					    $sChange = GetGenString($sChange);
					};

					#inline
					<tr>
						<td style='border:1px solid gray;'><%$sChange%></td>
						<td style='border:1px solid gray;'>
							<%$oObj==NULLOBJECT?$sDescr:$oObj.GetSnippet("sItemLinkQualified")%>
						</td>
						<td style='border:1px solid gray;'><%SSC_LinkedObj::GetRatingIcon($sRelation, $sRatingOld)%></td>
						<td style='border:1px solid gray;'><%SSC_LinkedObj::GetRatingIcon($sRelation, $sRatingNew)%></td>
					</tr>
					#endinline;

				};

				#inline
				</table>
				</div>
				#endinline;
			};

		};

		#inline
		</div>
		#endinline;
	};
	if ( $iDiffCount == 0 )
	{
	    if ( $sPurpose == "SingleDisplay" )
	    {
	        #inline
	        <div>
	        <span style='font:8pt verdana;'>No differences for: <%$oThis.GetSnippet( "sItemLinkQualified" )%></span>
	        </div>
	        #endinline;
	    } else
		{
			GetDiffHeader($sPurpose, $sPrevVersion, $bVersionDiff );
	        "No differences found.";
		};
	};
	#inline
	</div>
	#endinline;

}

##===========================================================================
## onChange_Data
##
##===========================================================================
void SSC_DBObj::onChange_Data( $sProperty, $sValue )
{
	if( $this.Context.Get( "bAudited" + EOI + $sProperty, Lifespan.Request ) ) return;

	## don't log review setting
	if ( bSkipAuditing( $sProperty ) ) return;

	## get the audit level
	$iAuditLevel = iAuditLevel();

	if ( $iAuditLevel == 0 ) return;

	## get equivalent property
	$sRealProperty = sGetEquivalentProperty( $sProperty );

	## if the value is BLANK, we may need to double check
	if ( $sValue == "" ) $sValue = sGetData( $sRealProperty );

	## get the correct "this" object
	$oThis = $this.oGetThis_u();

	## add change entry
	## don't add change entry for sWorkflowState, as changing sWorkflowState calls SetWorkflowState
	## which creates its own audit entry
	if ( $sProperty != "sWorkflowState" )
		$oEntry = SSC_AuditEntry::AddLogEntry_oData( $oThis, $sRealProperty, $sValue, True );

	## if we are in a CR, add the log entry to it
	if ( $oThis != $this )
		SSC_ChangeEntry::AddLogEntry_s( $this, $oEntry );

	$this.Context.Set( "bAudited" + EOI + $sProperty, true, Lifespan.Request );

}

##===========================================================================
## onBeforeChange_Data
##
##===========================================================================
void SSC_DBObj::onBeforeChange_Data( $sProperty )
{
	## by default we are just going to return this object
	$oThis = $this;

	## get the audit level
	$iAuditLevel = iAuditLevel();

	## Need to handle bookmarks on items that require a CR for a change
	if ($sProperty == "Bookmark") $thread.Context.Set( "bIgnoreCRRequirement", true );

	if ( $iAuditLevel > 0 )
	{
		## handle preparations for change requests, by constructing a
		## clone if one doesn't already exist
		$oThis = $this.oGetThis_u();

		## get equivalent property
		$sRealProperty = $oThis.sGetEquivalentProperty( $sProperty );

		## check if this property value has been logged before
		if ( Not ( SSC_AuditLog::bInitialValueLogged_Data( $oThis, $sRealProperty ) ) )
		{
			## read the current value and save it
			$sValue = sGetData( $sRealProperty );
			SSC_AuditEntry::SaveInitial_Data( $oThis, $sRealProperty, $sValue );
		};
	};
}

##===========================================================================
## sGetCRNumbers
##
## get Change Request numbers
##===========================================================================
variant SSC_DBObj::sGetCRNumbers()
{
	$sCRs = "";

	## quickly determine if there is any change data by going through the CRbrokers
	$msoBrokers = msoCRBrokers;
	if ( Not IsEmpty( $msoBrokers ) )
	{
		## init set for numbers
		$wsCRs = CSet();
		$msoBrokers/
		{
			$oBroker = *;
			$oCR = $oBroker.oChangeRequest;
			$sRefId = $oCR.sRefID;

			## use a description for the ref ID if there is no number
			if ( $sRefId == "" )
			{
				$oDoc = $oCR.oGetDocument();
				$sRefId = $oDoc.sGetDescription();
			};

			$wsCRs << $sRefId;
		};

		$sCRs = join( $wsCRs, "," );
	};

	return $sCRs;
}
##===========================================================================
## sGetTraceAdderHints
##
##===========================================================================
variant SSC_DBObj::sGetTraceAdderHints( $sKind, $sSubType )
{
	$sHints = "";

	if( find( $sSubType, EOI ) != -1 )
		$sSubType = Item( $sSubType, 1, Itemcount( $sSubType, EOI ) -1, EOI );

	switch( Upper( $sKind ) )
	{
		case "MILESTONESTEPS":
			$oSection = GetThreadContext( "oCurrentSection" );
			if ( $oSection != null And $oSection.IsValid )
			{
				## figure out the milestone
				$oDoc = $oSection.oGetPrimaryGroup();
				$sMilestone = $oDoc.sGetMapValue( "S", "sTestResultMilestone" );
				if ( $sMilestone == "" ) $sMilestone = "DEFAULT";
			};

			$sHints += "&sMilestone=" + URLEncode($sMilestone);

			break;

		case "DEFAULTSTEPS":
			$sHints += "&sMilestone=DEFAULT";
			break;

		case "REQUIREMENTS":
			if( $sSubType != "" )
			{
				$sTypes = SSC_AppObj::sGetAllowedReqDataTypes_s( "SSC_SysReq:" + $sSubType );
				$sHints += "&sReqDataType=" + Item( $sTypes, 1, 1, "|" );
			};
			break;
		case "DEFECTSBYMILESTONE":
			$sMilestone = GetRequest( "sMilestone" );
			if( $sMilestone == NULL )
			{

				$oSection = GetThreadContext( "oCurrentSection" );
				if( $oSection != NULL )
				{
					##Check if we should use the virtual section root for the milestone selection
					$oSectionVirtualRoot = GetRequest( "oCurrentSectionVirtualRoot" );
					if ( $oSectionVirtualRoot != NULL )
					{
						$oSection = $oSectionVirtualRoot;
					};

					$sMilestone = $oSection.oGetPrimaryGroup().sGetDataDisplay( "sTestResultMilestone" );
				};
			};
			if( $sMilestone == NULL )
				$sMilestone = "DEFAULT";

			$sHints += "&sMilestone=" + URLEncode( $sMilestone );

			break;
	};
	return $sHints;
}

##===========================================================================
## State based command dialog
##===========================================================================
void SSC_DBObj::GenerateStateBasedDialog( $sLocations, $sContext )
{
	GenerateStateBasedDialog( $sLocations, $sContext, CSet() );
}

##===========================================================================
## State based command dialog
##===========================================================================
void SSC_DBObj::GenerateStateBasedDialog( $sLocations, $sContext, $ssExclusions )
{
	$bDeleted = bIsPseudoDeleted();
	if ( $bDeleted )
	{
		getDialogTemplate_Right( $sContext, $ssExclusions );
		return;
	};

	$oThis = *;

	## determine which locations to display
	$bLeft = ( find( $sLocations, "LEFT" ) != -1 );
	$bMiddle = ( find( $sLocations, "MIDDLE" ) != -1 );
	$bRight = ( find( $sLocations, "RIGHT" ) != -1 );

	$sThemeFolder = ::sGetThemeFolder();

	## get the custom commands for this class
	try
	{
		$loCustom = loGetCommands( "", "" );
	}
	catch( $sErr )
	{
		$sErr = ::sGetErrorString($sErr);
		#inline
		<span>
			<div style="cursor:pointer;position:absolute;left:33px;top:55px;width:350px;height:13px;" >
				<%$sErr%>
			</div>
		</span>
		#endinline;
	};

	$iTop = ::iDialogTopStart();
	$iTopOrig = $iTop;
	$iItemHeight = ::iDialogItemHeight();

	## custom left panel
	if ( $bLeft )
	{
		$iLeftIcon = ::iDialogIconStart( "left" );
		$iLeftText = ::iDialogTextStart( "left" );
		$loLeft = $loCustom[ sMenuLocation == "LEFT" ];
		$loLeft/
		{
			$oCommand = *;
			$sCommandRef = Ref;
			$bAuthenticate = bSignatureRequired;
			$bHasVariables = bHasVariables();
			$sDialogSize = sGetDialogSize();
			$sIcon = $oCommand.sCommandIcon;
			$sCommandDescr = $oCommand.sDescription;

			##make sure we look in the images theme directory if no path
			if( $sIcon != "" )
				$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );

			#inline
			<span>
			#endinline;

			if ( $sIcon != "" )
			{
				$iIconTop = $iTop;
				#inline
				<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iIconTop%>px;"
					sShowingWhat="<%$sCommandDescr%>" sRef=<%$this.Ref%> class="HelpTip" sHelpId="Callout_StateBased_Command">
				#endinline;
			};

			#inline
			<div sRef=<%$oThis.Ref%> sCmd=<%$oCommand.Ref%> onclick='top.RunStateBasedCommand( this );'  dynamicHelpTip=true sDialogSize="<%$sDialogSize%>"
				bHasVariables='<%$bHasVariables?"true":"false"%>'
				style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:175px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
				<%$sCommandDescr%>
			</div>
			</span>
			#endinline;

			$iTop += $iItemHeight;
		};
	};

	## custom middle panel
	if ( $bMiddle )
	{
		$iTop = $iTopOrig;
		$iLeftIcon = ::iDialogIconStart( "middle" );
		$iLeftText = ::iDialogTextStart( "middle" );
		$loMiddle = $loCustom[ sMenuLocation == "MIDDLE" ];
		$loMiddle/
		{
			$oCommand = *;
			$sCommandRef = Ref;
			$sIcon = $oCommand.sCommandIcon;
			##make sure we look in the images theme directory if no path
			if( $sIcon != "" )
				$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );
			$bAuthenticate = bSignatureRequired;
			$bHasVariables = bHasVariables();
			$sDialogSize = sGetDialogSize();

			#inline
			<span>
			#endinline;

			if ( $sIcon != "" )
			{
				$iIconTop = $iTop;
				#inline
				<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iIconTop%>px;" sShowingWhat="<%$sCommandDescr%>" sRef=<%$this.Ref%> class="HelpTip" sHelpId="Callout_StateBased_Command">
				#endinline;
			};

			#inline
			<div sRef=<%$oThis.Ref%> sCmd=<%$oCommand.Ref%> onclick='top.RunStateBasedCommand( this );'  dynamicHelpTip=true sDialogSize="<%$sDialogSize%>"
				bHasVariables='<%$bHasVariables?"true":"false"%>'
				style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:125px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
				<%$oCommand.sDescription%>
			</div>
			</span>
			#endinline;

			$iTop += $iItemHeight;
		};
	};

	## custom right panel
	if ( $bRight )
	{
		$iTop = $iTopOrig;
		$iLeftIcon = ::iDialogIconStart( "right" );
		$iLeftText = ::iDialogTextStart( "right" );

		## do built in commands first
		$oThis = *;

		$bTable = $sContext == "table"? true:false;
		$bBody = $sContext == "body" OR $sContext == "search"? true:false;

		$bTrace = GetRequest( "bAdhocTrace" );
		if( $bTrace == NULL )
			$bTrace = false;

		#inline
			<!-- ##Start of Lines -->
			<div style="position:absolute;left:156px;top:38px;width:2px;height:130px;" >
				<img src="images/<% $sThemeFolder %>/img00002.gif"  width="10" height="138">
			</div>
			<div style="position:absolute;left:312px;top:38px;width:2px;height:130px;" >
				<img src="images/<% $sThemeFolder %>/img00002.gif"  width="10" height="138">
			</div>
			<!-- ##End of lines -->
		#endinline;


		$sModifyError = sModifyError();
		$bIsReference = bReference;
		$bAllReference = $bIsReference;

		## Need to check if all items are linked for a requirement
		if ( $bIsReference AND (ClassName == "SSC_SysReq"))
		{
			$oLink = $oThis.oGetReferenceReq();
			## If linked object is the same, only target is linked so version
			if ( $oLink == $oThis )
				$bAllReference = false;
		};

		$bCanModify = $sModifyError == ""?true:false;

		if( NOT $bBody )
		{
			if( $bTable Or $bIsReference )
				$bCanClone = false;
			else
			{
				$bCanClone = true;
				if( $bCanClone )
					$bCanClone = bCanClone();
			};

			if( $bCanClone )
			{
				if( $bCanModify )
					$sAction = "top.OnClone();";
				else
					$sAction = "alert( top.URLDecode('" + URLEncode( $sModifyError ) + "') );";
				#inline
					<!-- ##start of right panel -->
					<span onclick="<%$sAction%> " style="cursor:pointer;">
						<img src="images/<% $sThemeFolder %>/_clone.png" title="Clone..." style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop - 3 %>px;" class="HelpTip" sHelpId="Callout_Clone...">
						<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:50px;height:13px;" class="HelpTip" sHelpId="Callout_Clone...">
							Clone...
						</div>
					</span>
				#endinline;

				$iTop += $iItemHeight;
			};

			if ( $bIsReference )
				$bCanDelete = false;
			else
			{
				$oProject = oGetProject();

				$bHideCommand = False;
				if ( $oProject != NullObject )
					$bHideCommand = $oProject.bHideDeleteCommands();

				if( NOT $bHideCommand )
				{
					## check privilege
					$bCanDelete = bCheckAccess( "DELETE" );
				}
				else
					$bCanDelete = $oProject.bCheckAccess( "ADMIN" );
			};

			## if delete is excluded, don't show the option
			if( $bCanDelete )
			{
				## check privilege
				$sOKToDelete = sOKToAccess( "DELETE" );

				if( $sOKToDelete == "" )
				{
					if( $bCanModify )
					{
						if( $bTrace )
							$sAction = "top.DeleteFromTrace( top.currTableItem, false );";
						else if( $bTable )
							$sAction = "top.DeleteFromTable( top.currTableItem, false );";
						else
							$sAction = "top.OnDelete( false );";
					}
					else
						$sAction = "alert( top.URLDecode('" + URLEncode( $sModifyError ) + "') );";
				}
				else
				{
					$sAction = "alert( top.URLDecode('" + URLEncode( $sOKToDelete ) + "') );";
				};
				#inline
				<span onclick="<%$sAction%>" style="cursor:pointer;">
					<img src="images/<% $sThemeFolder %>/_delete.png" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop - 3%>px;" class="HelpTip" sHelpId="Callout_Delete...">
					<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:110px;height:13px;" class="HelpTip" sHelpId="Callout_Delete...">
						Delete...
					</div>
				</span>
				#endinline;

				$iTop += $iItemHeight;
			};

			$bCanRemove = bCanRemove();
			## if we are in a table, and the parent object is a document section, then
			## we can only allow remove IF the datasrc for the document section is the document section iteself
			if( $sContext == "table" )
			{
				$oParent = GetRequest( "oParent" );
				if( $oParent != NULL AND $oParent != NULLOBJECT )
				{
					if( $oParent.classname == "SSC_Category" AND $oParent.bIsDocumentation() )
					{
						$sDataSrc = $oParent.sGetData( "sDocDataSource" );

						if( Lower( $sDataSrc ) != "this section" )
							$bCanRemove = false;
					}
					else if( $oParent.classname == "SSC_Project" )
					{
						## do not allow remove command in a project table
						$bCanRemove = false;
					};
				};
			};

			if ( $bCanRemove )
			{
				if( $bTrace )
					$sAction = "top.RemoveFromTrace(top.currTableItem, false );";
				else if( $bTable )
					$sAction = "top.RemoveFromTable( top.currTableItem, false );";
				else
				{
					## no need to check for modify access on this item, parent matters more
					if( $bCanModify )
						$sAction = "top.OnRemove( false );";
					else
						$sAction = "alert( top.URLDecode('" + URLEncode( $sModifyError ) + "') );";
				};

				#inline
					<span onclick="<%$sAction%>" style="cursor:pointer;">
						<img src="images/<% $sThemeFolder %>/empty.gif" width="18" height="18" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iTop - 3 %>px;" class="HelpTip" sHelpId="Callout_Remove...">
						<div style="position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:110px;height:13px;" class="HelpTip" sHelpId="Callout_Remove...">
							Remove...
						</div>
					</span>
				#endinline;

				$iTop += $iItemHeight;
			};
		};

		$loRight = $loCustom[ sMenuLocation == "RIGHT" ];
		$loRight/
		{
			$oCommand = *;
			$sCommandRef = Ref;
			$sIcon = $oCommand.sCommandIcon;
			##make sure we look in the images theme directory if no path
			if( $sIcon != "" )
				$sIcon = ::resolveIconPath( $sIcon, $sThemeFolder );
			$bAuthenticate = bSignatureRequired;
			$bHasVariables = bHasVariables();
			$sDialogSize = sGetDialogSize();

			#inline
			<span>
			#endinline;

			if ( $sIcon != "" )
			{
				$iIconTop = $iTop;
				#inline
				<img src="<%$sIcon%>" style="position:absolute;left:<%$iLeftIcon%>px;top:<%$iIconTop%>px;" sShowingWhat="<%$sCommandDescr%>" sRef=<%$this.Ref%> class="HelpTip" sHelpId="Callout_StateBased_Command">
				#endinline;
			};

			#inline
				<div sRef=<%$oThis.Ref%> sCmd=<%$oCommand.Ref%> onclick='top.RunStateBasedCommand( this );'  dynamicHelpTip=true sDialogSize="<%$sDialogSize%>"
				bHasVariables='<%$bHasVariables?"true":"false"%>'
				style="cursor:pointer;position:absolute;left:<%$iLeftText%>px;top:<%$iTop%>px;width:100px;height:13px;" class="HelpTip" sHelpId="Callout_Command<%EOI + $sCommandRef%>">
				<%$oCommand.sDescription%>
			</div>
			</span>
			#endinline;

			$iTop += $iItemHeight;
		};
	};
}

##===========================================================================
## GenerateDialog
##===========================================================================
void SSC_DBObj::GenerateDialog( $lsCommands, $nWidth )
{
	## do show dialog for deleted items
	$bDeleted = bIsPseudoDeleted();
	if ( $bDeleted ) return;

	$sRef = "";
	if( $this != NULL AND $this != NULLOBJECT )
		$sRef = Ref;

	$iItemHeight = ::iDialogItemHeight();
	##Subtract one to start since we increment at the start of the loop
	$iTop = ::iDialogTopStart() - $iItemHeight;
	$iLeftTopPos = $iTop ;
	$iMiddleTopPos = $iTop;
	$iLeftTextPos_Left = ::iDialogTextStart( "left" );
	$iLeftIconPos_Left = ::iDialogIconStart( "left" );
	$iLeftTextPos_Middle = ::iDialogTextStart( "middle" );
	$iLeftIconPos_Middle = ::iDialogIconStart( "middle" );


	$lsCommands/
	{
		$lsCurr = split( *, "|" );
		$sText = pick( $lsCurr, 0 );
		$sIcon = pick( $lsCurr, 1 );
		$sMethods = pick( $lsCurr, 2 );
		$sPosition = pick( $lsCurr, 3 );

		if( find( $sMethods, "OBJECTREF" ) != -1 )
			$sMethods = Replace( $sMethods, "OBJECTREF", $sRef );

		switch( $sPosition )
		{
			case "left":
				$iLeftTopPos += $iItemHeight;
				$iTopPos = $iLeftTopPos;
				$iLeftPos = $iLeftIconPos_Left;
				$iLeftDivPos = $iLeftTextPos_Left;
			break;
			case "middle":
				$iMiddleTopPos += $iItemHeight;
				$iTopPos = $iMiddleTopPos;
				$iLeftPos = $iLeftIconPos_Middle;
				$iLeftDivPos = $iLeftTextPos_Middle;
			break;
		};

		$sHelpId = Replace( $sText, " ", "_" );
		#inline
			<span onclick="<% $sMethods %>" style="cursor:pointer;">
		#endinline;

		## if we specifically don't list an image name, don't draw the image
		if( $sIcon != "" )
		{
			$sPrefix = Left( $sIcon, 7 );
			if ( $sPrefix == "GenLet_" )
			{
				$vsIconParts = Split( $sIcon, "_" );
				$sColor = Pick( $vsIconParts, 1 );
				$sLetter = Pick( $vsIconParts, 2 );
				$sAdditionalAttrs = "style='position:absolute;left:" + $iLeftPos + "px;top:" + $iTopPos + "px;' sHelpId='Callout_" + $sHelpId + "'";
				SSC_DBObj::sGetGenericLetterIcon( $sLetter, "14x14", $sColor, "HelpTip", $sAdditionalAttrs );
			}
			else if ( $sPrefix == "FntIcn_" )
			{
				$vsIconParts = Split( $sIcon, "_" );
				$sIconClasses = Pick( $vsIconParts, 1 );
				$sAdditionalAttrs = "style='position:absolute;left:" + $iLeftPos + "px;top:" + $iTopPos + "px;' sHelpId='Callout_" + $sHelpId + "'";
				#inline
					<span class="<% $sIconClasses %>" <% $sAdditionalAttrs %>></span>
				#endinline;
			}
			else
			{
				#inline
						<img src="<% $sIcon %>" style="position:absolute;left:<% $iLeftPos %>px;top:<% $iTopPos %>px;" class="HelpTip" sHelpId="Callout_<% $sHelpId %>">
				#endinline;
			};
		};


		if( find( $sText, EOI ) != -1 )
		{
			$nItemcount = Itemcount( $sText, EOI );

			$sParam1 = Item( $sText, 2, 2, EOI );
			$sParam2 = "";
			$sParam3 = "";

			if( $nItemcount > 2 )
				$sParam2 = Item( $sText, 3, 3, EOI );

			if( $nItemcount > 3 )
				$sParam3 = Item( $sText, 3, 3, EOI );

			$sText = Item( $sText, 1, 1, EOI );

			$sText = ::sCreateMessage( -1, $sText, GetGenString( $sParam1 ), GetGenString( $sParam2 ), GetGenString( $sParam3 ) );
		}
		else
			$sText = GetGenString( $sText );


		#inline
				<div style="position:absolute;left:<% $iLeftDivPos %>px;top:<% $iTopPos %>px;width:<%$nWidth%>px;height:13px;" class="HelpTip" sHelpId="Callout_<% $sHelpId %>">
						<% $sText %>
				</div>
			</span>
		#endinline;
	};

	## if there are custom commands, show that option
	## get the custom commands for this class
	$loCustom = loGetCommands( "", "" );



	if ( Not IsEmpty( $loCustom ) )
	{
		$iTop = ::iDialogWorkflowTop($iLeftTopPos);
		#inline
		<span class="Dialog" sRef=<% $this.Ref %> sShowingWhat="CustomCommandMenu" style="cursor:pointer;">
			<div style="position:absolute;left:35px;top:<%$iTop%>px;width:175px;height:13px;" sShowingWhat="CustomCommandMenu" sRef=<% $this.Ref %> class="HelpTip" sHelpId="Callout_Custom_Command">
					Workflow
			</div>
		</span>
		#endinline;
	};
}

#*!***************************************************************************************************
 * <summary>
 * 	True if the current combination of active CRs and workflow state allows for edits.
 *  Also sets a request context on this, indicating if it is necessary to add change entries
 *  when updates are preformed on this object.
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <returns>True if the current combination of active CRs and workflow state allows for edits</returns>
*****************************************************************************************************#
variant SSC_DBObj::bIsEditable_cr()
{
	$oThis = *;
	$bEdit = true;
	$oCR = $dao.Context.Contains( 0 ) ? $dao.Context.Get( 0 ) : NULLOBJECT;
	$bActiveCR = Not $oCR.IsNull;
	$bCRNotRequired = $oThis.Context.Contains( "bCRNotRequired", LifeSpan.Request );
	$bCRSuppressed = $thread.Context.Contains( 0 );
	$bDisableVersionManagement = $thread.Context.Contains( "bDisableVersionManagement" );
	$bIgnoreCRRequirement = $thread.Context.Contains( "bIgnoreCRRequirement" ) ?
		$thread.Context.Get( "bIgnoreCRRequirement" ) : false;
	$bSupportsCRs = true;

	## Check if this can't be edited because the workflow dictates a CR needs to be active
	if ( Not $bCRSuppressed And Not $bCRNotRequired And Not $bDisableVersionManagement )
	{
		## See changes aren't supported
		$bSupportsCRs = $oThis.bSupportsChangeControl();

		## We only actually test $bRequiresChangeControl if this is true
		$bNeedsChangeControlLevelCheck = $bSupportsCRs And Not $bActiveCR And Not $bIgnoreCRRequirement;
		$bRequiresChangeControl = true;
		if ( $bNeedsChangeControlLevelCheck )
		{
			$bRequiresChangeControl = $oThis.iChangeControlLevel( "" ) > 0;
		};

		$bEdit = Not $bSupportsCRs Or $bActiveCR Or $bIgnoreCRRequirement Or Not $bRequiresChangeControl;

		$bCRNotRequired = Not $bSupportsCRs Or ( Not $bActiveCR And ( $bIgnoreCRRequirement Or Not $bRequiresChangeControl ) );
		if ( $bCRNotRequired )
		{
			## Remember that no update CR is required for this object
			$oThis.Context.Set( "bCRNotRequired", true, LifeSpan.Request );
		};
	};

	## oGetThis_u does not need to add a change entry
	if ( $bCRSuppressed Or $bCRNotRequired Or $bDisableVersionManagement Or Not $bActiveCR Or Not $bSupportsCRs )
	{
		$oThis.Context.Set( "bDisableTrackCRChanges", true, LifeSpan.Request );
	};

	return $bEdit;
}

##===========================================================================
## SetAttr_cr
##
##	wrap the SetAttr call to protect it in change requests
##===========================================================================
void SSC_DBObj::SetAttr_cr( $sAttr, $Value )
{
	## set this point
	$oThis = *;

	## get this object for update (doing any necessary clone work)
	$sChange = "ATTR," + $sAttr;

	## find the object to assign this attribute
	$oThis = $oThis.oGetThis_u( $sChange );

	## finally do the actual SetAttr
	$oThis.SetAttr( $sAttr, $Value );

	## save the value
	SSC_ChangeEntry::SaveChangeValue_s( $oThis, $sChange, "", $Value );
}

##===========================================================================
## GetAttr_cr
##
##	GetAttr wrapped to handle change requests
##===========================================================================
variant SSC_DBObj::GetAttr_cr( $sAttr )
{
	## get the correct object if there is a CR
	$sChange = "ATTR," + $sAttr;
	$oThis = oGetThis_r( $sChange );

	## read value
	$val = $oThis.GetAttr( $sAttr );

	return $val;
}

##===========================================================================
## GetAttr_cr
##
##	GetAttr wrapped to handle change requests
##===========================================================================
variant SSC_DBObj::GetAttr_cr( $sMap, $sKey )
{
	## get the correct object
	$sChange = "ATTR," + $sMap + "," + $sKey;
	$oThis = oGetThis_r( $sChange );

	## get the map
	$vMap = $oThis.GetAttr( $sMap );

	## read value from the map
	$val = pick( $vMap, $sKey );

	return $val;
}

##===========================================================================
## oGetThis_u
##
##	wrap the SetAttr call to protect it in change requests
##===========================================================================
variant SSC_DBObj::oGetThis_u()
{
	variant $vCR;

	return oGetThis_u( "", $vCR );
}

##===========================================================================
## oGetThis_u
##
##	wrap the SetAttr call to protect it in change requests
##===========================================================================
variant SSC_DBObj::oGetThis_u( $sChange )
{
	variant $vCR;

	return oGetThis_u( $sChange, $vCR );
}

#*!***************************************************************************************************
 * <summary>
 * 	returns an object for a change request
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$sChange" type="String">The change requested</param>
 * <param name="$oCR" type="Object">the change request object</param>
 * <returns>WosObject</returns>
*****************************************************************************************************#
variant SSC_DBObj::oGetThis_u( $sChange, $oCR )
{
	$oThis = *;
	$oCR = NullObject;

	## reference items need to check edit, to make sure the field is a local value
	if ( bReference )
	{
		if ( bUseLinkedValue( $sChange ) )
			throw( ::sCreateMessage( 0, "Error_CannotEditLinkedTarget" ) );

	};

	## check for active update CR
	if ( $dao.Context.Contains( 0 ) )
		$oCR = $dao.Context.Get( 0 );

	if ( Not $oThis.bIsEditable_cr() )
	{
		throw( "Info: A change request must be active before making updates" );
	}
	else if ( $oThis.Context.Contains( "bDisableTrackCRChanges", LifeSpan.Request ) )
	{
		return $oThis;
	};

	##check if "this" happens to already have a BIT setting that it's a CR clone
	## in which case, we should just return it
	if ( $oThis.bIsCRClone() )
		return $oThis;

	$bAdded = false;

	##check for an existing clone
	$oSource = $oThis;
	$oThis = $oCR.oGetClone( $oThis );

	## if we didn't get an object, create a new one
	if ( $oThis == nullobject )
	{
		if ( $oCR.bDynamicAdditions )
		{
			## get or create a new clone
			$oThis = $oCR.oGetOrCreateClone( $oSource, $sChange );
			$bAdded = true;
		}
		else
		{
			## throw an error, since this change was not pre-authorized
			throw( "Info: Items included in the change request must be pre-approved" );
		};

	}
	else if ( $sChange != "" )
	{
		## add record in change map if change value is not blank
		$bAdded = $oCR.bAddChange( $sChange, $oSource, $oThis, true );
	};

	## split this up to determine change type
	if ( $bAdded )
	{
		## before making the actual change, we want to do any change specific data prep
		$oSource.onAddingChange( $sChange, $oThis );
	};

	## at this point, we should be able to also do some recording
	if ( $sChange != "" )
		SSC_ChangeEntry::AddEntry_s( $oCR, $oSource );

	## return value
	return $oThis;
}

##===========================================================================
## oGetThis_r
##
##	get the correct object
##===========================================================================
variant SSC_DBObj::oGetThis_r( $sChange )
{

	## initialize return value
	$oThis = *;

	if ( bReference )
	{
		## handle reference objects
		if ( bUseLinkedValue( $sChange ) )
		{
			$oObj = oFindReferenceSource();
			if ( $oObj.IsValid )
			{
				if ( $oObj.bIsPseudoDeleted() AND $sChange != "ATTR,sDescription")
					throw( "LINKERROR:Msg_LinkSource_DELETED" );
			}
			else
				throw( "LINKERROR:Msg_LinkSource_UNAVAILABLE" );

			## If we get this far we need to check for view access
			$bHaveAccess = $oObj.bCheckAccess("VIEW");
			if ( NOT $bHaveAccess) throw("LINKERROR:Msg_LinkSource_NOVIEW" );

			$oThis = $oObj;
			## allow for chain-linked objects
			if ( $oThis != $this AND $oThis.bReference ) {
				$oThis = $oThis.oGetThis_r( $sChange );
			};

			return $oThis;
		};
	};

	## look to see if CRs are off
	if ( $thread.Context.Contains( 0 ) )
		return $oThis;

	## check for special early out condition on the object
	if ( $oThis.Context.Contains( "bCRNotRequired", LifeSpan.Request ) )
		return $oThis;

	## check for active CR on the thread (override of DAO change)
	if ( $thread.Context.Contains( 1 ) )
	{
		$oCR = $thread.Context.Get( 1 );  ## get active CR from the thread first
		$oThis = $oCR.oGetObject_r( $oThis, $sChange );
	}
	else if ( $dao.Context.Contains( 1 ) )
	{
		$oCR = $dao.Context.Get( 1 ); ## get active CR from the dao second
		$oThis = $oCR.oGetObject_r( $oThis, $sChange );
	};

	return $oThis;
}

##===========================================================================
## getDialogTemplate_Top
##===========================================================================
void SSC_DBObj::getDialogTemplate_Top( $sContext, $ssExclusions, $sPrivilegeRef )
{
	## do show dialog for deleted items
	$bDeleted = bIsPseudoDeleted();
	if ( $bDeleted ) return;

	## call up if this is not deleted
	super::getDialogTemplate_Top( $sContext, $ssExclusions, $sPrivilegeRef );
}

##===========================================================================
## AddMapValue
##
## Add map value
##===========================================================================
void SSC_DBObj::AddMapValue( $sType, $sKey, $Value )
{
	## determine if we need to "switch" data for a change request
	$sChange = SSC_ChangeRequest::sGetChangeStr_s( "ATTR", "msaData", $sKey );
	$oThis = $this.oGetThis_u( $sChange );

    $oThis.PreUpdate(true);

	## get generic data map
	$msaData = $oThis.msaData;

	## exit early for null data
	if ( $Value == null )
	{
		$oThis.RemoveMapValue( $sType, $sKey );
		return;
	};

	## set remove false
	$bRemove = false;

	## determine the type
	$sInputType = Lower( VarType( $Value ) );

	## set up value
	$vValue = $Value;

	## special case for blank string to cause a REMOVE in all cases
	if ( $sInputType == "string" And $Value == "" )
	{
		$bRemove = true;
	}
	else
	{
		switch( $sType )
		{
			case "I":
			case "L":
				## type case
				$vValue = CInt( $Value );
				break;

			case "DATE":
			case "DT":
				## test any string value
				if ( $sInputType == "string" )
				{
					if ( $Value <> "" )
					{
						## handle string values
						if ( lower( $Value ) == "tbd" )
							$vValue = WosAseStaticHelper::dtGetTBDDate_s();
						else
							$vValue = CDate( $Value );
					}
					else
						$bRemove = true;
				}
				else
					$vValue = CDate( $Value );

				break;

			case "REAL":
			case "R":
			case "D":
				$vValue = CReal( $Value );
				break;

			case "STRING":
			case "S":
				$vValue = CStr( $Value );
				break;

			case "BOOL":
			case "B":
				## cast this value
				if (Upper($Value) == "TRUE")
				    $vValue = true;
				else
				    $vValue = false;
				break;
		};
	};

	## remove or add the data
	if ( $bRemove )
		$oThis.RemoveMapValue( $sType, $sKey );
	else
	{
		$msaData << CMap( $sKey, $vValue );

		## save the value
		SSC_ChangeEntry::SaveChangeValue_s( $oThis, $sChange, "", $vValue );
	};

}

##===========================================================================
## AddMapValue (with access check)
##
## Add map value, checking write access
##===========================================================================
void SSC_DBObj::AddMapValue( $sType, $sKey, $Value, $bCheckAccess )
{
	if ( $bCheckAccess ) {
		## throw error is access test is violated
		## don't check versioning by default at this level
		$tmp = $this.CheckPropertyWriteAccess( $sKey, "", true, true );
	};

	AddMapValue( $sType, $sKey, $Value );
}
void SSC_DBObj::AddMapValue( $sType, $sKey, $Value, $bCheckAccess, $sRequest )
{
	if ( $bCheckAccess ) {
		## throw error is access test is violated
		## don't check versioning by default at this level
		if ( $sRequest == "" ) $sRequest = $sKey;
		$tmp = $this.CheckPropertyWriteAccess( $sRequest, "", true, true );
	};

	AddMapValue( $sType, $sKey, $Value );
}

##===========================================================================
## sGetMapValue
##
## get map value as string
##===========================================================================
variant SSC_DBObj::sGetMapValue( $sType, $sKey )
{
	## initialize the default value
	$sValue = "";
	$oThis = $this;
	## get the correct object
	$sChange = SSC_ChangeRequest::sGetChangeStr_s( "ATTR", "msaData", $sKey );
	$oThis = $this.oGetThis_r( $sChange );

	## get the data map
	$msData = $oThis.msaData;

	## pick the data from the map and if it's not null, use if for the return value
	$Value = pick( $msData, $sKey );
	if ( $Value != null )
		$sValue = CStr( $Value );

	return $sValue;
}

##===========================================================================
## sGetStandardProperty
##
## get correct property to display based on the one that was selected
##===========================================================================
variant SSC_DBObj::sGetStandardProperty( $sProperty )
{
	return $sProperty;
}
##===================================================================================
## bRapidAdderAllowed
##
##===================================================================================
variant SSC_DBObj::bRapidAdderAllowed()
{
	if( bIsPseudoDeleted() )
		return false;
	else
		return super::bRapidAdderAllowed();
}
##===================================================================================
## bRapidAdderAllowed
##
##===================================================================================
variant SSC_DBObj::bRapidAdderAllowed( $sHints )
{
	return bRapidAdderAllowed( $sHints, "", "" );
}
##===================================================================================
## bRapidAdderAllowed
##
##===================================================================================
variant SSC_DBObj::bRapidAdderAllowed( $sHints, $sObjectRequest )
{
	return bRapidAdderAllowed( $sHints, $sObjectRequest, "CHILD" );
}

##===================================================================================
## bRapidAdderAllowed
##
##===================================================================================
variant SSC_DBObj::bRapidAdderAllowed( $sHints, $sObjectRequest, $sScope )
{
	##check if we are in a restricted review
	if( NOT bReviewsAllowEdit() )
		return false;

	$bIsEditable = bIsEditable( $sHints );

	if( NOT $bIsEditable )
	{
		if( $sObjectRequest != "" )
		{
			$oState = oGetWorkflowState();

			if( $oState != NULLOBJECT )
			{
				switch( Upper( $sScope ) )
				{
					case "CHILDREN":
						$sScope = "CHILD";
						break;
					case "PARENTS":
						$sScope = "PARENT";
						break;				};

				$sKey = "bCheckoutRequired" + EOI + $sScope + "," + $sObjectRequest;

				$sValue = CStr( $oState.sGetDataValue( $sKey ) );
				trace("Key: " + $sKey);
				trace("Value: " + $sValue);
				$bCheckoutRequired = lower($sValue) == "true";

				if( $bCheckoutRequired )
					return false;
				else
					return true;
			}
			else
				return false;
		}
		else
			return false;
	};

	return true;
}

##===================================================================================
## bCanLink
##
##===================================================================================
variant SSC_DBObj::bCanLink( $oObj, $sScope )
{
	$sObjectRequest = sGetRequestFromTagType( $oObj.sGetTagType() );

	if( $sObjectRequest != "" )
	{
		$oPrivObj = $this;
		if ($oPrivObj.ClassName == "SSC_Category") { $oPrivObj = $this.oGetPrimaryGroup(); };
		$oState = $oPrivObj.oGetWorkflowState();

		switch( Upper( $sScope ) )
		{
			case "CHILDREN":
				$sScope = "CHILD";
				break;
			default:
				$sScope = Upper( $sScope );
				break;
		};

		## use the state based test for checkout
		if ($oState.IsValid) {
			$sKey = "bCheckoutRequired" + EOI + $sScope + "," + $sObjectRequest;
			$sValue = CStr( $oState.sGetDataValue( $sKey ) );
			$bCheckoutRequired = lower($sValue) == "true";

			if( $bCheckoutRequired ) {
				return false;
			} else {
				return true;
			};
		} else {
			return false;
		};
	}
	else
		return false;
}


##===========================================================================
## sGetRawRichText
##
## Returns the raw rich text value (with ItemIDs) so we know whether it is really different
##===========================================================================
variant SSC_DBObj::sGetRawRichText( $sRequest )
{
	switch( $sRequest )
	{
		case "sDetailedDescription":
		    return sDetailedDescription;
		    break;
        ## Defaults assumes it is a UDA
		default:
            $sValue = Pick(msaCustomData, $sRequest);
            if ($sValue == NULL) $sValue = "";
            return $sValue;
    };
}

##================================================================================================================================
## lsGetCustomReports
##
##NOTE: display name|0 = go right to report, 1 = display prompt first|report name| if a prompt is needed, the id of the first field|need update txn|Available When?
##==================================================================================================================================
variant SSC_DBObj::lsGetCustomReports()
{
    $oThis = *;
	$sClass = $oThis.ClassName;
    ## Need to get the project manager to find all the reports
    $oProjectMgr = oGetProjectManager();

    $loCustomReports = CList();
	## If project manager, get the local registrar, else, use global
	$oRegistrar = $oProjectMgr.IsValid ? $oProjectMgr.oAseRegistrar : nullobject;
	$loCustomReports << AseReport::loGetReportsByClass_s( $sClass, $oRegistrar );

	$lsRetval = CList();

	$loCustomReports/
	{
		$sDisplayName = sGetData( "sDescription" );
		$bHasPrompt = bHasPrompt();
		$sRef = *.Ref;

		##because this encoding uses "|", we must change the reference to use "_" instead
		$sRef = Replace( $sRef, "|", "_" );
		$sReportName = "Custom" + eoi + $sRef;

		$sEncoding = $sDisplayName + "|";
		if( $bHasPrompt )
			$sEncoding += "1|";
		else
			$sEncoding += "0|";
		$sEncoding += $sReportName + "|NULL|false|";
		$lsRetval << $sEncoding;
	};
	$lsRetval = GetUnique($lsRetval);
	return $lsRetval;
}
##================================================================================================================================
## PreUpdate
##
## Make sure an object is time stamped and checked out before updating
##==================================================================================================================================
void SSC_DBObj::PreUpdate( $vCondition )
{
	$oThis = *;
    $bCheckout = false;

    ## switch pointers for CRs
	$oThis = $oThis.oGetThis_u();

    ## Time stamp the object
	$oThis.SetAttr("dtModified", Now());

	## determine if a checkout should be done
	$sCondition = CStr( $vCondition );
	if ( lower( $sCondition ) == "true" )
		$bCheckout = true;
	else if ( lower( $sCondition ) != "false" )
		$bCheckout = $oThis.bCheckOutOnChange( $sCondition );

	## Checkout if asked
	if ( $bCheckout )
	{
		$oHistoryMgr = $oThis.oGetHistoryManager(False);
		if ( $oHistoryMgr.IsValid AND ($oHistoryMgr.iLatestState != 0) )
		{
			if ($oThis.bRequiresNewVersionForAccess("MODIFY"))
				throw( ::sCreateMessage( 2, "Info_NeedNewVersionForAccess", $oThis.sDescription, $oThis.Classname ) );
			else
				$oThis.bCheckOut();
		};
	};
}


##================================================================================================================================
## sGetObjectClassDisplay
##
## The thick client expects Summary Input but we use Summarized Inputs throughout the UI, so this patches it up
##==================================================================================================================================
variant SSC_DBObj::sGetObjectClassDisplay( $sClass )
{
	if( $sClass == "Summarized Inputs" OR $sClass == "SummaryInputs" )
		return "Summary Input";
	else
	{
		if( find( $sClass, "SSC_" ) == -1 )
			return $sClass;
		else
			return WosAseStaticHelper::sGetClassDisplayName_s( $sClass );
	};
}

##================================================================================================================================
## oFindUnknownObjByID_s
##
## The thick client expects Summary Input but we use Summarized Inputs throughout the UI, so this patches it up
##==================================================================================================================================
variant SSC_DBObj::oFindUnknownObjByID_s( $oProject, $sID )
{
	$oFound = NullObject;

	## look in local cache first
	$mIDMap = null;
	if ( Not $oProject.Context.Contains( "ProjectObjectIDMap", Lifespan.Session ) )
	{
		$mIDMap = CMap( "", NullObject, true );
		$oProject.Context.Set( "ProjectObjectIDMap", $mIDMap, Lifespan.Session );
	};

	$mIDMap = $oProject.Context.Get( "ProjectObjectIDMap", Lifespan.Session );

	## check this map first
	$oFound = pick( $mIDMap, $sID );
	if ( $oFound != null )
		return $oFound;

	## walk the maps one at a time
	$vsMaps = CVector( { "msoVOCids", "msoSRids", "msoSubSystemids", "msoInitiatives", "msoGeneralids", "msoCategoryids", "msoTestids", "msoDefects" } );

	$vsMaps/
	{
		$sMap = *;
		$mMap = $oProject.GetAttr( $sMap );

		$oFound = pick( $mMap, $sID );
		if ( $oFound != null )
		{
			$mIDMap << CMap( $sID, $oFound );
			return $oFound;
		};
	};

	## if we didn't find it, set this as a nullobject
	$mIDMap << CMap( $sID, NullObject );
	return NullObject;
}

##================================================================================================================================
## GetAuditDisplayValue
##
## display audit value (return to stream)
##==================================================================================================================================
void SSC_DBObj::GetAuditDisplayValue( $sProperty, $sValue )
{
	GetAuditDisplayValue( $sProperty, $sValue, NullObject );
}

#*!***************************************************************************************************
 * <summary>
 * 	Displays the correct display value for an audit entry
 * </summary>
 * <visibility>
 * 	Advanced
 * </visibility>
 * <param name="$sProperty" type="String">The property displayed</param>
 * <param name="$sValue" type="String">The raw value of the property</param>
 * <param name="$oCR" type="Object">The Change Request, defaults to <code>nullobject</code> [OPTIONAL]</param>
*****************************************************************************************************#
void SSC_DBObj::GetAuditDisplayValue( $sProperty, $sValue, $oCR )
{

	$oThis = *;

	## strip off the leading character for the property
	$sType = Left( $sProperty, 1 );

	switch( $sType )
	{
		case "o":
			## I have an object property, so try to locate the object

			## get key
			$sDisplay = "";
			if ( itemcount( $sValue, eoi ) == 2 )
			{
				$sDisplay = item( $sValue, 2, 2, eoi );
				$sValue = item( $sValue, 1, 1, eoi );
			};

			$oObj = COG_Base::oGetByEKey_s( $sValue );
			if ( $oObj != NULLOBJECT )
				$oObj.GetSnippet( "sItemLinkQualified" );
			else
				if ( $sDisplay != "" )
					$sDisplay;
				else
					GetGenString( "ksUnknownObject" );

			break;
		default:

			## add the prefix for CR #s
			if( Left( $sProperty, 2 ) == "CR" )
			{
				if( ::isReal( $sValue ) )
				{
					$loCRs = oGetProject().loGetObjects( "CHANGEREQUESTS", "BELOW" )[ sGetCRId() == $sValue ];

					$oCR = First( $loCRs );
					if( $oCR )
					{
						$oCR.sGetRefID();
					}
					else
						GetGenString( $sValue );
				}
				else
					GetGenString( $sValue );
			}
			else
			{
				## check for rich text
				$bRich = $oThis.bIsRichTextProperty( $sProperty );

				if ( $bRich )
				{
					#inline
					<div style='overflow-x:auto;'>
					#endinline;

					## if there is a CR in play, it needs to use the "CLONE" for decode
					if ( $oCR != nullobject )
						$oThis = $oCR.oGetClone( $oThis );

					$oThis.sDecodeManagedDocUrl( $sValue );

					"</div>";
				}
				else if ( $sValue )
				{

					## pull off display value
					if ( ItemCount( $sValue, eoi ) == 2 )
						$sValue = Item( $sValue, 2, 2, eoi );

					GetGenString( $sValue );
				};
			};
			break;
	};

}
#*!***************************************************************************************************
 * <summary>
 * Renders the display value for a given property value
 * </summary>
 * <visibility>
 * 	Advanced
 * </visibility>
 * <param name="$sProperty" type="String">The data property name</param>
 * <param name="$sValue" type="String">The raw value</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetAuditDisplayValue( $sProperty, $sValue )
{
	## pull off display value
	$sDisplay = $sValue;

	## description if plan text so we should just return the actual value
	if ( $sProperty == "sDescription" )
		$sDisplay = item( $sDisplay, 1, 1, eoi );
	else if ( find( $sProperty, "UDA_" ) != -1 )
	{
		## check if this is a multi-value UDA
		$sUDA = item( $sProperty, 1, 1, EOI );
		if ( AseAttribute::bIsMultivalueUDA( $this, $sUDA, $this.Classname ) )
			$sDisplay = Replace( $sDisplay, EOI, ";" )
		else if ( itemcount( $sDisplay, eoi ) == 2 )
			$sDisplay = item( $sDisplay, 2, 2, eoi );
	}
	else if ( itemcount( $sDisplay, eoi ) == 2 )
		$sDisplay = item( $sDisplay, 2, 2, eoi );

	$sDisplay = GetGenString( $sDisplay );

	return $sDisplay;
}

##===========================================================================
## TieredLogTable
##===========================================================================
void SSC_DBObj::TieredLogTable_Entry( $sType, $dtDateThreshold, $nLevel )
{
	$loLogEntries = CList();

	if( $sType == "Audit" )
		$loLogEntries << loGetObjects( "AuditLog", "Children" );
	else if( $sType == "Workflow" )
		$loLogEntries << loGetObjects( "WorkflowLog", "Children" );


	$rLevel = ( 2 * (CInt( $nLevel ) ) ) DIV 10;
	$sLevel = CStr($rLevel);
	$sLevel = Replace($sLevel, ",", ".");

	$nRowspan = 1;
	if( NOT IsEmpty( $loLogEntries ) )
	{
		$nRowspan = Count( $loLogEntries );

		$sParentRef = Ref;


		#inline
		<tr>
			<td colspan=7 >
				<div onclick='top.ToggleLogRowDisplay( this )' sType='<%$sType%>'
					bExpanded=false sRef='<%$sParentRef%>' style='width:100%;cursor:pointer;margin-left:<% $sLevel%>in;'  >
					<%GetSnippet( "sDescriptionWithIdAndIcon" )%>
					<img id='<%$sParentRef%>_arrow_<%$sType%>' style = "" hspace = 0 vAlign = bottom src = "Images/<% ::sGetThemeFolder() %>/arrowhead-right.gif"/>
				</div>
			</td>
		</tr>
		#endinline;


		$loLogEntries/
		{
			SetRequest( "bMakeEditable", false );
			#inline
			<tr id='<%$sParentRef%>_LogEntry_<%$sType%>' style='display:none;' >
				<td>
				</td>
				<td>
					<%GetSnippet( "sType" );%>
				</td>
			#endinline;

			if( $sType == "Audit" )
			{
				#inline
				<td>
					<%GetSnippet( "sProperty" );%>
				</td>
				#endinline;
			};

			#inline
				<td>
					<%GetSnippet( "NewValue" );%>
				</td>
				<td>
					<%GetSnippet( "sModifier" );%>
				</td>
				<td>
					<%GetSnippet( "SignatureDetails" );%>
				</td>
				<td>
					<%GetSnippet( "dtCreated" );%>
				</td>
			#endinline;

			if( $sType == "Workflow" )
			{
				#inline
				<td>
					<%GetSnippet( "sComments" );%>
				</td>
				#endinline;
			};

			#inline
			</tr>
			#endinline;

		};
	}
	else
	{
		#inline
		<tr>
			<td colspan=7 >
				<div style='margin-left:<% $sLevel%>in;'  >
					<%GetSnippet( "sDescriptionWithIdAndIcon" )%>
				</div>
			</td>
		</tr>
		#endinline;
	};
	#inline
	<tr>
		<td colspan=7 >

		</td>
	</tr>
	#endinline;

}

##===========================================================================
## CheckASEAccess
##===========================================================================
variant SSC_DBObj::CheckASEAccess( $bSystemCall, $arg )
{
	$sKey = "CheckASEAccess";
	if($this.Context.Contains($sKey, LifeSpan.Request)) {
		$bHasAccess = $this.Context.Get($sKey, LifeSpan.Request);
	} else {
		## First check if system admin
		$bIsAdmin = SSC_AppObj::bCheckAccess_s( "ADMIN" );
		if ($bIsAdmin) {
			$bHasAccess = true;
			$this.Context.Set($sKey, $bHasAccess, LifeSpan.Request);
			return $bHasAccess;
		};

		## get the project
		$oProj = oGetProject();
		$sProject = "";

		if ( $oProj != null And $oProj != nullobject )
		{
			$sProject = $oProj.sDescription;
			## check if we already have a result cached for this thread
			$bHasAccess = $oProj.Context.Get( "ViewAccessAllowed", LifeSpan.Request );
			if ( $bHasAccess == null )
			{
				## use the thick client method for standard VIEW access there, since otherwise this is very complicated
				$bHasAccess = $oProj.bCheckStandardAccess( "VIEW" );

				## remember this result at least for this thread
				$oProj.Context.Set( "ViewAccessAllowed", $bHasAccess, LifeSpan.Request );
			};
		}
		else if ( (ClassName == "SSC_AppFolder") OR (ClassName == "SSC_DocFolder"))
			$bHasAccess = true;
		else
			$bHasAccess = false;

		$this.Context.Set($sKey, $bHasAccess, LifeSpan.Request);
	};

	##if this is a SYSTEM call, throw this error
	if ( Not $bHasAccess And $bSystemCall ) throw( GetGenString( "ksASEAccessDenied" ) + " - " + $sProject );

	return $bHasAccess;
}

#*!***************************************************************************************************
 * <summary>
 * 	Return the referenced object source
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
 * <returns>WosObject</returns>
*****************************************************************************************************#
variant SSC_DBObj::oFindReferenceSource()
{
	$oRef = NullObject;


	$oPrimaryGroup = oGetPrimaryGroup();

	## If we have a primary group, see if it is a reference group
	if ( $oPrimaryGroup.IsValid And $oPrimaryGroup.bReferenced )
		$oRef = $oPrimaryGroup.oGetReferenceFromProxy( $this );

	return $oRef;
}



#*!***************************************************************************************************
 * <summary>
 * 	determine if referenced items should use linked data
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$sData" type="String">Encoding passed in as Type,Attribute</param>
 * <returns>Boolean</returns>
 * <comments>
 * if Type is Attr, then the method will return true if the Attribute is sDescription
 * or is not oPrimaryGroup. If the Type is Relation, or if $sData is blank, the method ALWAYS returns false
 * </comments>
*****************************************************************************************************#
variant SSC_DBObj::bUseLinkedValue( $sData )
{
	$sType = Item( $sData, 1, 1, "," );
	$bUseLink = true;

	## exit on blank
	if ( $sData == "" )
		return false;

	## remove the ATTR from the key, since it's redundant
	$iItemCnt = ItemCount( $sData, "," );
	$sAttr = Item( $sData, 2, 2, "," );
	$sMapKey = "";
	if ( $iItemCnt > 2 )
		$sMapKey = Item( $sData, 3, $iItemCnt, "," );

	## only consider ATTR changes for references
	if ( $sType == "ATTR" )
	{
		$sAttr = Item( $sAttr, 1, 1, EOI );

		switch ( $sAttr )
		{
			case "oPrimaryGroup":
				$bUseLink = False;
				break;

			case "sDescription":
				## always use link data
				$bUseLink = true;
				break;

			case "CustomTestResults":
				$bUseLink = NOT bIsTargetOnlyReference();
				break;

			default:
				break;
		};
	}
	else if ( $sType == "RELATION" )
	{
		## nothing here yet
		$bUseLink = False;
	}
	else if ( $sType == "VERSIONING" )
	{
		## nothing here yet
		$bUseLink = False;
	};

	return $bUseLink;

}

##===========================================================================
##	iGetModTipsCountAuditCount
##	determine if referenced items should use linked data
##===========================================================================
variant SSC_DBObj::iGetModTipsCountAuditCount()
{
	## initial map
	$loEntries = CList();

	## get the start and end dates
	$dtStart = ::dtModStartDate();
	$dtEnd = ::dtModEndDate();

	## get the checkpoint flag
	$bSinceCheckpoint = ::bModTipsSinceCheckpoint();

	## consider if we ONLY want to see changes in this CR
	$bCROnly = ::bModTipsInActiveCR();
	if ( $bCROnly ) {
		## the date doesn't really matter, so we need to pass a different message to the request for entries
		## NOTE: if there is no active CR, this will return an empty list
		## get audit log, always using the CR object (if there is one)
		## we only want to continue if $oThis != $this, indicating that
		## the object we are looking at has changes in the CR
		## Otherwise, we will exit early

		## look to see if CRs are off
		if ( $thread.Context.Contains( 0 ) ) return 0;

		$oThis = $this.oGetThis_r( "VERSIONING" );

		if ( $oThis != $this ) {
			## get the audit log from this object
			$oAuditLog = $oThis.oAuditLog;
			if ( $oAuditLog.IsValid ) {
				$mdtMap = $oAuditLog.mdtoEntries;

				## pick by date (and optionally filter out version entries)
				if ( $bSinceCheckpoint )
					$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd )[ iType != 3 ];
				else
					$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd );

			};

		};

	} else {
		## get the start and end dates
		$dtStart = ::dtModStartDate();
		$dtEnd = ::dtModEndDate();

		## get audit log
		## consider if a CR is active when displaying these entries, unless we are getting workflow entries
		## we will get the main log from the CR aware object, and the workflow log from the real object
		## Note: using the key "VERSIONING" will force this to always return the CLONE, which is the
		##  correct answer for getting audit data with the CR active
		$oThis = $this.oGetThis_r( "VERSIONING" );

		$oAuditLog = $oThis.oAuditLog;
		$oWFLog = oAuditLog;

		## exit now if there is no log
		if ( Not $oAuditLog.IsValid And Not $oWFLog.IsValid ) return 0;

		if ( $bSinceCheckpoint ) {
			## only get audit entries, and skip versioning and workflow ones
			$mdtMap = CMap( DateTime, WosObject, False );
			if ( $oAuditLog.IsValid ) $mdtMap = $oAuditLog.mdtoEntries;

			## pick by date and filter out version entries
			$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd )[ iType != 3 ];
		}
		else {
			$mdtMap = CMap( DateTime, WosObject, False );
			if ( $oAuditLog.IsValid ) $mdtMap << $oAuditLog.mdtoEntries;

			## don't bother including workflow if we are only showing changes since the last checkpoint
			## since this is a "special" document mode
			##if ( $oWFLog.IsValid) $mdtMap << $oWFLog.mdtoWorkflowEntries;

			## pick by date
			$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd )[ iType != 3 ];
		};
	};

	$iCnt = Count( $loEntries );

	return $iCnt;

}

#*!***************************************************************************************************
 * <summary>
 * 	Get all the audit entries for a given date range
 * </summary>
 * <visibility>
 * 	Advanced
 * </visibility>
 * <param name="$iType" type="Integer">Type of entries</param>
 * <param name="$dtStart" type="Date/Time">Start date</param>
 * <param name="$dtEnd" type="Date/Time">End date</param>
 * <returns>List of Objects</returns>
*****************************************************************************************************#
variant SSC_DBObj::loGetAllAuditEntries( $iType, $dtStart, $dtEnd ) {
	return loGetAllAuditEntries( $iType, $dtStart, $dtEnd, ::bModTipsOn() );
}
variant SSC_DBObj::loGetAllAuditEntries( $iType, $dtStart, $dtEnd, $bModTips )
{

	## get the UTC offset
	$iDelta = GetRequest( "iUTCOffset" );
	if ( $iDelta == null )
		$iDelta = -WosAseStaticHelper::iGetUTCOffset_s();

	if ( $dtStart )
		$dtStart = DateAdd( "h", $iDelta, $dtStart );

	if ( $dtEnd )
		$dtEnd = DateAdd( "h", $iDelta, $dtEnd );

	## return value
	$loEntries = CList();

	## consider if a CR is active when displaying these entries, unless we are getting workflow entries
	## we will get the main log from the CR aware object, and the workflow log from the real object
	## Note: using the key "VERSIONING" will force this to always return the CLONE, which is the
	##  correct answer for getting audit data with the CR active
	$oThis = $this.oGetThis_r( "VERSIONING" );

	## if we are doing MOD tips and the ActiveCR flag is on, we should redirect to that
	if ( $bModTips ) {
		$bActiveCR = ::bModTipsInActiveCR();
		$bSinceCheckpoint = ::bModTipsSinceCheckpoint();

		## if we didn't get data, make sure to bound the range nicely
		if ( $dtStart == null )
			$dtStart = CDate( "1/1/1900" );

		if ( $dtEnd == null )
			$dtEnd = CDate( "1/1/9999" );

		## get audit entries
		if ( $bActiveCR ) {
			## get audit log, always using the CR object (if there is one)
			## we only want to continue if $oThis != $this, indicating that
			## the object we are looking at has changes in the CR
			## Otherwise, we will exit early

			if ( $oThis != $this ) {
				## get the audit log from this object
				$oAuditLog = $oThis.oAuditLog;
				if ( $oAuditLog.IsValid ) {
					$mdtMap = $oAuditLog.mdtoEntries;

					## pick by date (and optionally filter out versio entries)
					if ( $bSinceCheckpoint )
						$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd )[ iType != 3 ];
					else
						$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd );
				};
			};

		} else {
			## get audit log
			## we will get the main log from the CR aware object, and the workflow log from the real object
			$oAuditLog = $oThis.oAuditLog;
			$oWFLog = $oAuditLog;


			## exit now if there is no log
			if ( Not $oAuditLog.IsValid And Not $oWFLog.IsValid ) return $loEntries;

			if ( $bSinceCheckpoint ) {
				## only get audit entries, and skip versioning ones
				$mdtMap = CMap( DateTime, WosObject, False );
				if ( $oAuditLog.IsValid ) $mdtMap = $oAuditLog.mdtoEntries;

				## pick by date and filter out version entries
				$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd )[ iType != 3 ];
			}
			else {
				$mdtMap = CMap( DateTime, WosObject, False );
				if ( $oAuditLog.IsValid ) $mdtMap << $oAuditLog.mdtoEntries;

				## don't bother including workflow if we are only showing changes since the last checkpoint
				## since this is a "special" document mode
				if ( $oWFLog.IsValid) $mdtMap << $oWFLog.mdtoWorkflowEntries;

				## pick by date
				$loEntries = pickrange( $mdtMap, $dtStart, $dtEnd );
			};
		};

	} else {
		## get audit log
		## we will get the main log from the CR aware object, and the workflow log from the real object
		$oAuditLog = $oThis.oAuditLog;

		## If the audit log is NULL, we need to check if this object is in a checkpointed project. If it is
		## we need to redirect to the object in active project since that is where the audit data is stored
		if ($oAuditLog == nullobject)
		{
			$oProject = $oThis.oGetProject();

			## Get the modified date from the object to limit the end date
			if ($oProject.isvalid AND NOT $oProject.bIsActiveVersion())
			{
				## Get the checkpoint date for this project version
				$oPM = $oProject.oProjectManager;
				$oVer = $oPM.oGetVersionInfoByPtr($oProject, true);
				$dtObjModified = $oVer.dtCreated;
				$dtObjModified = DateAdd( "h", $iDelta, $dtObjModified );
				$oLatestProject = $oPM.oGetLatestProject();
				if ($oLatestProject.IsValid)
				{
					$oLatestObj = $oLatestProject.oGetItemForAuditLog($oThis);
					if ($oLatestObj.IsValid)
					{
						## Don't allow the end date to be later than the last modified date on the checkpointed project
						if (($dtEnd == null) OR ($dtEnd > $dtObjModified)) $dtEnd = $dtObjModified;
						## Make sure the start date is not after the end date
						if (($dtStart != null) AND ($dtStart > $dtEnd)) $dtStart = $dtEnd;
						$oThis = $oLatestObj;
						$oAuditLog = $oThis.oAuditLog;
					};
				};
			};
		};

		$oWFLog = $oAuditLog;

		## exit now if there is no log
		if ( Not $oAuditLog.IsValid And Not $oWFLog.IsValid ) return $loEntries;

		## get start and end date if passed in
		## workflow only
		$mdtMap = CMap( DateTime, WosObject, False );
		if ( $iType == null )
		{
			## combine the maps
			if ( $oAuditLog.IsValid ) $mdtMap << $oAuditLog.mdtoEntries;
			if ( $oWFLog.IsValid ) $mdtMap << $oWFLog.mdtoWorkflowEntries;
		}
		else if ( $iType >= 4 And $iType <= 6 )
			if ( $oWFLog.IsValid ) $mdtMap = $oWFLog.mdtoWorkflowEntries;
		else
			if ( $oAuditLog.IsValid ) $mdtMap = $oAuditLog.mdtoEntries;

		## if we have no dates, combine this
		if ( $dtStart == null And $dtEnd == null )
		{
			$loEntries << $mdtMap;
		}
		else
		{
			## make nice dates from this
			## making sure to bound the range nicely
			if ( $dtStart == null )
				$dtS = CDate( "1/1/1900" );
			else
				$dtS = CDate( $dtStart );

			if ( $dtEnd == null )
				$dtE = CDate( "1/1/9999" );
			else
				$dtE = CDate( $dtEnd );

			## pick by date
			$loEntries = pickrange( $mdtMap, $dtS, $dtE );
		};

	};

	## filter by type if this was requested
	if ( $iType != null )
		$loEntries = $loEntries[ iType == $iType ];

	$loEntries = GetReverse( $loEntries );

	$sJnk = $loEntries/{*.Context.Set( "oLog", $oAuditLog, LifeSpan.Session ) };
	return $loEntries;
}

##===========================================================================
##	loGetAuditEntriesInActiveCR
##	get audit entries within a specific CR
##===========================================================================
variant SSC_DBObj::loGetAuditEntriesInActiveCR()
{
	## return value
	$loEntries = CList();

	## get audit log, always using the CR object (if there is one)
	## we only want to continue if $oThis != $this, indicating that
	## the object we are looking at has changes in the CR
	## Otherwise, we will exit early

	## look to see if CRs are off
	if ( $thread.Context.Contains( 0 ) ) return $loEntries;

	$oThis = $this.oGetThis_r( "VERSIONING" );

	## early out if there is NO difference
	if ( $oThis == $this ) return $loEntries;

	$oAuditLog = $oThis.oAuditLog;

	## exit now if there is no log
	if ( $oAuditLog.IsValid ) {
		## get all the audit log entries
		$loEntries << $oAuditLog.mdtoEntries;

		## reverse the order
		$loEntries = GetReverse( $loEntries );

		## add a ptr back to the audit log
		$sJnk = $loEntries/{*.Context.Set( "oLog", $oAuditLog, LifeSpan.Session ) };
	};

	return $loEntries;
}


#*!***************************************************************************************************
 * <summary>
 * 	Returns a map of the initial audit log values
 * </summary>
 * <visibility>
 * 	Advanced
 * </visibility>
 * <returns>Map of String to String</returns>
*****************************************************************************************************#
variant SSC_DBObj::mssInitialAuditValues()
{
	## build an empty the initial data map
	$mssInitial = CMap( String, String, true );

	## need to handle CRs
	$oThis = $this.oGetThis_r( "VERSIONING" );

	## if the audit log is valid, add the data from it
	$oAuditLog = $oThis.oAuditLog;
	if ( $oAuditLog.IsValid )
		$mssInitial << $oAuditLog.mssInitialValues;

	return $mssInitial;
}

##===========================================================================
##	sGetDiff
##===========================================================================
variant SSC_DBObj::sGetDiff( $sProperty, $dtStart, $dtEnd ) {
	return sGetDiff( $sProperty, $dtStart, $dtEnd, true, false );
}
variant SSC_DBObj::sGetDiff( $sProperty, $dtStart, $dtEnd, $bRichText ) {
	return sGetDiff( $sProperty, $dtStart, $dtEnd, $bRichText, false );
}
variant SSC_DBObj::sGetDiff( $sProperty, $dtStart, $dtEnd, $bRichText, $bModTips ) {
	## we getting this for MODTIPS, we will use the RAW properties, otherwise
	## we are using the translated properties
	if ( $bModTips ) {
		if ( left( $sProperty, 12 ) == "sDescription" Or $sProperty == "sQualifiedDescription" )
			$sProperty = "sDescription";
	} else {
		if ( left( $sProperty, 12 ) == "sDescription" Or $sProperty == "sQualifiedDescription" )
			$sProperty = "Description";
		else if ( $sProperty == "sDetailedDescription" )
			$sProperty = "Detailed Description";
	};

	## get all of the DATA property changes for modtips
	if ( $bModTips )
		$loChanges = loGetAllAuditEntries( 0, null, $dtEnd, $bModTips )[ sProperty == $sProperty ];
	else
		$loChanges = loGetAllAuditEntries( null, null, $dtEnd, $bModTips )[ sGetData( "sProperty" ) == $sProperty ];

	$sEndVal = null;
	$sStartVal = null;

	## walk the change list backwards to find the FINAL value (the first value after
	$loChanges/
	{
		$dtCreated = dtGetServerDate();

		if ( $sEndVal == null and $dtCreated > $dtStart )
		{
			$sEndVal = sValue;

			if ( ItemCount( $sEndVal, eoi ) > 1 )
				$sEndVal = Item( $sEndVal, 2, 2, eoi );
		};

		if ( $sStartVal == null and $dtCreated < $dtStart )
		{
			$sStartVal = sValue;
			if ( ItemCount( $sStartVal, eoi ) > 1 )
				$sStartVal = Item( $sStartVal, 2, 2, eoi );

			break;
		};
	};

	## if we have NO start or END value, return null
	## if sEndVal is null then sStart is the proper response (which may be null meaning even it wasn't found)
	if ( $sEndVal == null ) {
		if ( $sStartVal == null ) return null;

		## encode as appropriate
		$sStartVal = $bRichText ? sDecodeManagedDocUrl( $sStartVal ) : $sStartVal;
		return $sStartVal;
	};

	## if sStartVal is null then a green sEnd is the proper response
	if ( $sStartVal == null )
	{
		if ( $bRichText ) $sEndVal = sDecodeManagedDocUrl( $sEndVal );
		$sDiff = ::sDiff( "", $sEndVal );
		return $sDiff;
	};

	## otherwise, just diff
	if ( $bRichText ) $sStartVal = sDecodeManagedDocUrl( $sStartVal );
	if ( $bRichText ) $sEndVal = sDecodeManagedDocUrl( $sEndVal );
	$sDiff = ::sDiff( $sStartVal, $sEndVal );
	return $sDiff;
}

##===========================================================================
##	sGetModDiff
##===========================================================================
variant SSC_DBObj::sGetModDiff( $sProperty, $dtStart, $dtEnd, $bRichText ) {
	## consider "early" exit from this if this item has NO
	$oThis = $this.oGetThis_r( "VERSIONING" );
	$dtModified = $oThis.dtModified;

	## if the modification date is BEFORE the start date, don't bother checking further
	if ( $dtModified < $dtStart ) {
		return null;
	};

	## get the start and end values
	$sType = $bRichText?"RICHTEXT":"";
	$msaValues = msaGetStartAndEndModValues( $sProperty, $dtStart, $dtEnd, $sType );

	$sStartVal = pick( $msaValues, "start" );
	$sEndVal = pick( $msaValues, "end" );

	##TraceThis( $sProperty );
	##TraceThis( $dtStart );
	##TraceThis( $sStartVal );
	##TraceThis( $dtEnd );
	##TraceThis( $sEndVal );

	## if we have NO start or END value, return null
	## if sEndVal is null then sStart is the proper response (which may be null meaning even it wasn't found)
	if ( $sEndVal == null ) {
		if ( $sStartVal == null ) return null;

		## encode as appropriate
		$sStartVal = $bRichText ? sDecodeManagedDocUrl( $sStartVal ) : $sStartVal;
		return $sStartVal;
	};

	## if sStartVal is null then a green sEnd is the proper response
	if ( $sStartVal == null )
	{
		if ( $bRichText ) $sEndVal = sDecodeManagedDocUrl( $sEndVal );
		$sDiff = ::sDiff( "", $sEndVal );
		return $sDiff;
	};

	## otherwise, just diff
	if ( $bRichText )
	{
		$sStartVal = sDecodeManagedDocUrl( $sStartVal );
		$sEndVal = sDecodeManagedDocUrl( $sEndVal );
	};

	## encode plain text fields since otherwise the html will be treated literally
	if ( Not( $bRichText ) )
	{
		## Check if either value appears to be HTML encoded already
		## because sometimes we store them enocoded
		$i = Find( $sStartVal, "&lt;" );
		if ( $i == -1 )
		{
			$sStartVal = HtmlEncode( $sStartVal );
		};

		$i = Find( $sEndVal, "&lt;" );
		if ( $i == -1 )
		{
			$sEndVal = HtmlEncode( $sEndVal );
		};
	};

	$sDiff = ::sDiff( $sStartVal, $sEndVal );
	return $sDiff;
}


##===========================================================================
##	mssGetStartAndEndModStringValues
##===========================================================================
variant SSC_DBObj::mssGetStartAndEndModStringValues( $sProperty, $dtStart, $dtEnd, $sType ) {
	## get the raw data first
	$msaRaw = msaGetStartAndEndModValues( $sProperty, $dtStart, $dtEnd, $sType );

	$sEndRaw = pick( $msaRaw, "end" );
	$sStartRaw = pick( $msaRaw, "start" );

	## determine the delta value
	if ( $sEndRaw == null And $sStartRaw == null ) {
		## no changes in this period
		$sEnd = sGetData( $sProperty );
		$sStart = $sEnd;
	} else if ( $sEndRaw == null ) {
		## the value wasn't changed in this period
		$sStart = $sStartRaw;
		$sEnd = $sStartRaw;
	} else if ( $sStartRaw == null ) {
		## the value was changed from nothing to this
		$sStart = "";
		$sEnd = $sEndRaw;
	} else {
		## the end value has changed
		$sStart = $sStartRaw;
		$sEnd = $sEndRaw;
	};

	## place the values in a vector
	$mssValues = CMap( String, String, True );
	$mssValues << CMap( "start", $sStart, True );
	$mssValues << CMap( "end", $sEnd, True );

	return $mssValues;
}

##===========================================================================
##	msaGetStartAndEndModValues
##===========================================================================
variant SSC_DBObj::msaGetStartAndEndModValues( $sProperty, $dtStart, $dtEnd, $sType ) {
	##Using sGetEquivalentProperty so that modtips works on fields using
	##sActiveTarget and other similar situations.
	$sProperty = sGetEquivalentProperty($sProperty);

	## get all of the DATA property changes for modtips
	$loChanges = loGetAllAuditEntries( 0, null, $dtEnd, True )[ sProperty == $sProperty ];

	$sEndVal = null;
	$sStartVal = null;

	variant $bInherited;
	try
	{
		$nStartingNumber = oGetProject().iGetNextReferenceID( $this.classname, false, 0, $bInherited);
		$bActivated = $nStartingNumber > 0? true:false;
	}
	catch( $sErr )
	{
		$bActivated = false;
	};

	## walk the change list backwards to find the FINAL value (the first value after
	$loChanges/
	{
		$dtCreated = dtGetServerDate();

		## locate the end value as the most recent entry that is after the start value
		if ( $sEndVal == null and $dtCreated > $dtStart )
		{
			$sEndVal = sValue;
			if ( $sType != "MULTI" And ItemCount( $sEndVal, eoi ) > 1 )
			{
				if ( $bActivated )
					$sEndVal = Item( $sEndVal, 1, 1, eoi );
				else
					$sEndVal = Item( $sEndVal, 2, 2, eoi );
			};
		};

		## locate the start value as the most recent entry that
		## predates the start date
		if ( $sStartVal == null and $dtCreated < $dtStart )
		{
			$sStartVal = sValue;
			if ( $sType != "MULTI" And ItemCount( $sStartVal, eoi ) > 1 )
			{
				if ( $bActivated )
					$sStartVal = Item( $sStartVal, 1, 1, eoi );
				else
					$sStartVal = Item( $sStartVal, 2, 2, eoi );
			};
			break;
		};
	};

	## if the start value is NULL, check to see if we have an INITIAL value in the audit log data
	if ( $sStartVal == null ) {
		## get audit log initial value
		## need to handle CRs
		$oThis = $this.oGetThis_r( "VERSIONING" );

		## handle special conditions for changes within CR only
		$bActiveCR = ::bModTipsInActiveCR();
		if ( Not $bActiveCR Or $oThis != $this ) {
			## if the audit log is valid, add the data from it
			$oAuditLog = $oThis.oAuditLog;
			if ( $oAuditLog.IsValid ) {
				$mssInitial = $oAuditLog.mssInitialValues;
				$sStartVal = pick( $mssInitial, $sProperty );

				## get the DISPLAY value is appropriate
				if ( $sStartVal And $sType != "MULTI" And itemcount( $sStartVal, eoi ) > 1 )
					$sStartVal = item( $sStartVal, 2, 2, eoi );
			};
		};
	};

	## encode as appropriate
	if ( $sStartVal != null And $sType == "RICHTEXT" )
		$sStartVal = sDecodeManagedDocUrl( $sStartVal );

	if ( $sEndVal != null And $sType == "RICHTEXT" )
		$sEndVal = sDecodeManagedDocUrl( $sEndVal );

	## place the values in a vector
	$msaValues = CMap( String, AnyScalar, True );
	if ( $sStartVal != null ) $msaValues << CMap( "start", $sStartVal, True );
	if ( $sEndVal != null ) $msaValues << CMap( "end", $sEndVal );

	return $msaValues;
}



#*!***************************************************************************************************
 * <summary>
 * 	Renders the HTML for the ModTips differences of the desired property
 * </summary>
 * <visibility>
 *  Advanced
 * </visibility>
 * <param name="$sProperty" type="String">The property of the current object you want to display</param>
 * <param name="$bRichText" type="Boolean">If the property could contain image attachments links which need to be decoded in order to be displayed [OPTIONAL]</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetMod( $sProperty ) {
	return sGetMod( $sProperty, true );
}
variant SSC_DBObj::sGetMod( $sProperty, $bRichText ) {
	$sStart = GetDaoContext( "sModTipsDateRangeStart" );
	$sEnd = GetDaoContext( "sModTipsDateRangeEnd" );

	if ( $sStart == null )
		$sStart = CStr( Date( now() ) );
	if ( $sEnd == null )
		$sEnd = CStr( now() );

	## The calendar widgit always uses mm/dd/yyyy format regardless of locale
	## CDate calculates datetime with respect for locale. Therefore the universal
	## yyy-mm-dd format should be used when passing to CDate from the calendar widgit.
	## ReqEx finds ##/##/#### and replaces it with ####-##-##
	$sStartSafe = $sStart~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
	$sEndSafe = $sEnd~"s/(\d{2})\/(\d{2})\/(\d{4})/$3-$1-$2/";
	$dtStart = CDate( $sStartSafe );
	$dtEnd = CDate( $sEndSafe );

	return sGetModDiff( $sProperty, $dtStart, $dtEnd, $bRichText );
}

##===========================================================================
##	sGetModStartValue
##===========================================================================
variant SSC_DBObj::sGetModStartValue( $sProperty, $dtStart, $dtEnd, $sFieldType ) {
	## for different field types, we need to use a different approach

	## we getting this for MODTIPS, we will use the RAW properties, otherwise
	## we are using the translated properties
	if ( left( $sProperty, 12 ) == "sDescription" Or $sProperty == "sQualifiedDescription" )
		$sProperty = "sDescription";

	## get all of the DATA property changes for modtips
	$loChanges = loGetAllAuditEntries( 0, null, $dtEnd, True )[ sProperty == $sProperty ];

	$sStartVal = null;

	## walk the change list backwards to find the FINAL value (the first value after
	$loChanges/
	{
		$dtCreated = dtGetServerDate();

		if ( $sStartVal == null and $dtCreated < $dtStart )
		{
			$sStartVal = sValue;
			if ( ItemCount( $sStartVal, eoi ) > 1 )
				$sStartVal = Item( $sStartVal, 2, 2, eoi );

			break;
		};
	};

	## if we NO start value, return null
	if ( $sStartVal == null ) return null;

	## encode as appropriate
	$sStartVal = ( $sFieldType == "RICH" ) ? sDecodeManagedDocUrl( $sStartVal ) : $sStartVal;

	return $sStartVal;
}


#*!***************************************************************************************************
 * <summary>
 * 	Returns a rich text field
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
 * <param name="$sRequest" type="String">The data request to use</param>
 * <param name="$bEdit" type="Boolean">Whether or not the field should be editable</param>
 * <param name="$sTagAttrs" type="String">Any HTML tag attributes to append to the field</param>
 * <param name="$sKindOfChange" type="String">The kind of change, defaults to <code>"PROPERTY"</code> [OPTIONAL]</param>
 * <param name="$sHints" type="String">Any hints to apply when saving the data in URL format [OPTIONAL]</param>
*****************************************************************************************************#
variant SSC_DBObj::sGetRichEditableText( $sRequest, $bEdit, $sTagAttrs, $sKindOfChange, $sHints  )
{
	## if there are MODTIPS to show, display them instead
	if ( bShowModTipsInFields() ) {
		$sResult = sGetMod( $sRequest, True );
		if ( $sResult != null ) return $sResult;
	};

	$sChange = SSC_ChangeRequest::sGetChangeStr_s( "ATTR", $sRequest );
	$oThis = oGetThis_r( $sChange );

	## If the request was redirected, call back into the method; else, go to the higher class
	if ( $oThis != $this And $bEdit )
	{
		## If we have a different object, we need to see if the project is different which means the item
		## is linked in and should not be editable
		$oProject1 = $this.oGetProject();
		$oProject2 = $oThis.oGetProject();
		if ( $oProject1 != $oProject2)
			$bEdit = false;
	};

	## Check if this can't be edited because the workflow dictates a CR needs to be active
	$bEdit = $bEdit And $oThis.bIsEditable_cr();

	$sRtn = super::sGetRichEditableText( $sRequest, $bEdit, $sTagAttrs, $sKindOfChange, $sHints  );

	return $sRtn;
}

variant SSC_DBObj::bGetSnippetMod( $sShowingWhat )
{
	SetRequest( "bSnippetModHandled", false );

	## pull out any EOI
	$sOriginalRequest = $sShowingWhat;
	$sSubRequest = "";
	if( find( $sShowingWhat, EOI ) != -1 )
	{
		$sSubRequest = Item( $sShowingWhat, 2, Itemcount( $sShowingWhat, EOI ), EOI );
		$sShowingWhat = Item( $sShowingWhat, 1, 1, EOI );
	};

	## Check for custom snippet
	$oAseItem = oGetAseBMItem( "AseSnippet", "SnippetMod" );
	try
	{
	    if ( $oAseItem != NULLOBJECT )
	    {
		    $oThis = *;
		    $sCode = $oAseItem.GetAttr( "sCode" );
		    Eval( $sCode );
		};
	}
	catch( $sErr )
	{
		$error = ::sGetErrorString($sErr);
		throw($error);
	};

	$bHandled = GetRequest( "bSnippetModHandled" );
	if ( $bHandled ) SetRequest( "bSnippetModHandled", false );
	return $bHandled;
}

variant SSC_DBObj::lsGetSpecialDates( $sType )
{
	$lsPeriods = CList();

	$sStart  = CStr( Date( now() ) );
	$sEnd  = CStr( now() );

	switch( $sType )
	{
		case "NetDiffsByDateRange":
		case "AuditEntriesByDateRange":
		case "ModTipsInlineAudit":

			$sStart = GetRequest( "sModTipsDateRangeStart" );
			$sEnd = GetRequest( "sModTipsDateRangeEnd" );
			if ( $sStart == null )
				$sStart = GetDaoContext( "sModTipsDateRangeStart" );

			if ( $sEnd == null )
				$sEnd = GetDaoContext( "sModTipsDateRangeEnd" );

			if ( not $sStart )
				$sStart = CStr( Date( now() ) );

			if ( not $sEnd )
			{
				## set end date as very end of night
				$sDate = Format( now(), "yyyy/mm/dd" ) + " 23:59:00";
				$sEnd = CStr( CDate( $sDate ) );
			};

			SetDaoContext( "sModTipsDateRangeStart", $sStart );
			SetDaoContext( "sModTipsDateRangeEnd", $sEnd );

			$lsPeriods << "Date Range" + eoi + $sStart + eoi + $sEnd;

			break;

		case "NetDiffsByVersion":
		case "AuditEntriesByVersion":

			$loEntries = loGetAllAuditEntries( null, null, null );

			$sEnd = CStr( now() );
			$loEntries/
			{
				$sValue = sValue;

				if ( $sValue == "ksCheckOut" )
				{
					$sTitle = "Version " + sProperty;
					$sStart = CStr( dtGetServerDate() );
					$lsPeriods << $sTitle + eoi + $sStart + eoi + $sEnd;
				}
				else if ( $sValue == "ksCheckIn" )
					$sEnd = CStr( dtGetServerDate() );
			};

			break;

		case "NetDiffsByWorkflow":
		case "AuditEntriesByWorkflow":

			$oAuditLog = oAuditLog;
			if ( $this.classname == "SSC_Category" )
				$oAuditLog = oGetPrimaryGroup().oAuditLog;

			if ( $oAuditLog )
			{
				$loEntries = $oAuditLog.mdtoWorkflowEntries[iType==4];
				$loEntries = GetReverse( $loEntries );
				$sEnd = CStr( now() );
				$loEntries/
				{
					$sTitle = sValue + " state ";
					$sStart = CStr( dtGetServerDate() );
					$lsPeriods << $sTitle + eoi + $sStart + eoi + $sEnd;
					$sEnd = $sStart;
				};
			};
			break;

		case "NetDiffsByPeriods":
		case "AuditEntriesByPeriods":

			## get the audit log and if available, get the initial date
			##$dtInitial = Now();
			##$iMonths = 0;
			##$oAuditLog = oAuditLog;
			##if ( $oAuditLog.IsValid )
			##{
			##	$dtInitial = $oAuditLog.dtGetFirstEntry( "" );
			##	$iMonths = DateDiff( "m", $dtInitial, Now() );
			##};

			$dtEnd = now();

			$dtStart = Date( now() );

			$lsPeriods << "Today" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			$dtEnd = $dtStart;
			$dtStart = DateAdd( "d", -1, $dtStart );

			$lsPeriods << "Yesterday" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			## one week before now
			$dtEnd = $dtStart;
			$dtStart = DateAdd( "d", -7, $dtStart );

			$lsPeriods << "1 week before that" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			## one month and one week before now
			$dtEnd = $dtStart;
			$dtStart = DateAdd( "m", -1, $dtStart );

			$lsPeriods << "1 month before that" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			## four months and a week before now
			$dtEnd = $dtStart;
			$dtStart = DateAdd( "m", -3, $dtStart );

			$lsPeriods << "3 months before that" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );


			## ten months and a week before now
			$dtEnd = $dtStart;
			$dtStart = DateAdd( "m", -6, $dtStart );

			$lsPeriods << "6 months before that" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			## one year, 10 months, and a week
			$dtEnd = $dtStart;
			$dtStart = DateAdd( "yyyy", -1, $dtStart );

			$lsPeriods << "1 year before that" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			## handle additional year
			##$iYear = 2;
			##$iTest = ( $iYear - 1 ) * 12 + 10;
			##while( $iMonths >= $iTest )
			##{
			##	## two years, 10 months, and a week
			##	$dtEnd = $dtStart;
			##	$dtStart = DateAdd( "yyyy", -1, $dtStart );
			##
			##	$lsPeriods << CStr( $iYear ) + " years before that" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );
			##
			##	$iYear += 1;
			##	$iTest = ( $iYear - 1 ) * 12 + 10;
			##};

			break;

		case "AuditEntriesForHandyAlert":

			$dtEnd = now();

			$dtStart = DateAdd( "n", -2, $dtEnd );

			$lsPeriods << "The item" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			break;

		case "AuditEntriesForHandyFollowed":

			$dtEnd = now();

			$dtStart = Date( now() );
			$dtStart = DateAdd( "d", -1, $dtStart );

			$lsPeriods << "The item" + eoi + CStr( $dtStart ) + eoi + CStr( $dtEnd );

			break;
	};

	return $lsPeriods;
}

variant SSC_DBObj::sGetHistoricValue( $sProperty, $dtDate )
{
	$sResult = "";

	$loChanges = loGetAllAuditEntries( null, null, $dtDate );
	$loChanges = $loChanges[ sProperty == $sProperty ];
	$nCnt = count( $loChanges );
	if ( $nCnt > 0 )
		$sResult = pick( $loChanges , $nCnt-1 ).sValue;

	## pull off display value
	if ( itemcount( $sResult, eoi ) == 2 )
		$sResult = item( $sResult, 2, 2, eoi );

	$sResult = sDecodeManagedDocUrl( $sResult );
	return $sResult;
}

#*!***************************************************************************************************
 * <summary>
 * 	Get a single piece of data as a string
 * </summary>
 * <visibility>
 * 	External
 * </visibility>
 * <param name="$sRequest" type="String">The data request</param>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetData( $sRequest )
{

	## add try-catch to deal with link data
	try {
		$sResponse = super::sGetData( $sRequest );
	} catch ( $sError ) {
		$sMessage = ::sCanHandleError( $sError );
		## Need to raise it up if not handled
		if ( $sMessage == "false" )
			throw( $sError );
		else
			## Otherwise, return the error string
			$sResponse = $sMessage;
	};

	return $sResponse;
}


#*!***************************************************************************************************
 * <summary>
 * 	Get info related to the icon from the application object
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <param name="$iIndex" type="Integer">The index to grab from the map</param>
 * <returns>The value at that index if it exists</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetIconDataFromMap( $iIndex )
{
	## Returns the icon data for a DBObj
	## This is call alot so try to streamline and use local access as much as possible
	## Important Note: This code assume an object type cannot be changed within a CR

	## First need to see if a reference
	$oThis = *;
	if ( $oThis.bReference )
	{
		$oLink = $oThis.oFindMyReference();
		if ( $oLink.IsValid ) $oThis = $oLink;
	};

	## Get the object type, requirements and subsystems currently use different storage
	if (Classname == "SSC_SubSystem")
	{
		$sType = $oThis.sType;
		## If a document add "DOC:"
		$iSubSysType = $oThis.iSubSysType;
		if ( ($iSubSysType >= 202) AND ($iSubSysType <= 206) ) {
			$sType = "DOC:" + $sType;
		} else if ($iSubSysType == 201) {
			if ($sType != "") {
				$sType = "DIR:" + $sType;
			};
		};
	}
	else if (Classname == "SSC_SysReq")
	{
		$sType = $oThis.sReqType;
	}
	else
	{
		$msData = $oThis.msaData;

		$Value = pick( $msData, "sType" );
		if ( $Value != null )
			$sType = CStr( $Value );
		else
			$sType = "";
	};

	## Get the icon data if I have a type otherwise; return A
	if ( $sType == "" ) {
		$sCode = "";
	} else {
		## Add in the class
		$sType = $oThis.Classname + ":" + $sType;
		$oAppObj = SSC_AppObj::oGet_s();

		$sRequestType = "ICON";
		if ($iIndex == 9 Or CStr($iIndex) == "COLOR") {
			$sRequestType = "COLOR";
		};

		$sContext = "ObjTypeData_" + $sType + EOI + $sRequestType;

		## get the type value
		$sCode = $oAppObj.Context.Get($sContext, Lifespan.Session);
		$sCode = $sCode != null ? $sCode : "";
	};
	return $sCode;
}

#*!***************************************************************************************************
 * <summary>
 * 	Get the icon letter
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <returns>Letter for the icon</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetIconCode()
{
	return sGetIconDataFromMap( 1 );
}

#*!***************************************************************************************************
 * <summary>
 * 	Get the CSS class for the icon
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <returns>CSS class for the icon (red, green, etc)</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetIconCSSClass()
{
	$sClass = sGetIconDataFromMap( 9 );
	if ( $sClass == NULL Or $sClass == "" )
	{
		$sClass = "green";
	};
	return $sClass;
}

##===========================================================================
## AddRTESpecialContentCSS
##
## add some CSS needed to support some rich text options
##===========================================================================
void SSC_DBObj::AddRTESpecialContentCSS( $sTheme )
{
	## determine if this is for export
	$sExport = GetRequest( "sExport" );
	$bExporting = ($sExport != Null And $sExport!="HtmlFile");

	## Code to set the layout of the document to reflect the document's setting
	$sFontSize			= sGetData( "sDocFontSize" );
	$sFontSizeForTables	= sGetData( "sDocFontSizeForTables" );
	$sFontFamily		= sGetData( "sDocFontFamily" );

	$sThemeFolder = ::sGetThemeFolder();

	#inline

	/***************************************** TABLES ***********************************/
	.TestTable1
	{
		font-size:<%$sFontSizeForTables%>pt;
		font-family:<%$sFontFamily%>;
		table-layout:fixed;
		border-collapse: collapse;
		empty-cells:show;
		word-wrap:break-word;
		vertical-align:top;
		table-layout:fixed;
		BORDER: gray 1px solid;
	}

	.TestTable1 thead td
	{
		BACKGROUND-COLOR: #dcdcdc;
		BORDER: gray 1px solid;
		VERTICAL-ALIGN: middle;
		font-weight:bold;
		padding:.03in;
	}

	.TestTable1 tbody td
	{
		BORDER: gray 1px solid;
		VERTICAL-ALIGN: top;
		padding:.03in;
		padding-top:.05in;
	}

	/*****************************************LISTS***********************************/

	.TrueFalse
	{
		LIST-STYLE-IMAGE: url(images/<% $sThemeFolder %>/TrueFalse.gif);
	}
	.TrueFalse li
	{
		margin-bottom:.05in;
		margin-left:.25in;
		mso-outline-level:1;
		mso-list:TrueFalse level1 xxx;
		mso-para-margin-left:.25in;
		<% $bExporting ? "text-indent:-.75in" : ""; %>
	}
	.TrueFalse li li
	{
		mso-outline-level:1;
		mso-list:Normal level1 xxx;
		mso-para-margin-left:0in;
		margin-left:0in;
		<% $bExporting ? "text-indent:-.25in" : ""; %>
	}
	@list TrueFalse:level1
	{
		mso-level-number-format:none;
		mso-level-text:"__ T __ F";
		mso-level-number-position:left;
		mso-level-tab-stop:.75in;
		color:windowtext;
	}

	.Underline
	{
		LIST-STYLE-IMAGE: url(images/<% $sThemeFolder %>/Underline.gif);
	}
	.Underline li
	{
		margin-bottom:.05in;
		margin-left:-.1in;
		mso-outline-level:1;
		mso-list:Underline level1 xxx;
		mso-para-margin-left:-.1in;
		<% $bExporting ? "text-indent:-.4in" : ""; %>
	}
	.Underline li li
	{
		mso-outline-level:1;
		mso-list:Normal level1 xxx;
		mso-para-margin-left:0in;
		margin-left:0in;
		<% $bExporting ? "text-indent:-.25in" : ""; %>
	}
	@list Underline:level1
	{
		mso-level-number-format:none;
		mso-level-text:"____";
		mso-level-number-position:left;
		mso-level-tab-stop:.4in;
		color:windowtext;
	}

	.PassFail
	{
		LIST-STYLE-IMAGE: url(images/<% $sThemeFolder %>/PassFail.gif);
	}
	.PassFail li
	{
		margin-bottom:.05in;
		margin-left:.6in;
		mso-outline-level:1;
		mso-list:PassFail level1 xxx;
		mso-para-margin-left:.6in;
		<% $bExporting ? "text-indent:-1.1in" : ""; %>
	}
	.PassFail li li
	{
		mso-outline-level:1;
		mso-list:Normal level1 xxx;
		mso-para-margin-left:0in;
		margin-left:0in;
		<% $bExporting ? "text-indent:-.25in" : ""; %>
	}
	@list PassFail:level1
	{
		mso-level-number-format:none;
		mso-level-text:"__ Pass __ Fail";
		mso-level-number-position:left;
		mso-level-tab-stop:1.1in;
		color:windowtext;
	}

	@list Normal:level1
	{
		mso-level-number-format:bullet;
		mso-level-text:\F0B7;
		mso-level-tab-stop:.5in;
		mso-level-number-position:left;
	}

	#endinline;
}

##===========================================================================
##	vGetMapValue
##
##	get map value
##===========================================================================
variant SSC_DBObj::vGetMapValue( $sType, $sKey )
{
	## get this object (for CR)
	## Need to handle errors because linked in data may not be available
	try
	{
		## get this object (for CR)
		$oThis = oGetThis_r( "ATTR,msaData," + $sKey );

		## get the map and pick the value
		$msData = $oThis.msaData;
		$vValue = pick( $msData, $sKey );
	}
	catch ( $sError )
	{
		$sMessage = ::sCanHandleError( $sError );
		if ( $sMessage == "false" ) throw($sError);
		$vValue = $sMessage;
	};

	if ( $vValue != null )
		return $vValue;
	else
		return null;
}

##===========================================================================
##	vGetMapValueWithDefault
##
##	get map value, but return default if not found
##===========================================================================
variant SSC_DBObj::vGetMapValueWithDefault( $sType, $sKey, $vDefault )
{
	## get this object (for CR)
	## Need to handle errors because linked in data may not be available
	try
	{
		$oThis = oGetThis_r( "ATTR,msaData," + $sKey );
		## get the map and pick the value
		$msData = $oThis.msaData;
		$vValue = pick( $msData, $sKey );
	}
	catch ( $sError )
	{
		$sMessage = ::sCanHandleError( $sError );
		if ( $sMessage == "false" ) throw($sError);
		$vValue = $sMessage;
	};

	## either return the value or default
	if ( $vValue != null )
		return $vValue;
	else
		return $vDefault;
}

##===========================================================================
##	SetDataEOIValue
##
##===========================================================================
void SSC_DBObj::SetDataEOIValue( $sKind, $sRequest, $sValue )
{
	$nValue = CInt( $sValue );
	$sKey = Item( $sRequest, 2, 2, EOI );
	$sRequest = Item( $sRequest, 1, 1, EOI );

	$sCurr = sGetMapValue( $sKind, $sRequest );

	$ssCurr = CSet( split( $sCurr, EOI ) );

	$sToSet = "";

	if( $nValue == 0 )
	{
		$lsReturn = CList();

		$ssCurr/
		{
			if( * != $sKey )
				$lsReturn << *;
		};

		$sToSet = join( $lsReturn, EOI );
	}
	else
	{
		if( NOT ( $ssCurr contains $sKey ) )
			$ssCurr << $sKey;

		$sToSet = join( $ssCurr, EOI );
	};

	AddMapValue( $sKind, $sRequest, $sToSet );
}

##===========================================================================
##	SetDataEOIValue
##
##===========================================================================
void SSC_DBObj::SetCustomDataEOIValue( $sRequest, $sValue )
{
	## handle different value types
	$bSet = false;
	if ( $sValue == "1" OR Lower( $sValue ) == "true" )
		$bSet = true;
	$sKey = Item( $sRequest, 2, 2, eoi );
	$sRequest = Item( $sRequest, 1, 1, eoi );

	$sCurr = sGetCustomData( $sRequest );

	$ssCurr = CSet( Split( $sCurr, eoi ) );

	$sToSet = "";

	if( NOT $bSet )
	{
		$lsReturn = CList();

		$ssCurr/
		{
			if( * != $sKey )
				$lsReturn << *;
		};

		$sToSet = Join( $lsReturn, eoi );
	}
	else
	{
		if( NOT ( $ssCurr contains $sKey ) )
			$ssCurr << $sKey;

		$sToSet = Join( $ssCurr, eoi );
	};

	AddCustomData( $sRequest, $sToSet );
}

#*!***************************************************************************************************
 * <summary>
 * 	The $sRequest this is called with CAN NOT be the request this is called within or you will get
 *	an INFINITE LOOP.
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$sRequest" type="String"></param>
 * <param name="$sValueToAdd" type="String"></param>
 * <param name="$vAddOrRemove" type="Variant"></param>
 * <param name="$sChoiceRequest" type="String">The choicelist to verify all the value [OPTIONAL]</param>
*****************************************************************************************************#
void SSC_DBObj::SetMultiValueData( $sRequest, $sValueToAdd, $vAddOrRemove )
{
	$this.SetMultiValueData( $sRequest, $sValueToAdd, $vAddOrRemove, "" );
}

void SSC_DBObj::SetMultiValueData( $sRequest, $sValueToAdd, $vAddOrRemove, $sChoiceRequest ) {
	## handle different value types
	$bSet = false;
	if ( $vAddOrRemove == "1" OR Lower( $vAddOrRemove ) == "true" )
		$bSet = true;

	## get the current value
	$sCurr = sGetData($sRequest);
	$lsCurr = CList( Split( $sCurr, eoi ) );

	## Ensure that only valid items are in the set
	if ( $sChoiceRequest != "" )
	{
		$sChoices = $this.GetChoices( $sChoiceRequest );
		$lsChoicesDisplayValue = Split( $sChoices, "|" );
		$ssChoices = CSet();
		$lsChoicesDisplayValue/
		{
			$sDisplayValue = *;
			## Always get the value

			if ( ItemCount( $sDisplayValue, eoi ) == 2 )
			{
				$ssChoices << Item( $sDisplayValue, 2, 2, eoi );
			}
			else
			{
				$ssChoices << $sDisplayValue;
			};
		};

		$lsValidCurr = CList();
		$lsCurr/
		{
			$s = *;
			if ( $ssChoices Contains $s )
			{
				$lsValidCurr << $s;
			};
		};

		$lsCurr = $lsValidCurr;
	};

	$sToSet = "";
	if( NOT $bSet )
	{
		$lsReturn = CList();

		$lsCurr/
		{
			if( * != $sValueToAdd )
				$lsReturn << *;
		};

		$sToSet = Join( $lsReturn, eoi );
	}
	else
	{
		if( NOT ( $lsCurr contains $sValueToAdd ) )
			$lsCurr << $sValueToAdd;

		$sToSet = Join( $lsCurr, eoi );
	};

	$sTmp = SetData( $sRequest, $sToSet );
}

##===========================================================================
##	bSkipAuditing
##
##	don't audit specific property
##===========================================================================
variant SSC_DBObj::bSkipAuditing( $sProperty )
{
	$bSkip = false;

	## handle some specific cases
	switch ( $sProperty )
	{
	case "sActiveReview":
	case "Follow":
	case "Bookmark":
	case "binFile": ##binFile is handled specially
		$bSkip = true;
		break;
	};

	return $bSkip;

}


##===========================================================================
##	sGetEquivalentProperty
##
##	remap different properties so that auditing can be consistent
##===========================================================================
variant SSC_DBObj::sGetEquivalentProperty( $sProperty )
{
	$sRealProperty = $sProperty;

	## map properties like "sDescriptionWithID" to "sDescription"
	if ( Left( $sProperty, 12 ) == "sDescription" ) {
		$sRealProperty = "sDescription"
	} else if ( Find( $sProperty, "UDA_" ) != -1 ) {
		## some UDAs need a bit of special handling
		if ( Find( $sProperty, eoi ) != -1 ) {
			$sUDA = Item( $sProperty, 1, 1, eoi );
			if ( AseAttribute::bIsMultivalueUDA( $this, $sUDA, $this.ClassName ) )
				$sRealProperty = $sUDA;
		};
	} else if ( Find( $sProperty, "UDR_" ) != -1 ) {
		## some UDRs need a bit of special handling
		if ( Find( $sProperty, eoi ) != -1 ) {
			$sUDR = Item( $sProperty, 1, 1, eoi );
			if ( AseData::bIsMultiValueUDR( $this, $sUDR, $this.ClassName ) ) {
				$sRealProperty = $sUDR;
			};
		};
	} else {
		## other specific cases
		switch ( $sProperty )
		{
		case "sQualifiedDescription":
			$sRealProperty = "sDescription";
			break;
		};
	};

	return $sRealProperty;
}

#*!***************************************************************************************************
 * <summary>
 * 	Determines whether simple ownership editing is allowed based on the object's current workflow state
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <returns>Boolean</returns>
*****************************************************************************************************#
variant SSC_DBObj::bSimpleOwnerEdit()
{
	$bSimpleEdit = false;

	## get the workflow state
	$oState = oGetWorkflowState();

	## if the state is valid work on it
	if ( $oState.IsValid )
	{
		## get the setting for this
		$bSimpleEdit = $oState.bAllowSimpleOwnerChange();
	};

	return $bSimpleEdit;
}
##===========================================================================
##	sGetQualifier
##
##	Gets the group qualifier for objects or Project: Group qualifier for linked in items
##===========================================================================
variant SSC_DBObj::sGetQualifier()
{
	$oPrimaryGrp = oGetPrimaryGroup();
	if ($oPrimaryGrp.IsValid)
	{
		## Check if a linked in object
		if ($oPrimaryGrp.bReferenced)
		{
			## Default to the group name in case not available
			$sQualified = $oPrimaryGrp.sDescription;
			$oSrcProject = $oPrimaryGrp.oSrcProject;
			if ( $oSrcProject.IsValid )
			{
				$oObj = oFindReferenceSource();
				$sQualifier = $oSrcProject.sDescription;
				if ( $oObj.IsValid )
				{
					$oSrcGrp = $oObj.oGetPrimaryGroup();
					if ($oSrcGrp.IsValid)
					{
						$sQualifier = $sQualifier + ": " + $oSrcGrp.sDescription;
					};
				};
			};

		}
		else
		{
			## Figure out whether to use the description or part reference to qualify the item
			$sResponse = $this.sGetMapValue( "R", "iPrimaryGroupDisplay" );
			if( $sResponse == "" )
				$sResponse = "2";
			if ( $sResponse == "0" )
				$sQualifier = "";
			else if( $sResponse == "2" )
			{
				$sPartNumber = $oPrimaryGrp.sGetPartReference();

				if( $sPartNumber == "" )
				{
					## Groups are not normally numbered so don't call the backend method unless it has non-zero id value
					## If linked in don't try to figure out if it has an ID, just call the method
					if ( $oPrimaryGrp.bReference OR $oPrimaryGrp.iOid > 0)
						$sPartNumber = $oPrimaryGrp.sGetRefID();
				};
				if( $sPartNumber == "" )
					$sPartNumber = $oPrimaryGrp.sGetDescription();

				$sQualifier = $sPartNumber;
			}
			else
				$sQualifier = $oPrimaryGrp.sGetDescription();
		};
	}
	else
		$sQualifier = "";
	return $sQualifier;

}

variant SSC_DBObj::nGetFMEAColspan( $sFMEADef, $lsExclude )
{
	$nColspan = 0;

	$sFMEADef = Replace( $sFMEADef, "__", "_" + EOI + "_" );
	$lsFMEADef = split( $sFMEADef, EOI );
	$lsFMEADef = $lsFMEADef -- $lsExclude;

	$nColspan = Count( $lsFMEADef );

	$ssFMEADef = CSet( $lsFMEADef );

	if ( $ssFMEADef contains "_NMSOD_" )
	{
		$nColspan += 2;
	};
	if ( $ssFMEADef contains "_NMSO_" )
	{
		$nColspan += 1;
	};
	if ( $ssFMEADef contains "_RSODR_" )
	{
		$nColspan += 3;
	};
	if ( $ssFMEADef contains "_RSODF_" )
	{
		$nColspan += 3;
	};
	if ( $ssFMEADef contains "_RSOR_" )
	{
		$nColspan += 2;
	};

	return $nColspan;
}

variant SSC_DBObj::sGetDefaultRARequest( $sObjectRequest )
{
	$sRetval = $sObjectRequest;

	switch( $sObjectRequest )
	{
		case "CurrentMitigations":
		case "NewMitigations":
			$sRetval = "Mitigations";
			break;
	};

	return $sRetval;
}

variant SSC_DBObj::sGetDefaultRAFilter( $sObjectRequest )
{
	$sRetval = "";

	switch( $sObjectRequest )
	{
		case "CurrentMitigations":
			$sRetval = "sMitigationIncorporation|==(Text)|Current";
			break;
		case "NewMitigations":
			$sRetval = "sMitigationIncorporation|==(Text)|Recommended";
			break;
	};

	return $sRetval;
}

##===========================================================================
##	bShowPage
##
##	checks the AppObj setting, passing in whether or not this is an admin request
##===========================================================================
variant SSC_DBObj::bShowPage( $sPage )
{
	$bIsAdmin = $this.Context.Get( "bIsAdmin", Lifespan.Request );

	if( $bIsAdmin == NULL )
	{
		$bIsAdmin = $this.bCheckAccess( "ADMIN" );
		$this.Context.Set( "bIsAdmin", $bIsAdmin, Lifespan.Request );
	};

	return SSC_AppObj_Base::bShowPage_s( $sPage, $bIsAdmin );
}

##===========================================================================
##	dtGetLastCheckpointDate
##
##	get the date of the last checkpoint
##  Note:
##===========================================================================
variant SSC_DBObj::dtGetLastCheckpointDate()
{
	## get the history manager
	$oThis = $this.oGetAccessObj();

	$oThis = $oThis.oGetThis_r( "VERSIONING" );
	$oHM = $oThis.oHistoryManager;

	$dtLastCheckpoint = Now();

	## if this is valid, get the history items
	if ( $oHM.IsValid ) {
		## get checkpoint history items
		$oItem = $oHM.oGetLastCheckpointItem();
		if ( $oItem.IsValid ) {
			## get the date from this item
			$dtLastCheckpoint = $oItem.dtCheckedIn;
		} else {
			## see if there is another MASTER version
			if ( $oThis.bCreatedInActiveVersion() ) {
				## use the object creation date/time
				$dtLastCheckpoint = $oThis.dtCreated;
			} else {
				## find the date of the last project version creation date/time
				$oProject = oGetProject();

				## get previous object date/time
				$oPrevious = $oThis.oGetInPreviousProject();
				if ( $oPrevious.IsValid ) {
					## check if this has a history manager
					$oPrevHM = $oPrevious.oHistoryManager;
					if ( $oPrevHM.IsValid ) {
						$oItem = $oPrevHM.oGetLastCheckpointItem();
						if ( $oItem.IsValid ) {
							## get the date from this item
							$dtLastCheckpoint = $oItem.dtCheckedIn;
						} else
							$dtLastCheckpoint = $oPrevHM.dtGetStatusDate();
					} else
						$dtLastCheckpoint = $oPrevious.dtModified;
				};
			};
		};
	} else {
		## use the object creation date/time
		$dtLastCheckpoint = $oThis.dtCreated;
	};

	return $dtLastCheckpoint;
}

##===========================================================================
##	dtGetModTipsCheckpointEndDate
##
##	get the date of the last checkpoint
##  Note:
##===========================================================================
variant SSC_DBObj::dtGetModTipsCheckpointEndDate()
{
	## get the history manager
	$oThis = $this.oGetAccessObj();
	$oThis = $oThis.oGetThis_r( "VERSIONING" );
	$oHM = $oThis.oGetHistoryManager( false );
	$oHM = $oThis.oHistoryManager;

	$dtEndDate = Now();

	## if this is valid, get the history items
	if ( $oHM.IsValid ) {
		## is this is checkpointed show this
		if ( $oHM.bIsCheckPointed() ) {
			$dtEndDate = $oHM.dtGetStatusDate();
		};
	};

	return $dtEndDate;
}

##===========================================================================
## bShowModTipsInFields
##
## Show modtips injected into fields (based on a request
## context)
##===========================================================================
variant SSC_DBObj::bShowModTipsInFields() {
	## check for the special render flag
	$bInFields = $dao.Context.Get( "bModTipsInFields" ) ? true : false;
	return $bInFields;
}


##===========================================================================
## InitializeModTipCheckpointDates
##
## Initialize mod tips checkpoint dates
##===========================================================================
void SSC_DBObj::InitializeModTipCheckpointDates() {
	$sExport = GetRequest( "sExport" );
	$sExport = $sExport != null ? $sExport : "";
	$bExportOK = $sExport == "" Or $sExport == "Word" Or $sExport == "HtmlFile" Or $sExport == "DirectPDF";

	## if mod tips are on, do some special initialization
	## if we are exporting for anything except Word or HTML, we need to prevent inline audits entirely
	if ( Not $bExportOK )
		$dao.Context.Remove( "bModTipsInFields" );
	else if ( ::bModTipsOn() ) {
		## check for special version based display
		if ( ::bModTipsSinceCheckpoint() ) {
			## get a special start and end date
			$dtLastCP = dtGetLastCheckpointDate();
			$dtEndCP = dtGetModTipsCheckpointEndDate();

			## make sure these can't get out of order
			if ( $dtLastCP > $dtEndCP ) $dtLastCP = $dtEndCP;

			SetDaoContext( "sModTipsDateRangeStart", CStr( Format( $dtLastCP, "m/d/yy hh:mm:ss" ) ) );
			SetDaoContext( "sModTipsDateRangeEnd", CStr( Format( $dtEndCP, "m/d/yy hh:mm:ss" ) ) );
		};

		## set an extra flag on the request to indicate content should NOT be editable
		if ( ::bModTipsInlineText() ) {
			$dao.Context.Set( "bModTipsInFields", true );
			$thread.Context.Set( "bRenderNonEdit", true );
		}
		else
			$dao.Context.Remove( "bModTipsInFields" );
	};
}

##===========================================================================
## bShowModTipAuditsInDocuments
##
## Show modtips injected into fields (based on a request
## context)
##===========================================================================
variant SSC_DBObj::bShowModTipAuditsInline() {
	$sExport = GetRequest( "sExport" );
	$sExport = $sExport != null ? $sExport : "";
	$bExportOK = $sExport == "" Or $sExport == "Word" Or $sExport == "HtmlFile" Or $sExport == "DirectPDF";

	## check for the special render flag
	$bShowAudits = $bExportOK And ::bModTipsOn() And ::bModTipsAuditsInline();
	return $bShowAudits;
}

#*!***************************************************************************************************
 * <summary>
 * 	Returns whether current reviews allow editing of this object by this user
 * </summary>
 * <visibility>
 *	Private
 * </visibility>
 * <returns>Boolean</returns>
*****************************************************************************************************#
variant SSC_DBObj::bReviewsAllowEdit() {
	$sExport = GetRequest( "sExport" );
	$sExport = $sExport != null ? $sExport : "";
	if ( $sExport != "" )
	{
		## default to false for export
		return false;
	};
	$sRestrictedReview = sGetMapValue( "S", "sRestrictReviewParent" );
	if( $sRestrictedReview != NULL AND $sRestrictedReview != "" )
	{
		$oReview = COG_Base::oGetByEKey_s( $sRestrictedReview );
		if ( $oReview )
		{
			return $oReview.bCanEditRestrictedReview();
		};
	};
	return true;
}

#*!***************************************************************************************************
 * <summary>
 * 	Stores the current NonEdit thread context for restore later and updates the context if valid.
 *  If the current context is set to a non-piecewise NonEdit then the context wont be changed. The
 *  previous value will still be stored so that the pair method RestoreSavedNonEditThreadContext will
 *  restore correctly.
 *  If there is no context, if it is piecewise, or if it is false then the new NonEdit context is based
 *  on if Reviews allow editing of this item for this user.
 * </summary>
 * <visibility>
 * 	Private
 * </visibility>
*****************************************************************************************************#
void SSC_DBObj::UpdateAndStoreNonEditThreadContext() {
	##Check if a review is causing this item to render NonEdit
	$bRenderNonEdit = NOT bReviewsAllowEdit();

	$bOldRenderNonEdit = $thread.Context.Get( "bRenderNonEdit" );
	$bOldPiecewiseNonEdit = $thread.Context.Get( "bPiecewiseNonEdit" );
	##if reviews restrict editing, then bRenderNonEdit should be set
	if( $bRenderNonEdit )
	{
		$thread.Context.Set( "bRenderNonEdit", true );
		##If a previous request for NonEdit was not set, we should note we only want a PiecewiseNonEdit
		##PiecewiseNonEdit allows bRenderNonEdit to be removed if reviews allow edit of a child section
		if( $bOldRenderNonEdit == NULL Or Not $bOldRenderNonEdit )
			$thread.Context.Set( "bPiecewiseNonEdit", true );
	}
	##else reviews do not restrict the editing
	##if the original NonEdit is true and this is a PiecewiseNonEdit, we can override the NonEdit
	else if( $bOldRenderNonEdit != NULL And $bOldRenderNonEdit And $bOldPiecewiseNonEdit != NULL And $bOldPiecewiseNonEdit )
	{
		$thread.Context.Remove( "bRenderNonEdit" );
	};

	##Save the old states for restoring later
	##The old states are Null when the thread didn't have the context. We still store this so we know to remove.
	##States are saved with the RefId since this could be a nested state (Sec in Doc or Sec in Sec)
	##E.g. Save Old state with Doc Ref, Start Rendering Doc, Save Old State with Sec Ref, Start Rendering Sec,
	## End Rendering Sec, Restore Old state with Sec Ref, End Rendering Doc, Restore Old state with Doc Ref
	$sRef = Ref;
	$thread.Context.Set( "bOldRenderNonEdit_" + $sRef, $bOldRenderNonEdit );
	$thread.Context.Set( "bOldPiecewiseNonEdit_" + $sRef, $bOldPiecewiseNonEdit );
}

#*!***************************************************************************************************
 * <summary>
 * 	Restores the previous NonEdit context that has been saved by UpdateAndStoreNonEditThreadContext.
 * </summary>
 * <visibility>
 * 	Private
 * </visibility>
*****************************************************************************************************#
void SSC_DBObj::RestoreSavedNonEditThreadContext() {
	$sRef = Ref;
	##Only do something if UpdateAndStoreNonEditThreadContext had added a context
	if( $thread.Context.Contains( "bOldRenderNonEdit_" + $sRef ) )
	{
		$bOldRenderNonEdit = $thread.Context.Get( "bOldRenderNonEdit_" + $sRef );
		if( $bOldRenderNonEdit != NULL )
			$thread.Context.Set( "bRenderNonEdit", $bOldRenderNonEdit );
		else
			$thread.Context.Remove( "bRenderNonEdit" );
	};

	##Only do something if UpdateAndStoreNonEditThreadContext had added a context
	if( $thread.Context.Contains( "bOldRenderNonEdit_" + $sRef ) )
	{
		$bOldPiecewiseNonEdit = $thread.Context.Get( "bOldPiecewiseNonEdit_" + $sRef );
		if( $bOldPiecewiseNonEdit != NULL )
			$thread.Context.Set( "bPiecewiseNonEdit", $bOldPiecewiseNonEdit );
		else
			$thread.Context.Remove( "bPiecewiseNonEdit" );
	};
}

#*!***************************************************************************************************
 * <summary>
 * Used by attachments being rendered in a document/section running a performance test
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
*****************************************************************************************************#
void SSC_DBObj::SetASEPerformanceEndContexts()
{
	$this.Context.Set( "r_ASEPerformance_End_CPUTime", CPUTime(), Lifespan.Session  );
	$this.Context.Set( "r_ASEPerformance_End_ClockTime", ClockTime(), Lifespan.Session );
}


#*!***************************************************************************************************
 * <summary>
 * Given a list of binFile audit entries on a DBObj, process them and show the appropriate image differences
 * if applicable
 * </summary>
 * <visibility>
 * internal
 * </visibility>
 * <param name="$loBinFileDiffs" type="WOS List of Object"> List of binFile audit entries</param>
 * <param name="$dtStart" type="Date/Time"> start date for the audit range</param>
 * <param name="$dtEnd" type="Date/Time">end date for the audit range</param>
*****************************************************************************************************#
void SSC_DBObj::ProcessBinFileDifferences( $loBinFileDiffs, $dtStart, $dtEnd, $bNetDiff )
{
	#*
		Step 1: iterate over the binFile diffs, keying them by the attachment object into a map
		Step 2: loop over the attachments and process the binFile diffs for the attachments in the audit range specified
	*#
	$sExport = GetRequest( "sExport" );
	SetRequest( "sExport", "Diff" );
	$loAttachments = NULL;
	$mdtoAttachmentAudits = CMap( CList(), CList() );
	$bModTips = ::bModTipsOn();
	$oCurrObj = *;

	$mooAttachmentsWithBinFileDiffs = CMap( CList(), CList() );

	$loBinFileDiffs/
	{
		$sValue = *.sValue;
		$dtCreated = Format( dtCreated, "dddd mmm dd, yyyy (hh:mm)" );

		$oAudit = *;
		if( $sValue == "" )
		{
			if( $loAttachments == NULL )
			{
				$loAttachments = $oCurrObj.loGetObjects( "Attachments", "Children" );

				$loAttachments/
				{
					$oAttach = *;
					$oAuditLog = *.oAuditLog;
					if ( $oAuditLog.IsValid )
					{
						$loChanges = $oAttach.loGetAllAuditEntries( null, null, null, $bModTips );

						$loChanges/
						{
							$mdtoAttachmentAudits << CMap( Format( dtCreated, "dddd mmm dd, yyyy (hh:mm)" ), * );

							$oEntry = *;
							$oEntry.Context.Set( "oOwningObj", $oAttach, Lifespan.Session );
						};
					};
				};
			};

			$loCurr = pickrange( $mdtoAttachmentAudits, $dtStart, $dtCreated );

			$oEntry = First( GetReverse( $loCurr ) );
			$oAttach = $oEntry.oGetOwningObj();
			if( $oAttach == NULLOBJECT )
				$oAttach = $oEntry.Context.Get( "oOwningObj", Lifespan.Session );
		}
		else
			$oAttach = COG_Base::oGetByEKey_s( $sValue );

		$bIsImageFileType = $oAttach.bIsImageFileType( $oAttach.sFileExtension );
		if( NOT $bIsImageFileType )
		{
			$msaData = $oAttach.msaData;
			if( NOT IsEmpty( $msaData ) )
	    	    $oOLEImage = pick($msaData, "oImage");

			$bHasOLEImage = $oOLEImage != NULL;
			if( $bHasOLEImage )
			{
				$oAttach = $oOLEImage;
				$bIsImageFileType = true;
			};
		};

		$mooAttachmentsWithBinFileDiffs << CMap( $oAttach, $oAudit );
	};

	GetUnique( GetKeys( $mooAttachmentsWithBinFileDiffs ) )/
	{
		$oAttach = *;

		$bIsImageFileType = $oAttach.bIsImageFileType( $oAttach.sFileExtension );

		## get the initial value data
		$mssInitial = mssInitialAuditValues();

		$loChanges = $oAttach.loGetAllAuditEntries( null, $dtStart, $dtEnd, $bModTips );

		## if modtips are on and checkpoint control is on, filter these
		if ( ::bModTipsOn() And ::bModTipsSinceCheckpoint() )
			$loChanges = $loChanges[ iType != 3 ];

		$loParentAudits = pickrange( $mooAttachmentsWithBinFileDiffs, $oAttach, $oAttach );

		$loChangesToUse = CList();

		##for each audit, map it to a change in the attachment audit log
		$loChanges/
		{
			$oAudit = *;
			$dtCreated = dtCreated;
			$bMatch = false;
			$loParentAudits/
			{
				if( NOT $bMatch )
				{

					$oParentAudit = *;
					$dtAttachCreated = dtCreated;
					$nDateDiff = DateDiff( "s", $dtCreated, $dtAttachCreated );
					##make sure the audit is within a minute of the audit we are comparing to
					if( $nDateDiff == 0 )
					{
						$bMatch = true;
						$oParentAudit.Context.Set( "oAttachAudit", $oAudit, Lifespan.Session );
						$loChangesToUse << $oAudit;
					};
				};
			};
		};

		$oAttach.ProcessBinFileDifferences( GetReverse($loChangesToUse), $dtStart, $dtEnd, $bNetDiff );
	};

	SetRequest( "sExport", $sExport );
}


#*!***************************************************************************************************
 * <summary>
 * 	Recursively draws all levels of the export tree
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <param name="$oCurrRoot" type="Object">Current object we are visiting in the tree traversal</param>
 * <param name="$sParentRef" type="String">Parent .Ref</param>
 * <param name="$iLevel" type="Integer">Current recursion level</param>
*****************************************************************************************************#
void SSC_DBObj::DrawExportTreeInner( $oCurrRoot, $sParentRef, $iLevel )
{
	## Don't show child documents
	if ( $iLevel > 0 And $oCurrRoot.classname == "SSC_SubSystem" )
	{
		$iSubSytemType = $oCurrRoot.iGetSubSystemType();
		if ( $iSubSytemType != $oCurrRoot.kiGeneral_s() )
		{
			return;
		};
	};

	$sRef = $oCurrRoot.Ref;
	## First draw the div for this level
	#inline
	<div class="exportTree_<% $sParentRef %>" style="<% $sParentRef != "" ? "margin-left: 10px;" : "" %>">
	#endinline;

	## Draw the current entry
	#inline
	<table width="100%">
		<tr>
			<td>
	#endinline;
	if ( $sParentRef != "" )
	{
		#inline
		<input id="exportCheck_<% $sRef %>" type="checkbox" sRef="<% $sRef %>" sParentRef="<% $sParentRef %>" iLevel="<% $iLevel %>" class="TemplateExportItem" onClick="top.InvalidateExportChildren(this, 'exportTree_<% $sRef %>');" checked />
		#endinline;
	};
	#inline
			</td>
			<td>
				<% $oCurrRoot.GetSnippet( "sItemName" ) %>
			</td>
		</tr>
	</table>
	#endinline;

	## Don't show children of groups
	if ( $iLevel == 0 Or $oCurrRoot.classname != "SSC_SubSystem" )
	{
		## Get the same entries you would normally see in the TOC
		$voChildren = $oCurrRoot.loGetObjects( "TOCEntries", "Tree" );
		$voChildren/
		{
			$oCurrChild = *;
			DrawExportTreeInner( $oCurrChild, $sRef, $iLevel + 1 );
		};
	};

	#inline
	</div>
	#endinline;
}

#*!***************************************************************************************************
 * <summary>
 * 	Draw the full tree of objects below this document
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <param name="$sFile" type="String">Export file name</param>
 * <param name="$sType" type="String">Export type</param>
*****************************************************************************************************#
void SSC_DBObj::DrawExportTree( $sFile, $sType )
{
	$sRef = $this.Ref;
	#inline
	<div style="position:absolute;left:30px;top:12px;width:225px;height:16px;z-index:300069" align="left">
		<h1>Choose Template Objects</h1>
	</div>
	<div style="position:absolute;left:260px;top:17px;width:140px;height:16px;z-index:300069" align="left">
		<span class="ActionLink" sRef="<%Ref%>" sName='PickTemplate' sType='group'
			  onclick="top.exportTemplateSelectCheckboxes(this, false);" onkeypress="top.exportTemplateSelectCheckboxes(this, false);"
			  tabindex="104">Clear selection</span>&nbsp;
		<span class="ActionLink" sRef="<%Ref%>" sName='PickTemplate' sType='group'
			  onclick="top.exportTemplateSelectCheckboxes(this, true);" onkeypress="top.exportTemplateSelectCheckboxes(this, true);"
			  tabindex="104">Select all</span>
	</div>
	<div id="TemplateExportTree" style="position:absolute;left:15px;top:40px;width:435px;height:111px; border:2px solid LightSteelBlue; background-color:white; overflow:auto;" sRef="<%Ref%>">
		<% DrawExportTreeInner( $this, "", 0 ) %>
	</div>
	<div style="position:absolute;left:360px;top:160px;height:13px;" tabindex="103">
		<% ::sMarkUpBox( "Back", "back" ) %>
	</div>
	<div style="position:absolute;left:400px;top:160px;width:25px;height:13px;">
		<span class="ActionLink" sRef="<%Ref%>" sName='PickTemplate' sType='group'
			  onclick="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', null, null, top.sGetExportChildRefs(this) );" onkeypress="top.OnPickTemplate( '<%$sRef%>', '<%$sFile%>', '<%$sType%>', null, null, top.sGetExportChildRefs(this) );"
			  tabindex="104">Next</span>
	</div>
	#endinline;
}

#*!***************************************************************************************************
 * <summary>
 * 	Get a div for a letter icon
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <param name="$sLetter" type="String">Letter to use for icon</param>
 * <param name="$sSize" type="String">Size of icon</param>
 * <param name="$sColor" type="String">Color of icon</param>
 * <param name="$sAdditionalClasses" type="String">Any additional classes to add to the div</param>
 * <param name="$sAdditionalAttrs" type="String">Other attributes to add to the div</param>
 * <returns>Icon div</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetGenericLetterIcon( $sLetter, $sSize, $sColor, $sAdditionalClasses, $sAdditionalAttrs )
{
	if( $sSize == "" ) $sSize = "14x14";
	return "<div draggable='true' class='letter_icon letter_icon_" + $sSize + " " + Lower($sColor) + " " + $sAdditionalClasses + "' " + $sAdditionalAttrs + ">" + $sLetter + "</div>";
}


#*!***************************************************************************************************
 * <summary>
 * Returns the current version string that would be displayed on the history page for the most recent
 * version of this object.
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
*****************************************************************************************************#
variant SSC_DBObj::sGetCurrentVersionNumber()
{
	$oThis = *;

	## Set the starting version increments
	$iVersionNum = 0;
	$iMinorVersion = 0;

	## get history items
	$bShowPreviousEntries = true;
	$tcHistoryItems = tcGetVersionHistory( $bShowPreviousEntries );
	$iStateCRCheckedin = SSC_HistoryManager::kiStateCRCheckedin_s();

	## If no entires, just return "1"
	if ( IsEmpty($tcHistoryItems) )
		return "1";
	else
	{
		$tcHistoryItems/
		{
			$oHItem = *;
			## First figure out if we are looking at a version in a CR
			if ( ($oHItem.Classname == "SSC_HistoryItem") OR ($oHItem.Classname == "SSC_HistoryManager") )
			{
					## Check if in a CR
					$bVersionInCR = $oHItem.Context.Get("bInCR", Lifespan.Request);
			}
			else
				$bVersionInCR = false;

			if ($bVersionInCR)
			{
				## Increment the minor version
				$iMinorVersion += 1;
			}
			else
			{
				## The version is in the main branch, but we need to see if it is merged CR history data
				if ( $oHItem.Classname == "SSC_HistoryItem" )
				{
					## Increment minor version instead if this was originally done under a CR
					$bIncrementMajorVersion = $oHItem.iState != $iStateCRCheckedin;
				}
				else
					$bIncrementMajorVersion = true;

				if ( $bIncrementMajorVersion )
				{
					## Increment the major version
					$iVersionNum += 1;

					## Reset the minor version
					$iMinorVersion = 0;
				}
				else
				{
					if ( $iVersionNum < 1 )
					{
						## Set this as at least version 1, don't need to increment the minor version since it should be reset
						$iVersionNum = 1;
					}
					else
					{
						## Increment the minor version
						$iMinorVersion += 1;
					};
				};
			};
			if ( $iMinorVersion > 0 )
			{
				$sVersionNum = $iVersionNum + "." + $iMinorVersion;
			}
			else
			{
				## Combine the major and minor version if in a CR
				$sVersionNum = CStr($iVersionNum);
			};
		};
	};
	return $sVersionNum;
}

#*!***************************************************************************************************
 * <summary>
 * 	Given an FMEA def, makes sure that 1) every column has a keyword and 2) every keyword is unique
 * </summary>
 * <visibility>
 * 	internal
 * </visibility>
 * <param name="$lsFMEADef" type="WOS List of String">the FMEA def to repair</param>
 * <returns></returns>
*****************************************************************************************************#
variant SSC_DBObj::lsRepairFMEADef( $lsFMEADef )
{
	$lsRetval = CList();

	$ssKeywords = CSet();

	$mssReplacedKeywords = CMap( CList(), CList() );

	## If permissions prevent us from checking on color display settings,
	## assume the default false and continue to render the FMEA (SPR44863)
	try {
		$bUseColorText = oGetProject().sGetValue( "sUseColorDisplayNames" ) == "true";
	} catch($e) {
		$bUseColorText = false;
	};

	$lsFMEADef/
	{
		$sDef = *;

		$sObjectRequest = Item( $sDef, 1, 1, "|" );
		$sKeyword = Item( $sDef, 5, 5, "|" );

		if( $sKeyword == "" )
			$sKeyword = "%COL_" + $iternum + "%";
		else if( NOT IsEmpty( $ssKeywords ) AND $ssKeywords contains $sKeyword )
			$sKeyword = "%" + $sKeyword + "_" + $iternum + "%";
		else if( find( $sKeyword, "%" ) == -1 )
		{
			$sNewKeyword = "%" + $sKeyword + "%";
			$mssReplacedKeywords << CMap( $sKeyword, $sNewKeyword );
			$sKeyword = $sNewKeyword;
		};

		##IF we are showing text for the score columns, make sure the width of the column is at least 1in to support showing the text without it shoving
		##the columns over
		if( $bUseColorText )
		{
			$sSnippet = Item( $sDef, 4, 4, "|" );
			switch( $sSnippet )
			{
				case "FMEA RPN":
				case "FMEA SxO":
				case "FMEA Residual RPN":
				case "FMEA Residual SxO":
					$sWidth = Item( $sDef, 3, 3, "|" );
					$sWidth = Replace( $sWidth, "in", "" );
					$nWidth = CReal( $sWidth );


					if( $nWidth < 1 )
						$sDef = Item( $sDef, 1, 2, "|" ) + "|1in|" + Item( $sDef, 4, Itemcount( $sDef, "|" ), "|" );
					break;
			};
		};


		$ssKeywords << $sKeyword;

		##any single character keywords will be replaced with %keyword% to prevent issues where one keyword is a substring of another
		##or is a substring of an object reference
		if( NOT IsEmpty( $mssReplacedKeywords ) )
		{

			##process the object request first
			$sObjectRequest = Item( $sDef, 1, 1, "|" );
			$bKeywordOnly = true;

			if( find( $sObjectRequest, ":" ) != -1 )
			{
				$sCurrKeyword = Item( $sObjectRequest, 2, 2, ":" );
				$bKeywordOnly = false;
			}
			else
				$sCurrKeyword = $sObjectRequest;

			$sReplacement = pick( $mssReplacedKeywords, $sCurrKeyword );
			if( $sReplacement != NULL )
			{
				if( $bKeywordOnly )
					$sObjectRequest = $sReplacement;
				else
					$sObjectRequest = Item( $sObjectRequest, 1, 1, ":" ) + ":" + $sReplacement;
			};

			##next process the style block to check for publisher references
			$sCellStyle = Item( $sDef, 6, 6, "|" );
			$lsStylesToParse = split( Item( $sCellStyle, 2, Itemcount( $sCellStyle, "+" ), "+" ), "+" );

			## interpreted styles are in the following format:
			## sStyleEncoding,sSubscriptionEncoding
			##
			## the style encoding is as follows: cssStyle name=sDataRequest
			## if the data request needs to reference another object, it will be EOI sKeyword where the
			## keyword is the column keyword. For example, if on a Cause I want to have the data request be
			## sEffectColor EOI sFailureModeRef, the encoding will be sEffectColor EOI PF
			##
			## the Subscription encoding is as follows:
			## sID~sSubscription~sArgument
			## if sID is blank, dub in the Ref for $oCurrObj
			## if sID is NOT blank, it is a keyword (like PF above in the sDataRequest example) and the
			## reference of the object for the keyword will be dubbed in
			$lsStylesToParse/
			{
				$nItemcount = Itemcount( *, "," );

				$sCurrStyle = Item( *, 1, 1, "," );

				$sDataRequest = Item( $sCurrStyle, 2, 2, "=" );

				if( find( $sDataRequest, EOI ) != -1 )
				{
					$sCurrKeyword = Item( $sDataRequest, 2, 2, EOI );
					$sReplacement = pick( $mssReplacedKeywords, $sCurrKeyword );
					if( $sReplacement != NULL )
					{
						$sNewStyle = Item( $sCurrStyle, 1, 1, "=" ) + "=" + Item( $sDataRequest, 1, 1, EOI ) + EOI + $sReplacement;
						$sCellStyle = Replace( $sCellStyle, $sCurrStyle, $sNewStyle );
					};
				};

				$sSubToParse = "";
				if( $nItemcount == 2 )
					$sSubToParse = Item( *, 2, 2, "," );


				if( $sSubToParse != "" )
				{
					$ssID = CSet();
					$sSubscription = "";

					$lsSubscriptions = split( $sSubToParse, "^" );

					$lsNewSubscriptions = CList();

					$lsSubscriptions/
					{
						$sCurrSub = *;
						if( $iternum > 0 )
							$sSubscription += "^";

						$sSubID = Item( $sCurrSub, 1, 1, "~" );

						$lsID = split( $sSubID, EOI );
						$lsReplaced = CList();
						$lsID/
						{
							$sCurrID = *;
							if( $sCurrID != "" )
							{
								$sReplacement = pick( $mssReplacedKeywords, $sCurrID );
								if( $sReplacement != NULL )
									$lsReplaced << $sReplacement;
								else
									$lsReplaced << $sCurrID;
							};
						};

						$sNewSubID = join($lsReplaced, EOI );

						$lsNewSubscriptions << Replace( $sCurrSub, $sSubID, $sNewSubID );
					};

					$sNewSubs = join( $lsNewSubscriptions, "^" );

					$sCellStyle = Replace( $sCellStyle, $sSubToParse, $sNewSubs );
				};
			};

			##finally, process the hints
			$sHints = Item( $sDef, 9, 9, "|" );

			if( NOT IsEmpty( $mssReplacedKeywords ) )
			{
				foreach( $mssReplacedKeywords )
				{
					$sCurrKeyword = $iterkey;
					$sNewKeyword = *;

					##hints are in URL format, so search for =sKeyword to replace
					if( find( $sHints, "=" + $sCurrKeyword ) != -1 )
						$sHints = Replace( $sHints, "=" + $sCurrKeyword, "=" + $sNewKeyword );
				};
			};

			$sNewDef = $sObjectRequest + "|" + Item( $sDef, 2, 4, "|" ) + "|" + $sKeyword + "|" + $sCellStyle;
			$sNewDef += "|" + Item( $sDef, 7, 8, "|" ) + "|" + $sHints;

			if( Itemcount( $sDef, "|" ) > 9 )
				$sNewDef += Item( $sDef, 10, Itemcount( $sDef, "|" ), "|" );

			$lsRetval << $sNewDef;
		}
		else
			$lsRetval << Item( $sDef, 1, 4, "|" ) + "|" + $sKeyword + "|" + Item( $sDef, 6, Itemcount( $sDef, "|" ), "|" );

	};

	return $lsRetval;
}

#*!***************************************************************************************************
 * <summary>
 * 	get the name of a version from the number
 * </summary>
 * <visibility>
 * 	internal
 * </visibility>
 * <param name="$sNumber" type="String">Number to look for</param>
 * <returns></returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetVersionNameFromNumber( $sNumber ) {

	## response
	$sResponse = "";

	## get latest version number
	$sLatest = sGetActiveItemVersion();
	$oCurProject = oGetProject();

	if ( $sLatest != $sNumber ) {
		$oVersion = $this;

		## determine the version object that corresponds to this item
		$iThisMaster = Item( $sLatest, 1, 1, "." );
		$iTargetMaster = Item( $sNumber, 1, 1, "." );

		if ( $iTargetMaster < $iThisMaster ) {
			## get previous version of this object
			$oProj = $oCurProject.oGetProjectVersion( CStr( $iTargetMaster ), False );
			$oVersion = ( $oProj.IsValid ) ? $oProj.oGetByID( $this.'sName/ID', $this.ClassName ) : NullObject;
		};

		## if we found the older version, find the history item
		if ( $oVersion.IsValid ) {
			$oHM = $oVersion.oGetHistoryManager(False);
			if ( $oHM.IsValid ) {
				$voItems = CVector();
				$voItems << $oHM.cHistoryItems;
				$voItems << $oHM;

				## get index and look up entry by this
				$iIndex = CInt(Item( $sNumber, 2, 2, "." ))-1;

				if ( $iIndex < Count( $voItems ) ) {
					$oItem = pick( $voItems, $iIndex );

					## get the name
					if ( $oItem.IsValid )
						$sResponse = $oItem.sName;
				};

			};
		};

	} else {
		## if this is checkpointed, we should show the name, otherwise show "<Latest>"
		if ( bIsItemCheckPointed() ) {
			## get HM
			$oHM = oGetHistoryManager(False);
			if ( $oHM.IsValid ) {
				$sResponse = $oHM.sName;
			};
		} else {
			$sResponse = "Latest";
		};

	};

	## get the value
	return $sResponse;
}



##Used for Differences Report
variant SSC_DBObj::GetTreeObjectList( $sKind, $sScope )
{
	$loList = CList();

	##Add myself

	$loList << $this;

	if( $this kindOf "SSC_ItemGroup" )
	{
		##get my doc children

		$loChildren = loGetObjects( $sKind, $sScope );

		$this.Context.Set( "loDocChildren", $loChildren, Lifespan.Request );

		$oParent = *;

		##recur
		$loChildren/
		{
			$oChild = *;

			$oCurrParent = 	$oChild.Context.Get( "oDocParent", Lifespan.Request );

			if( $oCurrParent == NULL )
				$oChild.Context.Set( "oDocParent", $oParent, Lifespan.Request );

			$loList << $oChild.GetTreeObjectList( $sKind, $sScope );
		};
	};

	return $loList;
}

void SSC_DBObj::DisplayDerivedDifferences( $oPreviousObj )
{
	DisplayDerivedDifferences( $oPreviousObj, false );
}

void SSC_DBObj::DisplayDerivedDifferences( $oPreviousObj, $bTopLevel )
{
	if( $oPreviousObj == NULLOBJECT )
	{

		#inline
		<table style='font:8pt verdana;'>
			<tr>
				<td>
					<%$this.GetSnippet( "sItemLinkQualified" )%>
				</td>
				<td>

				</td>
			</tr>
		</table>
		<div style="margin-left:35px; ">
			Object does not exist in the source version.
		</div>
		#endinline;
	}
	else
	{
		$oThis = *;
		$oSrcProject = $oPreviousObj.oGetProject();

		$sPurpose = "DocumentDisplay";
		$bVersionDiff = false;

		## Need to set the current project pointer so requirement differences can function
		$oProject = $oThis.oGetProject();
		SetThreadContext("oCurrentDiffProject", $oProject);

		## Need to get the version before we remap the object
		$sPrevVersion = $oPreviousObj.sGetVersionNumber();

		## If object passed in is history manager, we need to get the oOwner object
		if ( $oPreviousObj.Classname == "SSC_HistoryManager" ) $oPreviousObj = $oPreviousObj.oOwner;
		if ( $oPreviousObj.Classname == "SSC_HistoryItem" ) $oPreviousObj = $oPreviousObj.oControlledItem;

		$sRef = $oThis.Ref;

		$sPublisher = $sRef + "~onRefresh~Differences^" + $sRef + "~onRefresh~no-body";

		## do diff
		$mssDiffs = $oThis.Context.Get( "mssDiffs", Lifespan.Request );



		if( $mssDiffs == NULL )
			$mssDiffs = $oThis.mssGetDifferences( $oPreviousObj, "", true );

		$bLinkedObj = $oThis kindOf "SSC_LinkedObj";

		$sClassname = $oThis.classname;

		$bExport = GetRequest( "sExport" ) != NULL;

		## ahead of time we will check to see if we have any value, relation, or attribute changes before
		## we render the main header, so if these 3 lists are empty we can skip them

		$vsValues = pickrange( $mssDiffs, "VALUE", "Value~" );

		$lsRelationDiffs = CList();

		## get the relationship types
		$vsRelations = $oThis.vsGetDirectRelations();

		## go through these relations and add information
		$vsRelations/
		{
			$sRelation = *;
			$lsRelationDiffs << pickrange( $mssDiffs, "RELATION:"+$sRelation );
		};

		## get the role changes
		$vsRoleDiffs = pickrange( $mssDiffs, "ROLE", "ROLE~" );

		## strip the attribute differences, since properties will replace this
		$wsAttrs = CSet();

		## get the attribute changes
		$vsAttrs = pickrange( $mssDiffs, "ATTRIBUTE", "ATTRIBUTE~" );

		## now process the properties

		## only get the UDAs if there are any differences
		$bIncludeUDAs = false;
		if ( $vsAttrs CONTAINS "msaCustomData" )
			$bIncludeUDAs = true;

		$vsProperties = $oThis.vsGetAllProperties( true, $bIncludeUDAs );

		$lsRows = CList();
		$vsProperties/
		{
			$sProperty = *;

			$bIsMultivalueUDA = AseAttribute::bIsMultivalueUDA( $oThis, $sProperty, $sClassname );

			## new vs old
			## read old and new properties
			$sOld = $oPreviousObj.sGetData( $sProperty );

			if ( NOT $bIsMultivalueUDA AND ItemCount( $sOld, EOI ) > 1 )
				$sOld = Item( $sOld, 2, 2, EOI );

			$sNew = $oThis.sGetData( $sProperty );
			if ( NOT $bIsMultivalueUDA AND ItemCount( $sNew, EOI ) > 1 )
				$sNew = Item( $sNew, 2, 2, EOI );

			## property is different
			if ( $sOld != $sNew )
			{
				$lsThisRow = CList();

				## determine if this is a rich text property
				$bRich = $oThis.bIsRichTextProperty( $sProperty );

				if ( $bRich )
				{
					## Before we actually add the row, see if they really are different by comparing the
					## raw value. This is necessary because embedded images use KC object references
					$sTxt1 = $oThis.sGetRawRichText( $sProperty );
					$sTxt2 = $oPreviousObj.sGetRawRichText( $sProperty );

					$sTxt1 = $oThis.sDecodeManagedDocUrl( $sTxt1 );
					$sTxt2 = $oPreviousObj.sDecodeManagedDocUrl( $sTxt2 );

					##Trace("Raw diff: " + $sTxt2 + " / " + $sTxt1);
					if ( $sTxt1 != $sTxt2 )
					{
        				$lsThisRow << "<tr>";
						$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>" + $oThis.sGetPropertyName( $sProperty ) + "</td>";
						$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>Modified</td>";
						$lsThisRow << "<td style='border:1px solid gray;'>";
						$lsThisRow << "<div style='padding-left:10px;padding-right:10px;'>";
						## Replaced the old RTFDiff because it wasn't handling the ManagedDoc links properly when running as a slave
						## $lsThisRow << "<script language='JavaScript'>document.write( top.GetRTFDiff( '" + $oThis.Ref + "', '" + $oPreviousObj.Ref + "', '" + $sProperty + "' ) )</script>";
						$lsThisRow << ::sDiff($sTxt2, $sTxt1);
						$lsThisRow << "</div>";
						$lsThisRow << "</td>";

						if( NOT $bExport )
						{
							$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>";
							$lsThisRow << "<span style='padding-left:10px;padding-right:10px;' class='fakelink'";

							$lsThisRow << " onclick='top.RunCommand( this, false );' sRef='" + $sRef + "' ";
							$lsThisRow << " sUrl='RunCommand.ase?oThis=" + $sRef + "&sCommand=SetDataFromDerivedObject&oPreviousObj=" + $oPreviousObj.Ref + "&sProperty=" + $sProperty + "&bUpdateTxn=true' ";
							$lsThisRow << "	publisher='" + $sPublisher + "' >";
							$lsThisRow << "Update Value</span>";
							$lsThisRow << "</td>";
						};

        				$lsThisRow << "</tr>";

						## add this to the full content
						$lsRows << $lsThisRow;
					};
				}
				else if( $bIsMultivalueUDA )
				{
					##need to compare the checkbox html values
					$sTxt1 = $oThis.sGetSnippet( $sProperty );
					$sTxt2 = $oPreviousObj.sGetSnippet( $sProperty );

					if ( $sTxt1 != $sTxt2 )
					{
        				$lsThisRow << "<tr>";
						$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>" + $oThis.sGetPropertyName( $sProperty ) + "</td>";
						$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>Modified</td>";
						$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>";
						$lsThisRow << "<table style='font:8pt verdana;'><tr><td style='width:1in;border-right:1px solid gray;'>" + $sTxt2 + "</td>";
						$lsThisRow << "<td style='width:1in' >" + $sTxt1 + "</td>";
						$lsThisRow << "</tr></table></td>";

						if( NOT $bExport )
						{
							$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>";
							$lsThisRow << "<span style='padding-left:10px;padding-right:10px;' class='fakelink'";
							$lsThisRow << " onclick='top.RunCommand( this, false );' sRef='" + $sRef + "' ";
							$lsThisRow << " sUrl='RunCommand.ase?oThis=" + $sRef + "&sCommand=SetDataFromDerivedObject&oPreviousObj=" + $oPreviousObj.Ref + "&sProperty=" + $sProperty + "&bUpdateTxn=true' ";
							$lsThisRow << "	publisher='" + $sPublisher + "' >";
							$lsThisRow << "Update Value</span>";
							$lsThisRow << "</td>";
						};

        				$lsThisRow << "</tr>";

						## add this to the full content
						$lsRows << $lsThisRow;
					};
				}
				else
				{
					## Need to translate the values
					if ( ($sOld != "") AND (StrLen($sOld) < 128) ) $sOld = GetGenString($sOld);
					if ( ($sNew != "") AND (StrLen($sNew) < 128) ) $sNew = GetGenString($sNew);
    				$lsThisRow << "<tr>";
	    			$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>" + $oThis.sGetPropertyName( $sProperty ) + "</td>";
					$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;'>Modified</td>";
					$lsThisRow << "<td style='border:1px solid gray;'>" + ::sDiff($sOld, $sNew)  + "</td>";

					if( NOT $bExport )
					{
						$lsThisRow << "<td style='border:1px solid gray;vertical-align:top;vertical-align:top;'>";
						$lsThisRow << "<span style='padding-left:10px;padding-right:10px;' class='fakelink'";
						$lsThisRow << " onclick='top.RunCommand( this, false );' sRef='" + $sRef + "' ";
						$lsThisRow << " sUrl='RunCommand.ase?oThis=" + $sRef + "&sCommand=SetDataFromDerivedObject&oPreviousObj=" + $oPreviousObj.Ref + "&sProperty=" + $sProperty + "&bUpdateTxn=true' ";
						$lsThisRow << "	publisher='" + $sPublisher + "' >";
						$lsThisRow << "Update Value</span>";
						$lsThisRow << "</td>";
					};

    				$lsThisRow << "</tr>";

	    			## add this to the full content
					$lsRows << $lsThisRow;
				};

			};
		};

		##this is constructed and set on the thread in DifferencesReport_Body
		$soDocParentsWithChildren = GetThreadContext( "soDocParentsWithChildren" );
		if( $soDocParentsWithChildren == NULL )
			$soDocParentsWithChildren = CSet();

		$bHeaderRendered = true;
		$bTableRendered = false;

		if( NOT IsEmpty( $lsRelationDiffs ) OR NOT IsEmpty( $lsRows ) OR NOT IsEmpty( $vsValues ) OR NOT IsEmpty( $vsRoleDiffs ) OR $oThis.classname == "SSC_SubSystem" OR ( $soDocParentsWithChildren contains $oThis ) )
		{
			$sCurVersion = $oThis.sGetVersionNumber();
			#inline
			<table style='font:8pt verdana;'>
				<tr>
					<td>
						<%$oThis.GetSnippet( "sItemLinkQualified" )%>
					</td>
					<td>
					#endinline;

					#*if( NOT $bExport )
					{
						#inline
						<span class='fakelink' style='margin-left:20px;'
							onclick='top.RunCommand( this, false );' sRef='<%$sRef%>'
							sUrl='RunCommand.ase?oThis=<%$sRef%>&sCommand=UpdateItemValueDifferences&oPreviousObj=<%$oPreviousObj.Ref%>&bUpdateTxn=true'
							publisher='<%$sRef%>~onRefresh~no-body' sRefreshMethods='this.ownerDocument.location=this.ownerDocument.location'>
							Update Values</span>
						#endinline;
					};*#

					#inline
					</td>
				</tr>
			</table>
			<div style="margin-left:35px; ">
			#endinline;


		}
		else
			$bHeaderRendered = false;

			if( NOT IsEmpty( $lsRows ) )
			{
				##render the table header
				#inline
					<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
						<col style='width:2in;'>
						<col style='width:2in;'>
						<col style='width:2in;'>
						<%$bExport? "":"<col style='width:2in;'>"%>
						<tr>
							<th style='border:1px solid gray;'>Property/ Relationship</th>
							<th style='border:1px solid gray;'>Change</th>
							<th style='border:1px solid gray;'>Value/ Differences</th>
							<%$bExport? "":"<th style='border:1px solid gray;'>Action</th>"%>
						</tr>
				#endinline;

				$bTableRendered = true;
			};

			$lsRows;

			##show value differences
			if ( $vsValues )
			{
				$vsValues/
				{
					$sValue = *;
					$sOld = item( $sValue, 3, 3, eoi );
					$sNew = item( $sValue, 2, 2, eoi );
					$sName = item( $sValue, 1, 1, eoi );

					$sProperty = $sName;

					if( find( $sValue, "ManagedDoc" ) != -1 )
					{
						$sOld = $oPreviousObj.sDecodeManagedDocUrl( $sOld );
						$sNew = $oThis.sDecodeManagedDocUrl( $sNew );
					};

					if( NOT $bTableRendered )
					{
						##render the table header
						#inline
							<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
								<col style='width:2in;'>
								<col style='width:2in;'>
								<col style='width:2in;'>
								<%$bExport? "":"<col style='width:2in;'>"%>
								<tr>
									<th style='border:1px solid gray;'>Property/ Relationship</th>
									<th style='border:1px solid gray;'>Change</th>
									<th style='border:1px solid gray;'>Value/ Differences</th>
									<%$bExport? "":"<th style='border:1px solid gray;'>Action</th>"%>
								</tr>
						#endinline;

						$bTableRendered = true;
					};

					#inline
					<tr>
						<td style='border:1px solid gray;vertical-align:top;'><%$sName%></td>
						<td style='border:1px solid gray;vertical-align:top;'>Modified</td>
						<td style='border:1px solid gray;'>
						<div style='padding-left:10px;padding-right:10px;'>
						<%::sDiff( $sOld, $sNew )%>
						</div>
						</td>
						#endinline;

						if( NOT $bExport )
						{
							#inline
							<td style='border:1px solid gray;vertical-align:top;'>
								<span style='padding-left:10px;padding-right:10px;' class='fakelink'
									onclick='top.RunCommand( this, false );' sRef='<%$oThis.Ref%>'
									sUrl='RunCommand.ase?oThis=<%$oThis.Ref%>&sCommand=SetDataFromDerivedObject&oPreviousObj=<%$oPreviousObj.Ref%>&sProperty=<%$sProperty%>&bUpdateTxn=true'
									publisher='<%$sPublisher%>'>
									Update Value</span>
							</td>
							#endinline;
						};
					#inline
					</tr>
					#endinline;

				};
			};

			##Render the relationship differences
			##$vsRelationDiffs = pickrange( $mssDiffs, "RELATION:", "RELATION:~" );

			$oDerivedProject = $oThis.oGetProject();

			## get the relationship types
			##$vsRelations = $oThis.vsGetDirectRelations();



			## go through these relations and add information
			$vsRelations/
			{
				$sRelation = *;
				$vsDiffs = pickrange( $mssDiffs, "RELATION:"+$sRelation );

				if ( $vsDiffs != null And Not IsEmpty( $vsDiffs ) )
				{
					## Get the two parts
					$sType = Item( $sRelation, 1, 1, "," );
					$sScope = Item( $sRelation, 2, 2, "," );

					## Special case all data to just show the scope
					if ( $sType == "ALLDATA" )
						$sNiceRelation = $sScope;
					else
						$sNiceRelation = $sType + " ( " + $sScope + " )";

					$vsDiffs/
					{
						$sDiff = *;
						$sChange = Item( $sDiff, 1, 1, Chr(4) );
						$sDescr = Item( $sDiff, 2, 2, Chr(4) );
						$sKey = Item( $sDiff, 3, 3, Chr(4) );
						$sRatingOld = Item( $sDiff, 4, 4, Chr(4) );
						$sRatingNew = Item( $sDiff, 5, 5, Chr(4) );

						## If rating values are not blank, they need to be converted to the correct displayed item

						## get this object
						$oObj = COG_Base::oGetByEKey_s( $sKey );

						if( COG_Base::bIsAvailable( $oObj ) )
						{
							if ( $sType == "ALLDATA" )
								$sNiceRelation = Upper( $oObj.sGetRequestFromTagType( $oObj.sGetTagType() ) ) + " ( " + $sScope + " )";

							## get its project. For this report, we ONLY care about derived objects from the same src
							## project as the original document
							$loSourceObj = $oObj.loGetObjects( "SrcObject", "Children" );

							$oCurrSrcProject = $oObj.oGetProject();
							$oSrcObj = NULLOBJECT;
							if( NOT IsEmpty( $loSourceObj ) )
							{
								$oSrcObj = First( $loSourceObj );
								$oCurrSrcProject = $oSrcObj.oGetProject();
							};

							##manually find a child section with the same section number in the source project
							if( $oSrcObj == NULLOBJECT AND $oObj.classname == "SSC_Category" )
							{
								$sSectionNumber = $oObj.sGetDataValue( "sSectionNumber" );

								$loSourceObj = $oPreviousObj.loGetObjects( "Sections", "Children" )[ sGetDataValue( "sSectionNumber" ) == $sSectionNumber ];

								if( NOT IsEmpty( $loSourceObj ) )
									$oSrcObj = First( $loSourceObj );
							};

							$bLinkedObj = $oObj kindOf "SSC_LinkedObj";

							##filter out attachment diffs
							##$bVersionDiff =  $oCurrSrcProject == $oSrcProject AND $bLinkedObj;

							##if( $bVersionDiff OR ( $oObj.classname == "SSC_Category" ) OR ( $oThis.classname == "SSC_Category" ) )
							if(true)
							{
								$sLabel = "";

								## Map the change to the correct string
								if ( $sChange == "Removed" )
									$sLabel = GetGenString("OnlyInOriginal");
								else if ( $sChange == "Added" )
									$sLabel = GetGenString("OnlyInDerived");
								else
									$sLabel = GetGenString($sChange);

								if( NOT $bTableRendered )
								{
									##render the table header
									#inline
										<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
											<col style='width:2in;'>
											<col style='width:2in;'>
											<col style='width:2in;'>
											<%$bExport? "":"<col style='width:2in;'>"%>
											<tr>
												<th style='border:1px solid gray;'>Property/ Relationship</th>
												<th style='border:1px solid gray;'>Change</th>
												<th style='border:1px solid gray;'>Value/ Differences</th>
												<%$bExport? "":"<th style='border:1px solid gray;'>Action</th>"%>
											</tr>
									#endinline;

									$bTableRendered = true;
								};

								#inline
								<tr>
									<td style='border:1px solid gray;vertical-align:top;'><%$sNiceRelation%></td>

									<td style='border:1px solid gray;vertical-align:top;'><%$sLabel%></td>
									<td style='border:1px solid gray;vertical-align:top;'>
										<%$oObj==NULLOBJECT?$sDescr:$oObj.GetSnippet("sItemLinkQualified")%>
									</td>
									#endinline;
									if( NOT $bExport AND ( $bLinkedObj OR ( $oObj.classname == "SSC_Category" )  ) )
									{
										#inline
										<td style='border:1px solid gray;vertical-align:top;'>
										#endinline;
										if( $sChange == "Removed" )
										{
											if( $sScope == "PARENTS" )
											{
												#inline
												<span class='fakelink' style='margin-left:10px'
													onclick='top.RunCommand( this, false );' sRef='<%$oThis.Ref%>'
													sUrl='RunCommand.ase?oThis=<%$oThis.Ref%>&sCommand=AddParent&oParent=<%$oObj.Ref%>&bUpdateTxn=true'
													publisher='<%$sPublisher%>' sValue=''
													sRefreshMethods='top.PublishEvents(this)'>Add</span>
												#endinline;
											}
											else
											{
												if( $oObj.classname == "SSC_Category" AND $oSrcObj != NULLOBJECT )
												{
													$sSrcObjRef = $oSrcObj.Ref;

													$sUrl = "RunCommand.ase?oThis=" + $oThis.Ref + "&oSource=" + $sSrcObjRef + "&sCommand=DragDrop" + "&bUpdateTxn=true";
													$sUrl += "&sDragDropAction=C&sCopyOption=link";
													#inline
													<span class='fakelink' publisher='<%$sPublisher%>' sUrl='<%$sUrl%>'
														onclick='top.sGetUrl( this.getAttribute( "sUrl" ) ); top.PublishEvents( this )' >Copy and Link Sub Items</span>
													<br><br>
													<span class='fakelink' sObjRef='<%$sSrcObjRef%>'
														onclick='event.cancelBubble = true; toggleSubItemDisplay_DifferenceReport( this );' >Show Sub Items</span>
													#endinline;
												}
												else
												{
													$sUrl = "RunCommand.ase?oThis=" + $oThis.Ref + "&oSource=" + $oObj.Ref + "&sCommand=LinkObj" + "&bUpdateTxn=true";
													#inline
													<span class='fakelink' publisher='<%$sPublisher%>' sUrl='<%$sUrl%>'
														onclick='top.RunCommand( this );' >Add<span>
													#endinline;
												};
											};
										}
										else if( $sChange == "Added" AND $oObj.classname != "SSC_Category" )
										{
											$sCurrRef = $oObj.Ref;
											if( $sScope == "PARENTS" )
											{
												$sUrl = "RunCommand.ase?oThis=" + $oObj.Ref + "&oSource=" + $oThis.Ref + "&sCommand=UnlinkObj" + "&bUpdateTxn=true";
												$sCurrRef = $oThis.Ref;
											}
											else
												$sUrl = "RunCommand.ase?oThis=" + $oThis.Ref + "&oSource=" + $oObj.Ref + "&sCommand=UnlinkObj" + "&bUpdateTxn=true";

											#inline
											<span class='fakelink' publisher='<%$sPublisher%>' sUrl='<%$sUrl%>' sRef='<%$sCurrRef%>'
												onclick='RemoveFromDifferencesReport( this, event );' >Remove</span>
											#endinline;
										};
										#inline
										</td>
										#endinline;
									}
									else
									{
										#inline
										<td style='border:1px solid gray;vertical-align:top;'>
										</td>
										#endinline;
									};
								#inline
								</tr>
								#endinline;

								if( $sChange == "Removed" AND $oObj.classname == "SSC_Category" AND $oSrcObj != NULLOBJECT )
								{
									$loChildren = $oSrcObj.loGetObjects( "DOCUMENTATION", "TOC" );

									if( NOT IsEmpty( $loChildren ) )
									{
										$sCurrParentRef = $oSrcObj.Ref;

										#inline
										<tr style='display:none' sParentRef='<%$sCurrParentRef%>' >
											<td colspan=4 style='border:1px solid gray;'>
												<div style='margin-left:35px;'>
												<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
													<col style='width:2in;'>
													<col style='width:2in;'>
													<tr>
														<th style='border:1px solid gray;'>Property/ Relationship</th>
														<th style='border:1px solid gray;'>Item</th>
													</tr>
										#endinline;
												$loChildren/
												{
													$oCurr = *;
													$sCurrNiceRelation = Upper( $oCurr.sGetRequestFromTagType( $oCurr.sGetTagType() ) ) + " ( CHILDREN )";
													#inline
													<tr>
														<td style='border:1px solid gray;'>
															<%$sCurrNiceRelation%>
														</td>
														<td style='border:1px solid gray;'>
															<%$oCurr.GetSnippet("sItemLinkQualified")%>
														</td>
													</tr>
													#endinline;
												};

										#inline
												</table>
												</div>
											</td>
										</tr>
										#endinline;

									};
								};

							};##if true. always show relation diffs
						};##if( COG_Base::bIsAvailable( $oObj ) )
					};##$vsDiffs
				}; ##if
			}; ## $vsRelations

			##Show the role diffs
			$vsRoleDiffs/
			{
				if( NOT $bTableRendered )
				{
					##render the table header
					#inline
						<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
							<col style='width:2in;'>
							<col style='width:2in;'>
							<col style='width:2in;'>
							<%$bExport? "":"<col style='width:2in;'>"%>
							<tr>
								<th style='border:1px solid gray;'>Property/ Relationship</th>
								<th style='border:1px solid gray;'>Change</th>
								<th style='border:1px solid gray;'>Value/ Differences</th>
								<%$bExport? "":"<th style='border:1px solid gray;'>Action</th>"%>
							</tr>
					#endinline;

					$bTableRendered = true;
				};

				$sDiff = *;
				$sRole = item( $sDiff, 1, 1, eoi );
				$sValue = item( $sDiff, 2, 2, eoi );
				$sChange = item( $sDiff, 3, 3, eoi );

				## now, get the nice name for this
				$sNiceRole = SSC_Role::sGetNiceRoleName_s( $sRole );

				## now get the nice change label
				$sLabel = "";
				## Map the change to the correct string
				if ( $sChange == "Deleted" )
					$sLabel = GetGenString("OnlyInOriginal");
				else if ( $sChange == "Added" )
					$sLabel = GetGenString("OnlyInDerived");
				else
					$sLabel = GetGenString($sChange);

				## compare role holders from new to old
				#inline
				<tr>
					<td style='border:1px solid gray;'><%$sNiceRole%></td>
					<td style='border:1px solid gray;'><%$sLabel%></td>
					<td style='border:1px solid gray;'><%$sValue%></td>
					<%$bExport? "":"<td style='border:1px solid gray;'></td>"%>
				</tr>
				#endinline;

			};

			##handle interactions for requirements

			if( $oThis.classname ==  "SSC_SysReq" )
			{
				##1) get the interactions for the current project
				##2) filter out any objects not derived from the source project
				##3) Compare the interactions rating between the source project and the derived project
				##	 and display the rating changes with an update link

				$oThisSrcObj = NULLOBJECT;
				$loSourceObj = $oThis.loGetObjects( "SrcObject", "Children" );
				if( NOT IsEmpty( $loSourceObj ) )
				{
					$oThisSrcObj = First( $loSourceObj );
				};

				##try DerivedFrom
				if( $oThisSrcObj == NULLOBJECT )
				{
					$loDerivedFrom = $oThis.loGetObjects( "DerivedFrom", "Children" );

					if( NOT IsEmpty( $loDerivedFrom ) )
					{
						$oThisSrcObj = First( $loDerivedFrom );
					};
				};

				if( $oThisSrcObj != NULLOBJECT )
				{
					$soCurrInteractions = CSet();
					$mooInteractionToSource = CMap( CList(), CList() );

					$mosInteractionToRating = CMap( CList(), CList() );

					$loCurrInteractions = $oThis.loGetObjects( "Requirements", "Interactions" );

					$soSourceInteractions = CSet();

					##keep track of an interaction present in both source and derived project item
					$soBoth = CSet();

					$soSourceInteractions << $oThisSrcObj.loGetObjects( "Requirements", "Interactions" );

					$loCurrInteractions/
					{
						$oObj = *;

						## get its project. For this report, we ONLY care about derived objects from the same src
						## project as the original document
						$loSourceObj = $oObj.loGetObjects( "SrcObject", "Children" );

						$oCurrSrcProject = $oObj.oGetProject();
						$oSrcObj = NULLOBJECT;
						if( NOT IsEmpty( $loSourceObj ) )
						{
							$oSrcObj = First( $loSourceObj );
							$oCurrSrcProject = $oSrcObj.oGetProject();
						};

						##try DerivedFrom
						if( $oSrcObj == NULLOBJECT )
						{
							$loDerivedFrom = $oObj.loGetObjects( "DerivedFrom", "Children" );

							if( NOT IsEmpty( $loDerivedFrom ) )
							{
								$oSrcObj = First( $loDerivedFrom );
								$oCurrSrcProject = $oSrcObj.oGetProject();
							};
						};

						## process the interaction and save the rating
						if( ( $oCurrSrcProject != $oDerivedProject ) AND ( $oCurrSrcProject == $oSrcProject ) )
						{
							$mooInteractionToSource << CMap( $oObj, $oSrcObj );

							$sOldRating = "";
							if( $soSourceInteractions contains $oSrcObj )
							{
								$sOldRating = $oThisSrcObj.sGetData_b("dRoofLink"+ EOI + $oSrcObj.Ref, "");

								$mosInteractionToRating << CMap( $oSrcObj, $sOldRating );
							};
							$sNewRating = $oThis.sGetData_b("dRoofLink"+ EOI + $oObj.Ref, "");


							if( $sOldRating != $sNewRating )
							{
								$soCurrInteractions << $oObj;

								if( $oSrcObj != NULLOBJECT AND $sOldRating != "" )
									$soBoth << $oSrcObj;

								$mosInteractionToRating << CMap( $oObj, $sNewRating );
							}
							else
							{
								$soSourceInteractions = $soSourceInteractions -- CList( $oSrcObj );
							};
						};

					};

					if( NOT IsEmpty( $soSourceInteractions ) OR NOT IsEmpty( $soCurrInteractions ) OR NOT IsEmpty( $soBoth ) )
					{
						$bNone = false;

						if ( Not $bHeaderRendered )
						{
							$sCurVersion = $oThis.sGetVersionNumber();
							#inline
							<table style='font:8pt verdana;'>
								<tr>
									<td style='width:95%' >
										<%$oThis.GetSnippet( "sItemLinkQualified" )%>
									</td>
									<!--
									<td style='width:5%' >
										<span class='fakelink' style='margin-left:10px'
											onclick='top.RunCommand( this, false );' sRef='<%$oThis.Ref%>'
											sUrl='RunCommand.ase?oThis=<%$oThis.Ref%>&sCommand=UpdateItemValueDifferences&oPreviousObj=<%$oPreviousObj.Ref%>&bUpdateTxn=true'
											publisher='<%$sPublisher%>'>
											Update Values</span>
									</td>
									-->
								</tr>
							</table>
							<div style="margin-left:35px; ">
								<div><b>
								Differences between version '<%$sPrevVersion%>' in original and version '<%$sCurVersion%>' in derived
								</b></div>
								<br><br>
							#endinline;

							$bHeaderRendered = true;
						};

						if( NOT $bTableRendered )
						{
							##render the table header
							#inline
								<table style='border-collapse:collapse;empty-cells:show;font:8pt verdana;color:black;text-align:left;'>
									<col style='width:2in;'>
									<col style='width:2in;'>
									<col style='width:2in;'>
									<%$bExport? "":"<col style='width:2in;'>"%>
									<tr>
										<th style='border:1px solid gray;'>Property/ Relationship</th>
										<th style='border:1px solid gray;'>Change</th>
										<th style='border:1px solid gray;'>Value/ Differences</th>
										<%$bExport? "":"<th style='border:1px solid gray;'>Action</th>"%>
									</tr>
							#endinline;

							$bTableRendered = true;
						};


						## loop through the current interactions first
						$soCurrInteractions/
						{
							$oCurr = *;
							if( NOT IsEmpty( $mooInteractionToSource ) )
								$oSource = pick( $mooInteractionToSource, $oCurr );

							## only show derived interactions
							if( $oSource != NULL )
							{
								$sAction = "Remove";
								$sActionDisplay = "Remove (only in derived)";

								## link exists in both
								if( $soBoth contains $oSource )
								{
									$sAction = "Update";
									$sActionDisplay = $sAction;
								};

								$sOldRating = "";

								if( $sAction == "Update" )
									$sOldRating = pick( $mosInteractionToRating, $oSource );

								$sNewRating = pick( $mosInteractionToRating, $oCurr );

								if( $sOldRating != $sNewRating )
								{
									#inline
									<tr>
										<td style='border:1px solid gray;vertical-align:top;'>
											REQUIREMENTS (INTERACTIONS )
										</td>
										<td style='border:1px solid gray;vertical-align:top;'>
											Rating:
											<span style='text-decorationstrikethrough;color:red;border:1px solid gray;'>
												<%$sOldRating%>
											</span> <%$sNewRating%>
										</td>
										<td style='border:1px solid gray;'>
											<%$oCurr.GetSnippet( "sSearchResult" );%>
										</td>
										<td style='border:1px solid gray;vertical-align:top;'>
									#endinline;
										if( $sAction == "Remove" )
											$sUrl = "RunCommand.ase?oThis=" + $oThis.Ref + "&oSource=" + $oCurr.Ref + "&sCommand=UnlinkObj" + "&bUpdateTxn=true";
										else
										{
											$sUrl = "RunCommand.ase?oThis=" + $oThis.Ref + "&oSource=" + $oCurr.Ref + "&sCommand=LinkObj" + "&bUpdateTxn=true";
											$sUrl += "&sNewRelationshipType=Interactions&sRequest=dRoofLink&sValue=" + $sOldRating;
										};

									#inline
											<span class='fakelink' publisher='<%$sPublisher%>' sUrl='<%$sUrl%>'
												onclick='top.RunCommand( this );'  >
												<%$sActionDisplay%>
											</span>
										</td>
									</tr>
									#endinline;
								};
							}; ##$oSource != NULL
						}; ##soCurrInteractions

						##loop through to show the interactions only present in the source project
						## link calls a UDR because the base link obj was creating a copy
						$soSourceInteractions/
						{
							$oCurr = *;
							if( NOT ( $soBoth contains $oCurr ) )
							{
								$sOldRating = $oThisSrcObj.sGetData_b("dRoofLink"+ EOI + $oCurr.Ref, "");

								#inline
								<tr>
									<td style='border:1px solid gray;vertical-align:top;'>
										REQUIREMENTS (INTERACTIONS )
									</td>
									<td style='border:1px solid gray;vertical-align:top;'>
										Rating:
										<span style='text-decorationstrikethrough;color:red;border:1px solid gray;'>
											<%$sOldRating%>
										</span>
									</td>
									<td style='border:1px solid gray;'>
										<%$oCurr.GetSnippet( "sSearchResult" );%>
									</td>
									<td style='border:1px solid gray;'>
										<span class='fakelink' style='margin-left:10px'
											onclick='top.RunCommand( this, false );' sRef='<%$oThis.Ref%>'
											sUrl='RunCommand.ase?oThis=<%$oThis.Ref%>&sCommand=AddInteraction&oInteraction=<%$oCurr.Ref%>&sRating=<%URLEncode( $sOldRating )%>&bUpdateTxn=true'
											publisher='<%$sPublisher%>' sValue=''
											sRefreshMethods='top.PublishEvents(this)'>Add (only in source)</span>
									</td>
								</tr>
								#endinline;
							};
						};
					};## if( NOT IsEmpty( $soSourceInteractions ) OR NOT IsEmpty( $soCurrInteractions ) OR NOT IsEmpty( $soBoth ) )
				}; ## if $oThisSrcObj
			};## if SSC_SysReq


		if( $bTableRendered )
		{
			#inline
			</table>
			#endinline;
		}
		else if( $bHeaderRendered OR $bTopLevel )
			"No differences found.";
		else
		{
			#inline
			<table style='font:8pt verdana;'>
				<tr>
					<td>
						<%$this.GetSnippet( "sItemLinkQualified" )%>
					</td>
					<td>

					</td>
				</tr>
			</table>
			<div style="margin-left:35px; ">
				No differences found.
			</div>
			#endinline;
		};


		if( $bHeaderRendered )
		{
			#inline
			</div>
			#endinline;
		};
	};
}

void SSC_DBObj::UpdateItemValueDifferences( $oPreviousObj )
{
	UpdateItemValueDifferences( $oPreviousObj, "" );
}

void SSC_DBObj::UpdateItemValueDifferences( $oPreviousObj, $sCPVersion )
{
	$oThis = *;

	$sPreviousObj = $oPreviousObj.Ref;

	UpdateItemRelationshipDifferences( $oPreviousObj );

	$mssDiffs = $oThis.mssGetDifferences( $oPreviousObj, "", true );

	if( NOT IsEmpty( $mssDiffs ) )
	{
		## strip the attribute differences, since properties will replace this
		$wsAttrs = CSet();

		## get the attribute changes
		$vsAttrs = pickrange( $mssDiffs, "ATTRIBUTE", "ATTRIBUTE~" );

		## now process the properties

		## only get the UDAs if there are any differences
		$bIncludeUDAs = false;
		if ( $vsAttrs CONTAINS "msaCustomData" )
			$bIncludeUDAs = true;

		$vsProperties = $oThis.vsGetAllProperties( true, $bIncludeUDAs );

		$vsProperties/
		{
			$sProperty = *;

			## new vs old
			## read old and new properties
			$sOld = $oPreviousObj.sGetData( $sProperty );

			if ( ItemCount( $sOld, EOI ) > 1 )
				$sOld = Item( $sOld, 2, 2, EOI );

			$sNew = $oThis.sGetData( $sProperty );
			if ( ItemCount( $sNew, EOI ) > 1 )
				$sNew = Item( $sNew, 2, 2, EOI );

			if( find( $sOld, "ManagedDoc" ) == -1 )
			{
				## property is different
				if ( Trim( $sOld ) != Trim( $sNew ) )
				{
					$oThis.SetDataFromDerivedObject( $oPreviousObj, $sProperty );
				};
			};
		};


		## get the value changes
		$vsValues = pickrange( $mssDiffs, "VALUE", "Value~" );

		$vsValues/
		{
			$sValue = *;
			$sOld = item( $sValue, 3, 3, eoi );
			$sNew = item( $sValue, 2, 2, eoi );
			$sName = item( $sValue, 1, 1, eoi );

			$sProperty = $sName;

			if( find( $sOld, "ManagedDoc" ) == -1 )
				$oThis.SetDataFromDerivedObject( $oPreviousObj, $sProperty );

		};
	};

}

void SSC_DBObj::UpdateItemRelationshipDifferences( $oPreviousObj )
{
	$oThis = *;

	$sPreviousObj = $oPreviousObj.Ref;

	$oSrcProject = $oPreviousObj.oGetProject();

	$oThisProj = $oThis.oGetProject();

	$mssDiffs = $oThis.mssGetDifferences( $oPreviousObj, "", true );

	$oApp = COG_AppObj::oGet_s();

	$bVersionDiff = false;


	## check if there are ANY relation changes
	$vsRelationDiffs = pickrange( $mssDiffs, "RELATION:", "RELATION:~" );

	## ============================== Relation Diffs ===================================================

	if ( $vsRelationDiffs OR $oThis.classname == "SSC_SysReq" )
	{
		## get the relationship types
		$vsRelations = $oThis.vsGetDirectRelations();

		$oDerivedProject = $oThis.oGetProject();

		$bNone = true;

		## go through these relations and add information
		$vsRelations/
		{
			$sRelation = *;
			$vsDiffs = pickrange( $mssDiffs, "RELATION:"+$sRelation );

			if ( $vsDiffs != null And Not IsEmpty( $vsDiffs ) )
			{
				## Get the two parts
				$sType = Item( $sRelation, 1, 1, "," );
				$sScope = Item( $sRelation, 2, 2, "," );

				## Special case all data to just show the scope
				if ( $sType == "ALLDATA" )
					$sNiceRelation = $sScope;
				else
					$sNiceRelation = $sType + " ( " + $sScope + " )";

				$vsDiffs/
				{
					$sDiff = *;
					$sChange = Item( $sDiff, 1, 1, Chr(4) );
					$sDescr = Item( $sDiff, 2, 2, Chr(4) );
					$sKey = Item( $sDiff, 3, 3, Chr(4) );
					$sRatingOld = Item( $sDiff, 4, 4, Chr(4) );
					$sRatingNew = Item( $sDiff, 5, 5, Chr(4) );

					## If rating values are not blank, they need to be converted to the correct displayed item

					## get this object
					$oObj = COG_Base::oGetByEKey_s( $sKey );

					if( COG_Base::bIsAvailable( $oObj ) )
					{
						## get its project. For this report, we ONLY care about derived objects from the same src
						## project as the original document
						$loSourceObj = $oObj.loGetObjects( "SrcObject", "Children" );

						$oCurrSrcProject = $oObj.oGetProject();
						$oSrcObj = NULLOBJECT;
						if( NOT IsEmpty( $loSourceObj ) )
						{
							$oSrcObj = First( $loSourceObj );
							$oCurrSrcProject = $oSrcObj.oGetProject();
						};

						$bLinkedObj = $oObj kindOf "SSC_LinkedObj";

						if( ( $oCurrSrcProject != $oDerivedProject ) AND ( $oCurrSrcProject == $oSrcProject ) )
						{
							## Map the change to the correct string
							if ( $bVersionDiff )
							{
								$sChange = GetGenString($sChange);
							}
							else
							{
								if ( $sChange == "Removed" )
									$sLabel = GetGenString("OnlyInOriginal");
								else if ( $sChange == "Added" )
									$sLabel = GetGenString("OnlyInDerived");
								else
									$sLabel = GetGenString($sChange);
							};

							if( $sChange == "Removed" )
							{
								if( $sScope == "PARENTS" )
								{
									$oThis.AddParent( $oObj );
								}
								else
								{
									SetRequest( "oSource", $oObj );
									$oApp.RunCommandHandler( $oThis, "LinkObj" );
								};
							}
							else if( $sChange == "Added" )
							{
								if( $sScope == "PARENTS" )
								{
									SetRequest( "oSource", $oThis );
									$oApp.RunCommandHandler( $oObj, "UnlinkObj" );
								}
								else
								{
									SetRequest( "oSource", $oObj );
									$oApp.RunCommandHandler( $oThis, "UnlinkObj" );
								};
							};

						};

						};##if( ( $oCurrSrcProject != $oDerivedProject ) AND ( $oCurrSrcProject == $oSrcProject ) )
					};##if( COG_Base::bIsAvailable( $oObj ) )
				};##$vsDiffs
			};##if ( $vsDiffs != null And Not IsEmpty( $vsDiffs ) )

		};##$vsRelations

	## ============================== Interaction Diffs ===================================================

	##check for interactions differences
	if( $oThis.classname ==  "SSC_SysReq" )
	{
		##1) get the interactions for the current project
		##2) filter out any objects not derived from the source project
		##3) Compare the interactions rating between the source project and the derived project
		##	 and display the rating changes with an update link

		$oThisSrcObj = NULLOBJECT;
		$loSourceObj = $oThis.loGetObjects( "SrcObject", "Children" );
		if( NOT IsEmpty( $loSourceObj ) )
		{
			$oThisSrcObj = First( $loSourceObj );
		};

		##try DerivedFrom
		if( $oThisSrcObj == NULLOBJECT )
		{
			$loDerivedFrom = $oThis.loGetObjects( "DerivedFrom", "Children" );

			if( NOT IsEmpty( $loDerivedFrom ) )
			{
				$oThisSrcObj = First( $loDerivedFrom );
			};
		};

		if( $oThisSrcObj != NULLOBJECT )
		{
			$soCurrInteractions = CSet();
			$mooInteractionToSource = CMap( CList(), CList() );

			$mosInteractionToRating = CMap( CList(), CList() );

			$loCurrInteractions = $oThis.loGetObjects( "Requirements", "Interactions" );

			$soSourceInteractions = CSet();

			##keep track of an interaction present in both source and derived project item
			$soBoth = CSet();

			$soSourceInteractions << $oThisSrcObj.loGetObjects( "Requirements", "Interactions" );

			$loCurrInteractions/
			{
				$oObj = *;

				## get its project. For this report, we ONLY care about derived objects from the same src
				## project as the original document
				$loSourceObj = $oObj.loGetObjects( "SrcObject", "Children" );

				$oCurrSrcProject = $oObj.oGetProject();
				$oSrcObj = NULLOBJECT;
				if( NOT IsEmpty( $loSourceObj ) )
				{
					$oSrcObj = First( $loSourceObj );
					$oCurrSrcProject = $oSrcObj.oGetProject();
				};

				##try DerivedFrom
				if( $oSrcObj == NULLOBJECT )
				{
					$loDerivedFrom = $oObj.loGetObjects( "DerivedFrom", "Children" );

					if( NOT IsEmpty( $loDerivedFrom ) )
					{
						$oSrcObj = First( $loDerivedFrom );
						$oCurrSrcProject = $oSrcObj.oGetProject();
					};
				};

				## process the interaction and save the rating
				if( ( $oCurrSrcProject != $oDerivedProject ) AND ( $oCurrSrcProject == $oSrcProject ) )
				{
					$mooInteractionToSource << CMap( $oObj, $oSrcObj );

					$sOldRating = "";
					if( $soSourceInteractions contains $oSrcObj )
					{
						$sOldRating = $oThisSrcObj.sGetData_b("dRoofLink"+ EOI + $oSrcObj.Ref, "");

						$mosInteractionToRating << CMap( $oSrcObj, $sOldRating );
					};
					$sNewRating = $oThis.sGetData_b("dRoofLink"+ EOI + $oObj.Ref, "");


					if( $sOldRating != $sNewRating )
					{
						$soCurrInteractions << $oObj;

						if( $oSrcObj != NULLOBJECT AND $sOldRating != "" )
							$soBoth << $oSrcObj;

						$mosInteractionToRating << CMap( $oObj, $sNewRating );
					}
					else
					{
						$soSourceInteractions = $soSourceInteractions -- CList( $oSrcObj );
					};
				};##if( ( $oCurrSrcProject != $oDerivedProject ) AND ( $oCurrSrcProject == $oSrcProject )

			};##$loCurrInteractions

			if( NOT IsEmpty( $soSourceInteractions ) OR NOT IsEmpty( $soCurrInteractions ) OR NOT IsEmpty( $soBoth ) )
			{

				## loop through the current interactions first
				$soCurrInteractions/
				{
					$oCurr = *;
					if( NOT IsEmpty( $mooInteractionToSource ) )
						$oSource = pick( $mooInteractionToSource, $oCurr );

					## only show derived interactions
					if( $oSource != NULL )
					{
						$sAction = "Remove";
						$sActionDisplay = "Remove (only in derived)";

						## link exists in both
						if( $soBoth contains $oSource )
						{
							$sAction = "Update";
							$sActionDisplay = $sAction;
						};

						$sOldRating = "";

						if( $sAction == "Update" )
							$sOldRating = pick( $mosInteractionToRating, $oSource );

						$sNewRating = pick( $mosInteractionToRating, $oCurr );

						if( $sOldRating != $sNewRating )
						{

							if( $sAction == "Remove" )
							{
								SetRequest( "oSource", $oCurr );
								$oApp.RunCommandHandler( $oThis, "UnlinkObj" );
							}
							else
							{
								SetRequest( "oSource", $oCurr );
								SetRequest( "oSsNewRelationshipTypeource", "Interactions" );
								SetRequest( "sRequest", "dRoofLink" );
								SetRequest( "sValue", $sOldRating );

								$oApp.RunCommandHandler( $oThis, "LinkObj" );
							};
						};
					}; ##$oSource != NULL
				}; ##soCurrInteractions

				##loop through to show the interactions only present in the source project
				## link calls a UDR because the base link obj was creating a copy
				$soSourceInteractions/
				{
					$oCurr = *;
					if( NOT ( $soBoth contains $oCurr ) )
					{
						$sOldRating = $oThisSrcObj.sGetData_b("dRoofLink"+ EOI + $oCurr.Ref, "");

						$oThis.AddInteraction( $oCurr, $sOldRating );
					};
				};

			};## if( NOT IsEmpty( $soSourceInteractions ) OR NOT IsEmpty( $soCurrInteractions ) OR NOT IsEmpty( $soBoth ) )
		}; ## if $oThisSrcObj
	};## if SSC_SysReq
}

void SSC_DBObj::AddParent( $oItemToLink )
{
	$oThis = *;

	## $oItemToLink is the object in another project
	## need to find the version of it in the current document
	## and if one doesn't exist, do a cross project target only link
	## to the unallocated items bin and use that

	$oPG = oGetPrimaryGroup();

	$oProject = oGetProject();

	$loDerived = $oItemToLink.loGetObjects( "TargetObjects", "All" )[ oGetPrimaryGroup() == $oPG ];

	$oDerived = NULLOBJECT;
	if( NOT IsEmpty( $loDerived ) )
		$oDerived = First( $loDerived );
	else
	{

		## link to unallocated bin and then use result
		$oUnallocatedBD = $oProject.oGetUnallocatedBreakdown();

		##move to unallocated bin
		$sRtn = $oUnallocatedBD.sAssociate( $oItemToLink, "", NULLOBJECT, NULLOBJECT, "", NULLOBJECT, "" );

		$loDerived = $oItemToLink.loGetObjects( "TargetObjects", "All" )[ oGetProject() == $oProject ];

		if( NOT IsEmpty( $loDerived ) )
		{
			$oDerived = First( $loDerived );

			if( $oDerived.classname == "SSC_SysReq" )
				$sFoo = $oDerived.SetData( "bLinkTargetOnly", "true" );
		};
	};

	if( $oDerived != NULLOBJECT )
	{
		## here we do the parent link by registering $oThis as a child to $oDerived
		$sRtn = $oDerived.sAssociate( $oThis, "", NULLOBJECT, NULLOBJECT, "", NULLOBJECT, "" );
	};
}

#*!***************************************************************************************************
 * <summary>
 * 	get the name of a version from the number
 * </summary>
 * <visibility>
 * 	internal
 * </visibility>
 * <param name="$sNumber" type="String">Number to look for</param>
 * <returns></returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetCRVersionNameFromNumber( $sNumber, $oCR ) {

	## Default the respone to the number passed in so something gets returned if we cannot translate
	$sResponse = $sNumber;

	## We need to get the history manager on the clone to be able to translate the version
	$oClone = $oCR.oGetClone($this);

	if ($oClone.IsValid)
	{
		## See if we have a history manager
		$oHistoryMgr = $oClone.oHistoryManager;
		if ($oHistoryMgr.isvalid)
		{
			## First see if we can find a match on the history items
			$voItems << $oHistoryMgr.cHistoryItems;
			$voItems/
			{
				$oHItem = *;
				$sVersion = $oHItem.sVersionNumber;

				## If found something we are done
				if ($sVersion == $sNumber)
				{
					$sResponse = $oHItem.sName;
					break
				};
			};
			## If we did not find it then look to see if the history manager is checkpointed since it must be it's name we want
			if ($sNumber == $sResponse)
			{
				if ($oHistoryMgr.iLatestState == $oHistoryMgr.kiStateCheckedIn_s())
					$sResponse = $oHistoryMgr.sName;
				else
					$sResponse = "Latest";
			};
		};
	};

	## get the value
	return $sResponse;
}



void SSC_DBObj::SetDataFromDerivedObject( $oObject, $sDataRequest )
{
	$oThis = *;
	$sThisRef = Ref;

	$sThisID = $oThis.'sName/ID';

	## if the request contains a dash, it is
	## a value stored in a requirement data section
	if( find( $sDataRequest, "-" ) != -1 )
	{
		$mssKeyToDataRequest = $thread.Context.Get( "mssKeyToDataRequest" );

		if( $mssKeyToDataRequest == NULL )
		{
			$vsPossibleDataSections = vsGetDataSections("All");

			$mssKeyToDataRequest = CMap( CList(), CList() );

			$vsPossibleDataSections/
			{
				$sName = Item( *, 1, 1, "|" );
				$iSection = Item( *, 3, 3, "|" );
				$iType = CInt( Item( *, 2, 2, "|" ) );

				$sCurrType = "";
				if( $iType == SSC_SysReq::kiDesignData_s() )
					$sCurrType = GetGenString( "ksDesign" );
				if( $iType == SSC_SysReq::kiProcessData_s() )
					$sCurrType = GetGenString( "ksProcess" );
				if( $iType == SSC_SysReq::kiTargetData_s() )
					$sCurrType = GetGenString( "ksTarget" );
				if( $iType == SSC_SysReq::kiTestData_s() )
					$sCurrType = GetGenString( "ksTest" );

				$mssKeyToDataRequest << CMap( $sCurrType + " - " + $sName, "sDataValue" + EOI + $iSection );
				$mssKeyToDataRequest << CMap( "Rationale - " + $sName, "sDataRationale" + EOI + $iSection );
			};

			$thread.Context.Set( "mssKeyToDataRequest", $mssKeyToDataRequest );
		};

		$sDataRequest = pick( $mssKeyToDataRequest, $sDataRequest );
	};

	$sValue = $oObject.sGetDataValue( $sDataRequest );

	$s = $sValue;

	## here we need to check for managed doc and if found, we need to copy over the images
	## find managedDoc refs
	$iFind = find( $s, "ManagedDoc/", 1 );

	if( $iFind != -1 )
	{
		$mMapping = $oObject.msoGetConnectionMap();

		$sLeft = "";
		$sRight = $s;


		$lsReplacements = CList();

		## continue while we find some
		while ( $iFind > 0 )
		{
			## start of src
			$iSrcStart = $iFind;

			## find boundaries of src string
			$iSrcEnd = find( $s, "eoi", $iFind ) + 3;
			## strip out the pieces of this content
			$iLen = $iSrcEnd - $iSrcStart;

			## If bad string and eoi missing we need to not generate ASE error
			if ( $iLen < 1 )
				$sUrl = "";
			else
				$sUrl = SubStr( $s, $iSrcStart, $iLen );

			## found this
			$bFound = false;

			## search the source string
			if ( $sUrl ~ "m#ManagedDoc/(.*?)\/(.*?)\.(.*?)\?.*?eoi#" )
			{
				$sNameID = $re1;
				$sConID = $re2;
				$sExt = $re3;

				## locate the connection
				$oDoc = pick( $mMapping, $sConID );

				if ( $oDoc )
				{
					$oImg = $oDoc.oCopy( $oThis, -1 );

					$oThis.Register( $oImg, NullObject, "" );

					$oCurrProject = $oThis.oGetProject();

					$oImg.SetAttr( "oProject", $oCurrProject );
					$oCurrProject.Register( $oImg, NULLOBJECT, "" );
					SSC_WorkflowState::InitializeWorkflowState_s( $oImg );

					variant $vAlreadyThere;
					$bRegister = $oCurrProject.bCheckAndSetUniqueID( $oImg, $oImg.GetAttr( "sName/ID" ), $vAlreadyThere );

					$oCon = $oThis.oGetLinkObj( $oImg, "" );

					$sNewConID = $oCon.sID;

					## add this to the replacements
					$lsReplacements << $sUrl + EOI + "ManagedDoc/" + $sThisID + "/" + $sNewConID + "." + $sExt + "?sConID=" + $sNewConID + "&iVersion=-1&eoi";

				};
			};

			## look for next one
			$iFind = $iFind + 10;
			$iFind = find( $s, "ManagedDoc/", $iFind );
		};

		## perform the replacement
		$lsReplacements/
		{
			$sOld = item( *, 1, 1, eoi );
			$sNew = item( *, 2, 2, eoi );

			## do the replacement
			$sValue = Replace( $sValue, $sOld, $sNew );
		};

		$sFoo = $oThis.SetData( $sDataRequest, $sValue );
	}
	else
		$sFoo = $oThis.SetData( $sDataRequest, $sValue );


}

#*!***************************************************************************************************
 * <summary>
 * 	Drops the @page word style blocks. It will create the Section1 block with information from the
 *  current object. Then it will create one for each unique page size found in the sections below
 *  it. For each page size, a Portrait and Landscape page is created. Other than Section1 pages are
 *  named as Orientation_PageLength_PageWidth where decimals in sizes are converted to - for safety
 *  E.g. Letter page style blocks are @page Portrait_11in_8-5in and @page Landscape_11in_8-5in
 * </summary>
 * <visibility>
 *
 * </visibility>
*****************************************************************************************************#
void SSC_DBObj::GetWordPageStyleBlocks() {
	$oThis = *;

	## Code to set the layout of the document to reflect the document's setting
	$sDocLayout = sGetInheritedPageValue( "sDocLayout" );

	##allows you to set the layout for reports that use this theme for export
	$sDocLayoutOverride = GetRequest( "sDocLayoutOverride" );
	if( $sDocLayoutOverride != NULL )
		$sDocLayout = $sDocLayoutOverride;

	$sDocOrientation = $sDocLayout;
	if ( $oThis kindof "SSC_Category" ) {
		$oDoc = $oThis.oGetPrimaryGroup();
		$sDocOrientation = $oDoc.sGetData( "sDocLayout" );
	};

	## create the margins css
	$sTopMargin = sGetData( "sTopMargin" );
	$sRightMargin = sGetData( "sRightMargin" );
	$sBottomMargin = sGetData( "sBottomMargin" );
	$sLeftMargin = sGetData( "sLeftMargin" );
	$sPortraitMargins = $sTopMargin + " " + $sRightMargin + " " + $sBottomMargin + " " + $sLeftMargin;
	$sLandscapeMargins = $sPortraitMargins;
	if ( NOT ( sGetData( "sLockMargins" ) ~= "true" ) ) {
		$sOtherMargins = $sLeftMargin + " " + $sTopMargin + " " + $sRightMargin + " " + $sBottomMargin;
		if ( $sDocOrientation == "Landscape" ) {
			$sPortraitMargins = $sOtherMargins;
		} else {
			$sLandscapeMargins = $sOtherMargins;
		};
	};

	$sPageSizePair = sGetInheritedPageValue( "sPageSize_Pair" );
	$sPageSizePair = Replace($sPageSizePair, "-", ".");
	$sPageLength = Item( $sPageSizePair, 1, 1, "_" );
	$sPageWidth = Item( $sPageSizePair, 2, 2, "_" );

	#inline
	@page Section1
	{
	#endinline;

	if( $sDocLayout == "Landscape" ) {
		#inline
		size:<%$sPageLength%> <%$sPageWidth%>;
		mso-page-orientation:landscape;
		margin: <%$sLandscapeMargins%>;
		#endinline;
	} else {
		#inline
		size:<%$sPageWidth%> <%$sPageLength%>;
		mso-page-orientation:portrait;
		margin: <%$sPortraitMargins%>;
		#endinline;
	};

	#inline
		<%$oThis.GetGenericWordPageStyles( true )%>
	}
	#endinline;

	$sGeneralStyles = sGetGenericWordPageStyles( false );

	$lsPageSizeTypes = lsChildPageSizeTypes();
	$oAppObj = COG_AppObj::oGet_s();
	$sPageLengthLetter = $oAppObj.sGetPageLength( "Letter" );
	$sPageWidthLetter = $oAppObj.sGetPageWidth( "Letter" );
	$sPageLengthA4 = $oAppObj.sGetPageLength( "A4" );
	$sPageWidthA4 = $oAppObj.sGetPageWidth( "A4" );
	$lsPageSizeTypes << $sPageLengthLetter + "_" + $sPageWidthLetter;
	$lsPageSizeTypes << $sPageLengthA4 + "_" + $sPageWidthA4;
	$lsPageSizeTypes << $sPageLength + "_" + $sPageWidth;
	$lsPageSizeTypes = GetUnique($lsPageSizeTypes);
	$lsPageSizeTypes/
	{
		$sPageSize = *;
		$sPageSize = Replace($sPageSize, ".", "-");
		$sLength = Item( *, 1, 1, "_" );
		$sWidth = Item( *, 2, 2, "_" );
		#inline
		@page Portrait_<%$sPageSize%>
		{
			size:<%$sWidth%> <%$sLength%>;
			mso-page-orientation:portrait;
			mso-paper-source:0;
			margin: <%$sPortraitMargins%>;
			<%$sGeneralStyles%>
		}

		@page Landscape_<%$sPageSize%>
		{
			size:<%$sLength%> <%$sWidth%>;
			mso-page-orientation:landscape;
			mso-paper-source:0;
			margin: <%$sLandscapeMargins%>;
			<%$sGeneralStyles%>
		}
		#endinline;
	};
}

#*!***************************************************************************************************
 * <summary>
 * 	Returns word styles that are defined at the document level so they do not change on a section
 *  by section basis. $bFirst should be true for the first section to handle special fist page
 *  headers/footers
 * </summary>
 * <visibility>
 *
 * </visibility>
 * <param name="$bFirst" type="Boolean">True if this is css for the first section in an export</param>
*****************************************************************************************************#
variant SSC_DBObj::sGetGenericWordPageStyles( $bFirst ) {
	$sCSS = "";
	$sCSS += "mso-paper-source:0;";

	## Code to set the layout of the document to reflect the document's setting
	$sHeaderFooterOptions = sGetData( "sHeaderFooterOptions" );
	$sWatermarkOptions = sGetData( "sWatermarkOptions" );

	if ( $sHeaderFooterOptions != "Don't show" )
	{
		$sHeaderMargin = sGetData( "sHeaderMargin" );
		$sFooterMargin = sGetData( "sFooterMargin" );
		##DocHeaderPortrait can be used for either orientation since the new Aspose
		##generation does not have the table width problem that the old way had
		$sCSS += "mso-header-margin:" + $sHeaderMargin + ";";
		$sCSS += "mso-footer-margin:" + $sFooterMargin + ";";
		$sCSS += "mso-header: DocHeaderPortrait;";
		$sCSS += "mso-footer: DocFooterPortrait;";

	}
	else if($sWatermarkOptions != "Don't show")
	{
		$sCSS += "mso-header: DocHeader;";
	};
	if ( $sHeaderFooterOptions == "Show w/first page special" )
	{
		if( $bFirst ) {
			$sCSS += "mso-title-page:yes;";
			$sCSS += "mso-first-header: DocHeaderFirstPage;";
			$sCSS += "mso-first-footer: DocFooterFirstPage;";
		} else {
			##Only set special first footer/header in section1. Here use the same values.
			##DocHeaderPortrait can be used for either orientation since the new Aspose
			##generation does not have the table width problem that the old way had
			$sCSS += "mso-title-page:no;";
			$sCSS += "mso-first-header: DocHeaderPortrait;";
			$sCSS += "mso-first-footer: DocFooterPortrait;";
		};
	};
	return $sCSS;
}
void SSC_DBObj::GetGenericWordPageStyles( $bFirst ) {
	sGetGenericWordPageStyles( $bFirst );
}

variant SSC_DBObj::sGetInheritedPageValue( $sRequest ) {
	return sGetDataValue( $sRequest );
}

variant SSC_DBObj::lsChildPageSizeTypes() {
	return CList(String);
}


##========================================================
##	CheckPropertyWriteAccess
##
##  Check if write access is allowed to a property
##========================================================
variant SSC_DBObj::CheckPropertyWriteAccess($sProperty, $sCondition, $bCheckVersion, $bThrow) {
	## check modify access
	$bOK = true;

	## support conditional modification (created the correct condition if necessary)
	if ( $sCondition == "" )
		$sCondition = "DATA," + upper($sProperty);

	$sModifyError = sOKToModifyConditionally( $bCheckVersion, $sCondition );

	if ( $sModifyError != "" ){
		$bOK = false;

		## throw an erro when requested
		if ( $bThrow ) throw( $sModifyError );
	};

	return $bOK;
}

##===========================================================================
## oGetRegistrar
## Get registrar
##===========================================================================
variant SSC_DBObj::oGetRegistrar() {

	## try to get project manager
	if ($this.ClassName == "SSC_ProjectManager")
		$oPM = $this;
	else
		$oPM = oGetProjectManager();

	if ($oPM.IsValid) {
		$oRegistrar = $oPM.oAseRegistrar;
	} else {
		$oRegistrar = AseRegistrar::oGet_s();
	};

	return $oRegistrar;
}


variant SSC_DBObj::mssGetRapidAdderArgs_RowDetails( $oSection, $sRowDetailSelected, $sTraceColumnSuffix )
{
	$sSectionFormatRAMode = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatRAMode" + $sTraceColumnSuffix );

	##in a given thread, this shouldn't change, so cache it
	$mssArgs = $oSection.Context.Get( "mssGetRapidAdderArgs" + EOI + $sTraceColumnSuffix + EOI + $sSectionFormatRAMode, Lifespan.Request );
	if( $mssArgs != NULL )
		return $mssArgs;

	$mssArgs = CMap( CList(), CList(), True );

	##$sSingleRapidAdder = $oSection.sGetData( "sSingleRapidAdder" + $sTraceColumnSuffix );
	##$mssArgs << CMap( "sSingleRapidAdder", $sSingleRapidAdder );

	if ( $sSectionFormatRAMode == "Show a type-in field" )
		return $mssArgs;

	if ( $sSectionFormatRAMode == "Show a picker only" )
	{
		$mssArgs << CMap( "sHideRapidAdderText", "true" );
	};

	if ( $sSectionFormatRAMode ~ "m/picker/i" or $sSectionFormatRAMode ~ "m/auto-complete/i" )
	{
		$sSectionFormatRADataSource = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatRADataSource" + $sTraceColumnSuffix );
		$sSectionFormatRADataSourceRefId = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatRADataSourceRefId" + $sTraceColumnSuffix );

		$oRASource = $oSection.oGetRASource( $sSectionFormatRADataSource, $sSectionFormatRADataSourceRefId );

		if ( $oRASource )
		{
			$mssArgs << CMap( "sChoicesFrom", $oRASource.Ref );
		};
		$sRARequest = $oSection.sGetData( "sRowDetailSetting" + EOI + $sRowDetailSelected + EOI + "sSectionFormatRARequest" + $sTraceColumnSuffix );
		$mssArgs << CMap( "sChoicesRequest", $sRARequest );

	};
	if ( $sSectionFormatRAMode ~ "m/picker/i" )
	{
		$mssArgs << CMap( "sDialogShowingWhat", "StandardRapidAdderDialog" );
	};
	if ( $sSectionFormatRAMode ~ "m/auto-complete/i" )
	{
		$sChoices = "ObjectChoices";
		if ( $sSectionFormatRAMode == "Custom auto-complete" )
			$sChoices = sGetData( "sSectionFormatRAGetChoices" + $sTraceColumnSuffix );

		$mssArgs << CMap( "sAutoComplete", $sChoices );
	};

	$oSection.Context.Set( "mssGetRapidAdderArgs" + EOI + $sTraceColumnSuffix + EOI + $sSectionFormatRAMode, $mssArgs, Lifespan.Request );

	return $mssArgs;
}

variant SSC_DBObj::loGetStagedImportObjects() {
	##Should be an org or project
	$oOwner = $this;
	$oMasterRegistrar = $oOwner.oGetRegistrar();
	return $oMasterRegistrar.loGetStagedImportObjects();
}

#*!***************************************************************************************************
 * <summary>
 * 	Get the last modified date as a formatted string
 * </summary>
 * <visibility>
 * 	Internal
 * </visibility>
 * <returns>String</returns>
*****************************************************************************************************#
variant SSC_DBObj::sGetModifyDate() {
	$sDate = "";
	$dtDate = dtModified;

	## format date
	if ( $dtDate ) $sDate = Format( $dtDate, "mm/dd/yyyy hh:nn:ss" );

	return $sDate;
}


##===========================================================================
## ShowConfigurationExportCommands
##
## Show available configuration export commands
##===========================================================================
void SSC_DBObj::ShowConfigurationExportCommands( $iExportTop ) {
	$this.ShowConfigurationExportCommands( $iExportTop, false );
}

void SSC_DBObj::ShowConfigurationExportCommands( $iExportTop, $bSetContext ) {
	$bOrg = NOT ($this kindof "SSC_ProjectManager");
	$sRegistrarRef = Ref;
	$oRegistrar = oAseRegistrar;

	## The top level organization must use the global registrar
	if( $bOrg AND iType == -1 )
		$oRegistrar = AseRegistrar::oGet_s();
	$sRegistrarRef = $oRegistrar.Ref;

	$sFilename = $this.sGetData( "sDescription" );
	$sFilename = Replace( $sFilename, " ", "_" );
	$sFilename = Replace( $sFilename, """", "" );
	$sFilename = Replace( $sFilename, "'", "" );

	$sFilename = htmlencode( $sFilename );

	#inline
		<div sRef=<% $sRegistrarRef %> onclick='top.ExportToXML(this)' sType="appObj" sParams='all'
			sShowingWhat="Export" sContext='tree' sFilename='<%$sFilename%>'
			style="cursor:pointer;position:absolute;left:33px;top:<%$iExportTop%>px;width:175px;height:13px;"
			class="HelpTip" sHelpId="Callout_Export_all_customizations" >
			<%GetGenString( "ksLabelExportAllConfigurations" )%>
		</div>
		<div sRef='<% $sRegistrarRef %>'
			sShowingWhat="ExportCustomizationsByKeyword" sContext='tree'
			style=" cursor:pointer;position:absolute;left:33px;top:<%$iExportTop+20%>px;width:275px;height:13px;"
			class="HelpTipAndDialog" sHelpId="Callout_Export_customizations_by_keyword" >
			<%GetGenString( "ksLabelExportConfigurationsByKeyword" )%>
		</div>
	#endinline;

	$iExportTop += 40;

	## add label and hierarchical exports conditionally
	if ( $bOrg AND WosAseBuilder::bAllowConfigurationWorkflow_s() ) {
		#inline
		<div sRef='<% $sRegistrarRef %>'
			sShowingWhat="ExportCustomizationsByLabel" sContext='tree'
			style=" cursor:pointer;position:absolute;left:33px;top:<%$iExportTop%>px;width:275px;height:13px;"
			class="HelpTipAndDialog" sHelpId="Callout_Export_customizations_by_label" >
			<%GetGenString( "ksLabelExportConfigurationsByLabel" )%>
		</div>
		<div sRef='<% $sRegistrarRef %>'
			sShowingWhat="ExportCustomizationsHierarchical" sContext='tree'
			style=" cursor:pointer;position:absolute;left:33px;top:<%$iExportTop+20%>px;width:275px;height:13px;"
			class="HelpTipAndDialog" sHelpId="Callout_Export_customizations_hierarchical" >
			<%GetGenString( "ksLabelExportConfigurationsHierarchical" )%>
		</div>
		#endinline;

		$iExportTop += 40;
	};

	if ( $bSetContext ) {
		$this.Context.Set( "iTop", $iExportTop, LifeSpan.Request );
	};
}

##===========================================================================
## ShowConfigurationImportCommands
##
## Show available configuration import commands
##===========================================================================
void SSC_DBObj::ShowConfigurationImportCommands( $iImportTop ) {
	$this.ShowConfigurationImportCommands( $iImportTop, false );
}

void SSC_DBObj::ShowConfigurationImportCommands( $iImportTop, $bSetContext ) {
	$bOrg = NOT ($this kindof "SSC_Project");
	$sRef = Ref;

	#inline
		<div sRef='<% $sRef %>'
			sShowingWhat="ImportCustomizations" sContext='tree'
			style=" cursor:pointer;position:absolute;left:33px;top:<%$iImportTop%>px;width:275px;height:13px;"
			class="HelpTipAndDialog" sHelpId="Callout_Import_customizations" >
			<%GetGenString( "ksLabelImportConfigurations" )%>
		</div>
	#endinline;

	$iImportTop += 20;

	## add hierarchical import conditionally
	if ( $bOrg) {
		#inline
		<div sRef='<% $sRef %>'
			sShowingWhat="ImportHierarchicalCustomizations" sContext='tree'
			style=" cursor:pointer;position:absolute;left:33px;top:<%$iImportTop%>px;width:275px;height:13px;"
			class="HelpTipAndDialog" sHelpId="Callout_Import_customizations_hierarchical" >
			<%GetGenString( "ksLabelImportConfigurationsHierarchical" )%>
		</div>
		#endinline;

		$iImportTop += 20;
	};

	if ( $bSetContext ) {
		$this.Context.Set( "iTop", $iImportTop, LifeSpan.Request );
	};
}

variant SSC_DBObj::bInheritViewDefinitions() {
	return false;
}
##===========================================================================
## oGetProject
##
## Returns the project object
##===========================================================================

variant SSC_DBObj::oGetProject() {
	$oProject = oProject;
	if ($oProject.isvalid) {
		return $oProject;
	} else {
		return nullobject;
	};
}

##===========================================================================
## oGetProjectManager
##
## Returns the project manager object
##===========================================================================

variant SSC_DBObj::oGetProjectManager() {
	$oProject = oGetProject();
	if ($oProject.isvalid) {
		$oPM = $oProject.oProjectManager;
		return $oPM;
	} else {
		return nullobject;
	};
}

##===========================================================================
## bIsPseudoDeleted
##
## Returns true if item is Pseudo Deleted
##===========================================================================
variant SSC_DBObj::bIsPseudoDeleted() {
	$iFlags = $this.iFlags;
	$bDeleted = CBool(Floor($iFlags DIV 2) MOD 2);
	return $bDeleted;
}

##===========================================================================
## bSupportsChangeControl
##
##===========================================================================
variant SSC_DBObj::bSupportsChangeControl() {
	## Most DBObj types support change control. Lower level classes have methods when that is not the case
	return true;
}
